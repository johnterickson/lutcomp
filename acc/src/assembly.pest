WHITESPACE = _{" " | "\t"}
alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
label = { ":" ~ alpha ~ (alpha | digit | "_" )+ }
new_line = _{ "\r\n" | "\n"}

hex_constant = {"-"? ~ ASCII_HEX_DIGIT+}
char_constant = {"'" ~ ANY ~ "'"}
constant = _{char_constant | "$" ~ hex_constant | label}

register = { "a" | "b" | "c" | "pc" | "serialin" | "serialout" }
deref_register = {"&" ~ register}
direct_register = {!"&" ~ register}
maybe_deref_register = _{ deref_register | direct_register}
mode_imm8 = {!"&" ~ register ~ constant}
mode_imm4 = {!"&" ~ register ~ maybe_deref_register ~ constant}
mode_regs = {!"&" ~ register ~ maybe_deref_register ~ maybe_deref_register}
mode_memoutregs = {"&" ~ register ~ maybe_deref_register ~ maybe_deref_register}
args = _{mode_imm8 | mode_imm4 | mode_regs | mode_memoutregs}

opcode = {"loadimm" | "add" | "or" | "xor" | "and" | "shift" | "equals" | "multiply" }

// pseudo_call = { "!call" ~ label}
// pseudo_return = { "!return" }
// pseudo_initstack = { "!init_stack" }
pseudo_skip_if_zero = { "!skip_if_zero" }
pseudo_copy = { "!copy" ~ register ~ maybe_deref_register}

instruction = {!"#" ~ !":" ~ opcode ~ args }
comment = { "#" ~ (!new_line ~ ANY)* }
line = _{ pseudo_skip_if_zero | pseudo_copy | comment | label | instruction }

program = {SOI ~ (line? ~ new_line)* ~ EOI}