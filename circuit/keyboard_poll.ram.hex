v2.0 raw
# ImageBaseAddress=0x00090000
# entry
# 90000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 90001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 90007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 9000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 09 00 
# 90013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 23 04 09 
# 90017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 9001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([17])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([20, 21, 22, 23])
# Var release_in_progress (Local release_in_progress Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var rtr (Local rtr Number(U8) Reg(U8)) Reg(U8) Some([16])
# Var shift_held (Local shift_held Number(U8) Reg(U8)) Reg(U8) Some([25])
# Var t0 (t0 Number(U8, 0)) Reg(U8) Some([16])
# Var t1 (t1 Number(U8, 0)) Reg(U8) Some([17])
# Var t10 (t10 Number(USIZE, 4)) Reg(U32) Some([20, 21, 22, 23])
# Var t11 (t11 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([28, 29, 30, 31])
# Var t12 (t12 Ident("code")) Reg(U8) Some([16])
# Var t13 (t13 Ident("shift_held")) Reg(U8) Some([16])
# Var t14 (t14 Number(U8, 0)) Reg(U8) Some([32])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([28, 29, 30, 31])
# Var t16 (t16 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([28, 29, 30, 31])
# Var t17 (t17 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([36, 37, 38, 39])
# Var t18 (t18 Ident("index")) Reg(U32) Some([20, 21, 22, 23])
# Var t19 (t19 Number(USIZE, 1)) Reg(U32) Some([36, 37, 38, 39])
# Var t2 (t2 Arithmetic(And, Ident("rtr"), Number(U8, 1))) Reg(U8) Some([40])
# Var t20 (t20 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([28, 29, 30, 31])
# Var t21 (t21 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([28, 29, 30, 31])
# Var t22 (t22 Ident("index")) Reg(U32) Some([20, 21, 22, 23])
# Var t23 (t23 Ident("release_in_progress")) Reg(U8) Some([24])
# Var t24 (t24 Number(U8, 0)) Reg(U8) Some([32])
# Var t25 (t25 Number(U8, 0)) Reg(U8) Some([16])
# Var t26 (t26 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([32])
# Var t27 (t27 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([36, 37, 38, 39])
# Var t28 (t28 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([36, 37, 38, 39])
# Var t29 (t29 Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([44, 45, 46, 47])
# Var t3 (t3 Ident("rtr")) Reg(U8) Some([16])
# Var t30 (t30 Ident("index")) Reg(U32) Some([20, 21, 22, 23])
# Var t31 (t31 Number(USIZE, 2)) Reg(U32) Some([44, 45, 46, 47])
# Var t32 (t32 Ident("release_in_progress")) Reg(U8) Some([16])
# Var t33 (t33 Number(U8, 0)) Reg(U8) Some([24])
# Var t34 (t34 Number(U8, 0)) Reg(U8) Some([16])
# Var t35 (t35 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([40])
# Var t36 (t36 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([20, 21, 22, 23])
# Var t37 (t37 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t38 (t38 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([20, 21, 22, 23])
# Var t39 (t39 Ident("index")) Reg(U32) Some([20, 21, 22, 23])
# Var t4 (t4 Number(U8, 1)) Reg(U8) Some([40])
# Var t40 (t40 Number(USIZE, 3)) Reg(U32) Some([36, 37, 38, 39])
# Var t41 (t41 Ident("ch")) Reg(U8) Some([16])
# Var t42 (t42 Number(U8, 0)) Reg(U8) Some([40])
# Var t43 (t43 Ident("ch")) Reg(U8) Some([16])
# Var t44 (t44 Ident("ch")) Reg(U8) Some([16])
# Var t45 (t45 Number(U8, 113)) Reg(U8) Some([17])
# Var t46 (t46 Number(U8, 0)) Reg(U8) Some([16])
# Var t5 (t5 Number(U8, 0)) Reg(U8) Some([32])
# Var t6 (t6 Arithmetic(And, Ident("rtr"), Number(U8, 4))) Reg(U8) Some([16])
# Var t7 (t7 Ident("rtr")) Reg(U8) Some([16])
# Var t8 (t8 Number(U8, 4)) Reg(U8) Some([40])
# Var t9 (t9 Number(U8, 0)) Reg(U8) Some([40])
# shift_held <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"shift_held\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 90423 Instruction { source: "shift_held <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"shift_held\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x19), Constant8(0x00=0)], resolved: None }
04 19 00 
# release_in_progress <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"release_in_progress\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 90426 Instruction { source: "release_in_progress <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"release_in_progress\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x00=0)], resolved: None }
04 18 00 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\"rtr\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_ready_to_read\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }"] }
# main_while_predicate_0
# t0 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\"rtr\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_ready_to_read\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90429 Instruction { source: "t0 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\\\"rtr\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\"rtr\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_ready_to_read\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 9042c Instruction { source: "t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\\\"rtr\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x11), Constant8(0x00=0)], resolved: None }
04 11 00 
# if t0 == t1 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\"rtr\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_ready_to_read\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 9042f Instruction { source: "if t0 == t1 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\\\"rtr\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x11)], resolved: None }
15 10 11 
# 90432 Instruction { source: "if t0 == t1 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\\\"rtr\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_1)], resolved: None }
72 3a 04 09 
# 90436 Instruction { source: "if t0 == t1 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\\\"rtr\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 7c 05 09 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Number(U8, 0) }, Assign { target: Ident(\"rtr\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_ready_to_read\", parameters: [] }) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }] }"] }
# main_while_body_1
# ch <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 9043a Instruction { source: "ch <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x11), Constant8(0x00=0)], resolved: None }
04 11 00 
# Some(rtr) <= call io_ready_to_read()
# 	SourceContext { contexts: ["Assign { target: Ident(\"rtr\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_ready_to_read\", parameters: [] }) }", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 9043d Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x10)], resolved: None }
79 10 
# t3 <- rtr U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Ident(\"rtr\")", "Ident(\"rtr\")"] }
# optimized away noop copy Instruction { source: "t3 <- rtr U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Ident(\\\"rtr\\\")\", \"Ident(\\\"rtr\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t4 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 9043f Instruction { source: "t4 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x01=1)], resolved: None }
04 28 01 
# t2 <- t3 BitwiseAnd t4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 1))"] }
# 90442 Instruction { source: "t2 <- t3 BitwiseAnd t4\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x10), Register(0x28), Register(0x28)], resolved: None }
1b 10 28 28 
# t5 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90446 Instruction { source: "t5 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x00=0)], resolved: None }
04 20 00 
# if t2 != t5 then 'main_if_true_0_4' else 'main_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }"] }
# 90449 Instruction { source: "if t2 != t5 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x28), Register(0x20)], resolved: None }
15 28 20 
# 9044c Instruction { source: "if t2 != t5 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_else_0_5)], resolved: None }
72 56 04 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t2 != t5 then 'main_if_true_0_4' else 'main_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\\\"code\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"io_read2\\\", parameters: [] }) }, Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }, Declare { scope: Local, name: \\\"c\\\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_0_4)], resolved: None }
# :main_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 1)), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }]), (Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }, [Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }, Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }, Declare { scope: Local, name: \"c\", var_type: Number(U8) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }])], else_block: [] }"] }
# main_if_true_0_4
# ch <- ttyin
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: TtyIn }", "TtyIn"] }
# 90450 Instruction { source: "ch <- ttyin\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: TtyIn }\", \"TtyIn\"] }", opcode: In0, args: [Register(0x11)], resolved: None }
60 11 
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 90452 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 45 05 09 
# :main_if_else_0_5
# 	SourceContext { contexts: [] }
# main_if_else_0_5
# t7 <- rtr U8
# 	SourceContext { contexts: ["Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Ident(\"rtr\")", "Ident(\"rtr\")"] }
# optimized away noop copy Instruction { source: "t7 <- rtr U8\n\tSourceContext { contexts: [\"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Ident(\\\"rtr\\\")\", \"Ident(\\\"rtr\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t8 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 90456 Instruction { source: "t8 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x04=4)], resolved: None }
04 28 04 
# t6 <- t7 BitwiseAnd t8
# 	SourceContext { contexts: ["Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))", "Arithmetic(And, Ident(\"rtr\"), Number(U8, 4))"] }
# 90459 Instruction { source: "t6 <- t7 BitwiseAnd t8\n\tSourceContext { contexts: [\"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\", \"Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4))\"] }", opcode: And8, args: [Register(0x10), Register(0x28), Register(0x10)], resolved: None }
1b 10 28 10 
# t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 9045d Instruction { source: "t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x00=0)], resolved: None }
04 28 00 
# if t6 != t9 then 'main_if_true_1_6' else 'main_if_else_1_7'
# 	SourceContext { contexts: ["Comparison { op: NotEquals, left: Arithmetic(And, Ident(\"rtr\"), Number(U8, 4)), right: Number(U8, 0) }"] }
# 90460 Instruction { source: "if t6 != t9 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x28)], resolved: None }
15 10 28 
# 90463 Instruction { source: "if t6 != t9 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_else_1_7)], resolved: None }
72 45 05 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t6 != t9 then 'main_if_true_1_6' else 'main_if_else_1_7'\n\tSourceContext { contexts: [\"Comparison { op: NotEquals, left: Arithmetic(And, Ident(\\\"rtr\\\"), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_1_6)], resolved: None }
# :main_if_true_1_6
# 	SourceContext { contexts: [] }
# main_if_true_1_6
# Some(code) <= call io_read2()
# 	SourceContext { contexts: ["Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }", "Call(Call { function: \"io_read2\", parameters: [] })"] }
# 90467 Instruction { source: "IoRead2", opcode: In2, args: [Register(0x10)], resolved: None }
62 10 
# t10 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 90469 Instruction { source: "t10 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x14), Constant32(0x00000004=4)], resolved: None }
20 14 04 00 00 00 
# t12 <- code U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Ident(\"code\")", "Ident(\"code\")"] }
# optimized away noop copy Instruction { source: "t12 <- code U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Ident(\\\"code\\\")\", \"Ident(\\\"code\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x10)], resolved: None }
# t11 U32 <- t12 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }"] }
# 9046f Instruction { source: "Zero-pad for t11 U32 <- t12 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: LoadImm32, args: [Register(0x1c), Constant32(0x00000000=0)], resolved: None }
20 1c 00 00 00 00 
# 90475 Instruction { source: "t11 U32 <- t12 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: Copy8, args: [Register(0x10), Register(0x1c)], resolved: None }
0b 10 1c 
# index <- t10 Multiply t11
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))"] }
# 90478 Instruction { source: "index <- t10 Multiply t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: Mul8_16, args: [Register(0x14), Register(0x1c), Register(0x14)], resolved: None }
11 14 1c 14 
# 9047c Instruction { source: "index <- t10 Multiply t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x16), Constant8(0x00=0)], resolved: None }
04 16 00 
# 9047f Instruction { source: "index <- t10 Multiply t11\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x17), Constant8(0x00=0)], resolved: None }
04 17 00 
# t13 <- shift_held U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }", "Ident(\"shift_held\")", "Ident(\"shift_held\")"] }
# 90482 Instruction { source: "t13 <- shift_held U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }\", \"Ident(\\\"shift_held\\\")\", \"Ident(\\\"shift_held\\\")\"] }", opcode: Copy8, args: [Register(0x19), Register(0x10)], resolved: None }
0b 19 10 
# t14 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90485 Instruction { source: "t14 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x00=0)], resolved: None }
04 20 00 
# if t13 != t14 then 'main_if_true_0_9' else 'main_if_else_0_10'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }"] }
# 90488 Instruction { source: "if t13 != t14 then 'main_if_true_0_9' else 'main_if_else_0_10'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x20)], resolved: None }
15 10 20 
# 9048b Instruction { source: "if t13 != t14 then 'main_if_true_0_9' else 'main_if_else_0_10'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_else_0_10)], resolved: None }
72 ae 04 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t13 != t14 then 'main_if_true_0_9' else 'main_if_else_0_10'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_0_9)], resolved: None }
# :main_if_true_0_9
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }"] }
# main_if_true_0_9
# t16 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 9048f Instruction { source: "t16 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 1c 22 00 09 00 
# t18 <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t18 <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t19 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 90495 Instruction { source: "t19 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000001=1)], resolved: None }
20 24 01 00 00 00 
# t17 <- t18 Add t19
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))"] }
# 9049b Instruction { source: "t17 <- t18 Add t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 9049c Instruction { source: "t17 <- t18 Add t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x24), Register(0x24)], resolved: None }
30 14 24 24 
# 904a0 Instruction { source: "t17 <- t18 Add t19\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 904a1 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 904a2 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x24), Register(0x1c)], resolved: None }
30 1c 24 1c 
# 904a6 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# c <- mem[t15] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 904a7 Instruction { source: "c <- mem[t15] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# goto main_if_end_8
# 	SourceContext { contexts: [] }
# 904aa Instruction { source: "goto main_if_end_8\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_8)], resolved: None }
70 bd 04 09 
# :main_if_else_0_10
# 	SourceContext { contexts: [] }
# main_if_else_0_10
# t21 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 904ae Instruction { source: "t21 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x1c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 1c 22 00 09 00 
# t22 <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t22 <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t20 <- t21 Add t22
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))"] }
# 904b4 Instruction { source: "t20 <- t21 Add t22\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 904b5 Instruction { source: "t20 <- t21 Add t22\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x1c), Register(0x14), Register(0x1c)], resolved: None }
30 1c 14 1c 
# 904b9 Instruction { source: "t20 <- t21 Add t22\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# c <- mem[t20] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))"] }
# 904ba Instruction { source: "c <- mem[t20] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\"] }", opcode: Load8, args: [Register(0x1c), Register(0x10)], resolved: None }
05 1c 10 
# :main_if_end_8
# 	SourceContext { contexts: [] }
# main_if_end_8
# t23 <- release_in_progress U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }", "Ident(\"release_in_progress\")", "Ident(\"release_in_progress\")"] }
# optimized away noop copy Instruction { source: "t23 <- release_in_progress U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Ident(\\\"release_in_progress\\\")\", \"Ident(\\\"release_in_progress\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t24 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 904bd Instruction { source: "t24 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x20), Constant8(0x00=0)], resolved: None }
04 20 00 
# if t23 == t24 then 'main_if_true_0_12' else 'main_if_else_0_13'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }"] }
# 904c0 Instruction { source: "if t23 == t24 then 'main_if_true_0_12' else 'main_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x18), Register(0x20)], resolved: None }
15 18 20 
# 904c3 Instruction { source: "if t23 == t24 then 'main_if_true_0_12' else 'main_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_12)], resolved: None }
72 cb 04 09 
# 904c7 Instruction { source: "if t23 == t24 then 'main_if_true_0_12' else 'main_if_else_0_13'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_13)], resolved: None }
70 d2 04 09 
# :main_if_true_0_12
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }])], else_block: [] }"] }
# main_if_true_0_12
# ch <- c U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Ident(\"c\") }", "Ident(\"c\")"] }
# 904cb Instruction { source: "ch <- c U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Ident(\\\"c\\\") }\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x10), Register(0x11)], resolved: None }
0b 10 11 
# goto main_if_end_11
# 	SourceContext { contexts: [] }
# 904ce Instruction { source: "goto main_if_end_11\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_11)], resolved: None }
70 d2 04 09 
# :main_if_else_0_13
# 	SourceContext { contexts: [] }
# main_if_else_0_13
# :main_if_end_11
# 	SourceContext { contexts: [] }
# main_if_end_11
# t25 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 904d2 Instruction { source: "t25 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# t28 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 904d5 Instruction { source: "t28 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 24 22 00 09 00 
# t30 <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t30 <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t31 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 904db Instruction { source: "t31 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000002=2)], resolved: None }
20 2c 02 00 00 00 
# t29 <- t30 Add t31
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))"] }
# 904e1 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 904e2 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x2c), Register(0x2c)], resolved: None }
30 14 2c 2c 
# 904e6 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t27 <- t28 Add t29
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 904e7 Instruction { source: "t27 <- t28 Add t29\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 904e8 Instruction { source: "t27 <- t28 Add t29\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x2c), Register(0x24)], resolved: None }
30 24 2c 24 
# 904ec Instruction { source: "t27 <- t28 Add t29\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t26 <- mem[t27] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 904ed Instruction { source: "t26 <- mem[t27] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: Load8, args: [Register(0x24), Register(0x20)], resolved: None }
05 24 20 
# if t25 != t26 then 'main_if_true_0_15' else 'main_if_else_0_16'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }"] }
# 904f0 Instruction { source: "if t25 != t26 then 'main_if_true_0_15' else 'main_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x20)], resolved: None }
15 10 20 
# 904f3 Instruction { source: "if t25 != t26 then 'main_if_true_0_15' else 'main_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JzImm, args: [Label24(main_if_else_0_16)], resolved: None }
72 12 05 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t25 != t26 then 'main_if_true_0_15' else 'main_if_else_0_16'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_0_15)], resolved: None }
# :main_if_true_0_15
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }"] }
# main_if_true_0_15
# t32 <- release_in_progress U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }", "Ident(\"release_in_progress\")", "Ident(\"release_in_progress\")"] }
# 904f7 Instruction { source: "t32 <- release_in_progress U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Ident(\\\"release_in_progress\\\")\", \"Ident(\\\"release_in_progress\\\")\"] }", opcode: Copy8, args: [Register(0x18), Register(0x10)], resolved: None }
0b 18 10 
# t33 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 904fa Instruction { source: "t33 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x00=0)], resolved: None }
04 18 00 
# if t32 != t33 then 'main_if_true_0_18' else 'main_if_else_0_19'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }"] }
# 904fd Instruction { source: "if t32 != t33 then 'main_if_true_0_18' else 'main_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x18)], resolved: None }
15 10 18 
# 90500 Instruction { source: "if t32 != t33 then 'main_if_true_0_18' else 'main_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_else_0_19)], resolved: None }
72 0b 05 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t32 != t33 then 'main_if_true_0_18' else 'main_if_else_0_19'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_0_18)], resolved: None }
# :main_if_true_0_18
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }] }"] }
# main_if_true_0_18
# shift_held <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 90504 Instruction { source: "shift_held <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x19), Constant8(0x00=0)], resolved: None }
04 19 00 
# goto main_if_end_17
# 	SourceContext { contexts: [] }
# 90507 Instruction { source: "goto main_if_end_17\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_17)], resolved: None }
70 0e 05 09 
# :main_if_else_0_19
# 	SourceContext { contexts: [] }
# main_if_else_0_19
# shift_held <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"shift_held\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)"] }
# 9050b Instruction { source: "shift_held <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x19), Constant8(0x01=1)], resolved: None }
04 19 01 
# :main_if_end_17
# 	SourceContext { contexts: [] }
# main_if_end_17
# goto main_if_end_14
# 	SourceContext { contexts: [] }
# 9050e Instruction { source: "goto main_if_end_14\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_14)], resolved: None }
70 12 05 09 
# :main_if_else_0_16
# 	SourceContext { contexts: [] }
# main_if_else_0_16
# :main_if_end_14
# 	SourceContext { contexts: [] }
# main_if_end_14
# t34 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90512 Instruction { source: "t34 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# t37 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 90515 Instruction { source: "t37 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 30 22 00 09 00 
# t39 <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t39 <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x14), Register(0x14)], resolved: None }
# t40 <- 0n3/0x00000003u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Number(USIZE, 3)", "Number(USIZE, 3)"] }
# 9051b Instruction { source: "t40 <- 0n3/0x00000003u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Number(USIZE, 3)\", \"Number(USIZE, 3)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000003=3)], resolved: None }
20 24 03 00 00 00 
# t38 <- t39 Add t40
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))"] }
# 90521 Instruction { source: "t38 <- t39 Add t40\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90522 Instruction { source: "t38 <- t39 Add t40\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddCarry32_1, args: [Register(0x14), Register(0x24), Register(0x14)], resolved: None }
30 14 24 14 
# 90526 Instruction { source: "t38 <- t39 Add t40\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t36 <- t37 Add t38
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 90527 Instruction { source: "t36 <- t37 Add t38\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90528 Instruction { source: "t36 <- t37 Add t38\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_1, args: [Register(0x30), Register(0x14), Register(0x14)], resolved: None }
30 30 14 14 
# 9052c Instruction { source: "t36 <- t37 Add t38\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t35 <- mem[t36] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 9052d Instruction { source: "t35 <- mem[t36] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: Load8, args: [Register(0x14), Register(0x28)], resolved: None }
05 14 28 
# if t34 != t35 then 'main_if_true_0_21' else 'main_if_else_0_22'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }"] }
# 90530 Instruction { source: "if t34 != t35 then 'main_if_true_0_21' else 'main_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x28)], resolved: None }
15 10 28 
# 90533 Instruction { source: "if t34 != t35 then 'main_if_true_0_21' else 'main_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JzImm, args: [Label24(main_if_else_0_22)], resolved: None }
72 3e 05 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t34 != t35 then 'main_if_true_0_21' else 'main_if_else_0_22'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_0_21)], resolved: None }
# :main_if_true_0_21
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }"] }
# main_if_true_0_21
# release_in_progress <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)"] }
# 90537 Instruction { source: "release_in_progress <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x01=1)], resolved: None }
04 18 01 
# goto main_if_end_20
# 	SourceContext { contexts: [] }
# 9053a Instruction { source: "goto main_if_end_20\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_20)], resolved: None }
70 41 05 09 
# :main_if_else_0_22
# 	SourceContext { contexts: [] }
# main_if_else_0_22
# release_in_progress <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 9053e Instruction { source: "release_in_progress <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x18), Constant8(0x00=0)], resolved: None }
04 18 00 
# :main_if_end_20
# 	SourceContext { contexts: [] }
# main_if_end_20
# goto main_if_end_3
# 	SourceContext { contexts: [] }
# 90541 Instruction { source: "goto main_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_3)], resolved: None }
70 45 05 09 
# :main_if_else_1_7
# 	SourceContext { contexts: [] }
# main_if_else_1_7
# :main_if_end_3
# 	SourceContext { contexts: [] }
# main_if_end_3
# t41 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 90545 Instruction { source: "t41 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x11), Register(0x10)], resolved: None }
0b 11 10 
# t42 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90548 Instruction { source: "t42 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x28), Constant8(0x00=0)], resolved: None }
04 28 00 
# if t41 != t42 then 'main_if_true_0_24' else 'main_if_else_0_25'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }", "Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 9054b Instruction { source: "if t41 != t42 then 'main_if_true_0_24' else 'main_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x28)], resolved: None }
15 10 28 
# 9054e Instruction { source: "if t41 != t42 then 'main_if_true_0_24' else 'main_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_if_else_0_25)], resolved: None }
72 78 05 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t41 != t42 then 'main_if_true_0_24' else 'main_if_else_0_25'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\\\"ch\\\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_if_true_0_24)], resolved: None }
# :main_if_true_0_24
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Number(U8, 0) }, [TtyOut { value: Ident(\"ch\") }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }])], else_block: [] }"] }
# main_if_true_0_24
# t43 <- ch U8
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 90552 Instruction { source: "t43 <- ch U8\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x11), Register(0x10)], resolved: None }
0b 11 10 
# ttyout <- t43
# 	SourceContext { contexts: ["TtyOut { value: Ident(\"ch\") }"] }
# 90555 Instruction { source: "ttyout <- t43\n\tSourceContext { contexts: [\"TtyOut { value: Ident(\\\"ch\\\") }\"] }", opcode: Out0, args: [Register(0x10)], resolved: None }
68 10 
# t44 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# 90557 Instruction { source: "t44 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x11), Register(0x10)], resolved: None }
0b 11 10 
# t45 <- 0n113/0x71u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }", "Number(U8, 113)", "Number(U8, 113)"] }
# 9055a Instruction { source: "t45 <- 0n113/0x71u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\", \"Number(U8, 113)\", \"Number(U8, 113)\"] }", opcode: LoadImm8, args: [Register(0x11), Constant8(0x71=113)], resolved: None }
04 11 71 
# if t44 == t45 then 'main_if_true_0_27' else 'main_if_else_0_28'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }"] }
# 9055d Instruction { source: "if t44 == t45 then 'main_if_true_0_27' else 'main_if_else_0_28'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: Cmp8, args: [Register(0x10), Register(0x11)], resolved: None }
15 10 11 
# 90560 Instruction { source: "if t44 == t45 then 'main_if_true_0_27' else 'main_if_else_0_28'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JzImm, args: [Label24(main_if_true_0_27)], resolved: None }
72 68 05 09 
# 90564 Instruction { source: "if t44 == t45 then 'main_if_true_0_27' else 'main_if_else_0_28'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 113) }\"] }", opcode: JmpImm, args: [Label24(main_if_else_0_28)], resolved: None }
70 74 05 09 
# :main_if_true_0_27
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# main_if_true_0_27
# t46 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90568 Instruction { source: "t46 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x10), Constant8(0x00=0)], resolved: None }
04 10 00 
# return Some(t46)
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 9056b Instruction { source: "return Some(t46)\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x10), Register(0x00)], resolved: None }
0b 10 00 
# 9056e Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto main_if_end_26
# 	SourceContext { contexts: [] }
# 90570 Instruction { source: "goto main_if_end_26\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_26)], resolved: None }
70 74 05 09 
# :main_if_else_0_28
# 	SourceContext { contexts: [] }
# main_if_else_0_28
# :main_if_end_26
# 	SourceContext { contexts: [] }
# main_if_end_26
# goto main_if_end_23
# 	SourceContext { contexts: [] }
# 90574 Instruction { source: "goto main_if_end_23\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_if_end_23)], resolved: None }
70 78 05 09 
# :main_if_else_0_25
# 	SourceContext { contexts: [] }
# main_if_else_0_25
# :main_if_end_23
# 	SourceContext { contexts: [] }
# main_if_end_23
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 90578 Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 29 04 09 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 9057c Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
