v2.0 raw
# In IlFunctionId("KeyBoard_init"), optimizing round #0
# In IlFunctionId("KeyBoard_init"), in block from 0..=7, removing repetitive write at 4 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("KeyBoard_init"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #64 && #65: 'IlLabelId("Keyboard_poll_if_else_0_11")' and 'IlLabelId("Keyboard_poll_if_end_9")' to 'IlLabelId("Keyboard_poll_if_end_9")'
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #39 && #40: 'IlLabelId("Keyboard_poll_if_else_0_8")' and 'IlLabelId("Keyboard_poll_if_end_6")' to 'IlLabelId("Keyboard_poll_if_end_6")'
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #7 && #8: 'IlLabelId("Keyboard_poll_if_else_0_2")' and 'IlLabelId("Keyboard_poll_if_end_0")' to 'IlLabelId("Keyboard_poll_if_end_0")'
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #61: goto Keyboard_poll_if_end_9
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #37: goto Keyboard_poll_if_end_6
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #6: goto Keyboard_poll_if_end_0
# In IlFunctionId("Keyboard_poll"), optimizing round #3
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #58 && #59: 'IlLabelId("Keyboard_poll_if_end_12")' and 'IlLabelId("Keyboard_poll_if_end_9")' to 'IlLabelId("Keyboard_poll_if_end_9")'
# In IlFunctionId("Keyboard_poll"), optimizing round #4
# In IlFunctionId("delay"), optimizing round #0
# In IlFunctionId("getchar"), optimizing round #0
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("getchar"), optimizing round #1
# In IlFunctionId("getchar"), merging duplicate labels at #23 && #24: 'IlLabelId("getchar_if_else_1_7")' and 'IlLabelId("getchar_if_end_3")' to 'IlLabelId("getchar_if_end_3")'
# In IlFunctionId("getchar"), optimizing round #2
# In IlFunctionId("getchar"), removing no-op goto instruction #22: goto getchar_if_end_3
# In IlFunctionId("getchar"), optimizing round #3
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), in block from 0..=21, removing repetitive write at 18 because it is the same as at 8: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_draw_char"), optimizing round #3
# In IlFunctionId("lcd_init"), optimizing round #0
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_init"), optimizing round #1
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 24 because it is the same as at 20: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 28 because it is the same as at 24: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 22 because it is the same as at 18: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 26 because it is the same as at 22: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 38 because it is the same as at 32: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 44 because it is the same as at 38: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 50 because it is the same as at 44: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 34 because it is the same as at 30: t9f48 <- 0n2/0x02u8 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 46 because it is the same as at 40: ta97f <- 0n0/0x00u8 
# In IlFunctionId("lcd_init"), optimizing round #2
# In IlFunctionId("lcd_logical_to_physical"), optimizing round #0
# In IlFunctionId("lcd_putc"), optimizing round #0
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t9`.
# In IlFunctionId("lcd_putc"), optimizing round #1
# In IlFunctionId("lcd_putc"), merging duplicate labels at #53 && #54: 'IlLabelId("lcd_putc_if_else_0_8")' and 'IlLabelId("lcd_putc_if_end_6")' to 'IlLabelId("lcd_putc_if_end_6")'
# In IlFunctionId("lcd_putc"), optimizing round #2
# In IlFunctionId("lcd_putc"), removing no-op goto instruction #52: goto lcd_putc_if_end_6
# In IlFunctionId("lcd_putc"), optimizing round #3
# In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #21, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t3 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #22, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t4 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #36, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t6 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t7 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #41, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t8 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #4
# In IlFunctionId("lcd_putc"), optimizing round #5
# In IlFunctionId("lcd_putc"), in block from 14..=26, removing repetitive write at 21 because it is the same as at 15: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 14..=26, removing repetitive write at 22 because it is the same as at 21: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..=45, removing repetitive write at 36 because it is the same as at 30: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..=45, removing repetitive write at 40 because it is the same as at 36: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..=45, removing repetitive write at 41 because it is the same as at 40: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), optimizing round #0
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_scroll_up"), optimizing round #1
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #59 && #60: 'IlLabelId("lcd_scroll_up_if_else_0_11")' and 'IlLabelId("lcd_scroll_up_if_end_9")' to 'IlLabelId("lcd_scroll_up_if_end_9")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #37 && #38: 'IlLabelId("lcd_scroll_up_while_end_2")' and 'IlLabelId("lcd_scroll_up_while_predicate_6")' to 'IlLabelId("lcd_scroll_up_while_end_2")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #32 && #33: 'IlLabelId("lcd_scroll_up_if_else_0_5")' and 'IlLabelId("lcd_scroll_up_if_end_3")' to 'IlLabelId("lcd_scroll_up_if_end_3")'
# In IlFunctionId("lcd_scroll_up"), optimizing round #2
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #56: goto lcd_scroll_up_if_end_9
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #31: goto lcd_scroll_up_if_end_3
# In IlFunctionId("lcd_scroll_up"), optimizing round #3
# In IlFunctionId("lcd_scroll_up"), in block from 46..=55, removing repetitive write at 53 because it is the same as at 50: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_scroll_up"), at #1, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #5
# In IlFunctionId("lcd_scroll_up"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), in block from 0..=6, removing repetitive write at 1 because it is the same as at 0: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #7
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), merging duplicate labels at #9 && #10: 'IlLabelId("main_while_end_2")' and 'IlLabelId("function_end_main")' to 'IlLabelId("function_end_main")'
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), in block from 1..=4, removing repetitive write at 3 because it is the same as at 2: ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("println"), optimizing round #0
# In IlFunctionId("putc"), optimizing round #0
# In IlFunctionId("putc"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("putc"), optimizing round #1
# In IlFunctionId("putc"), merging duplicate labels at #10 && #11: 'IlLabelId("putc_if_else_0_2")' and 'IlLabelId("putc_if_end_0")' to 'IlLabelId("putc_if_end_0")'
# In IlFunctionId("putc"), optimizing round #2
# In IlFunctionId("putc"), removing no-op goto instruction #9: goto putc_if_end_0
# In IlFunctionId("putc"), optimizing round #3
# In IlFunctionId("queue_init"), optimizing round #0
# In IlFunctionId("queue_init"), in block from 0..=9, removing repetitive write at 6 because it is the same as at 2: ta97f <- 0n0/0x00u8 
# In IlFunctionId("queue_init"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #0
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #2
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), optimizing round #3
# In IlFunctionId("queue_pop"), optimizing round #4
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_pop"), optimizing round #5
# In IlFunctionId("queue_pop"), optimizing round #6
# In IlFunctionId("queue_pop"), merging duplicate labels at #11 && #12: 'IlLabelId("queue_pop_if_else_0_2")' and 'IlLabelId("queue_pop_if_end_0")' to 'IlLabelId("queue_pop_if_end_0")'
# In IlFunctionId("queue_pop"), optimizing round #7
# In IlFunctionId("queue_pop"), removing no-op goto instruction #10: goto queue_pop_if_end_0
# In IlFunctionId("queue_pop"), optimizing round #8
# In IlFunctionId("queue_push"), optimizing round #0
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), optimizing round #1
# In IlFunctionId("queue_push"), optimizing round #2
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), optimizing round #3
# In IlFunctionId("queue_push"), optimizing round #4
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), optimizing round #5
# In IlFunctionId("queue_push"), optimizing round #6
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# In IlFunctionId("queue_push"), optimizing round #7
# In IlFunctionId("queue_push"), optimizing round #8
# In IlFunctionId("readline"), optimizing round #0
# In IlFunctionId("readline"), in block from 0..=3, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("readline"), optimizing round #1
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), in block from 0..=11, removing repetitive write at 4 because it is the same as at 1: ta11a <- 0n1/0x01u8 
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("test_delay"), optimizing round #0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_delay"), optimizing round #1
# In IlFunctionId("test_delay"), optimizing round #2
# In IlFunctionId("test_echoline"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_6_s`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_6_t4d4f`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_Keyboard_poll_queue_push_6_tc1ff`.
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_6_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_t4d4f <- inline_Keyboard_poll_queue_push_6_s U32` with constant `inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_tc1ff <- inline_Keyboard_poll_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_t4d4f <- inline_Keyboard_poll_queue_push_6_s U32` with constant `inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_tc1ff <- inline_Keyboard_poll_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_t4d4f <- inline_Keyboard_poll_queue_push_6_s U32` with constant `inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_tc1ff <- inline_Keyboard_poll_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_6_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_6_t4d4f <- inline_Keyboard_poll_queue_push_6_s U32` with constant `inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_6_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_6_t4d4f <- inline_Keyboard_poll_queue_push_6_s U32` with constant `inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #3
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_6_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_6_t4d4f <- inline_Keyboard_poll_queue_push_6_s U32` with constant `inline_Keyboard_poll_queue_push_6_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #4
# In IlFunctionId("Keyboard_poll"), optimizing round #5
# In IlFunctionId("Keyboard_poll"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Keyboard.j':(31,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("Keyboard_poll"), optimizing round #6
# In IlFunctionId("Keyboard_poll"), optimizing round #7
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #46: goto inline_Keyboard_poll_queue_push_6_function_end_queue_push
# In IlFunctionId("Keyboard_poll"), optimizing round #8
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #46 && #47: 'IlLabelId("inline_Keyboard_poll_queue_push_6_function_end_queue_push")' and 'IlLabelId("Keyboard_poll_if_end_6")' to 'IlLabelId("Keyboard_poll_if_end_6")'
# In IlFunctionId("Keyboard_poll"), optimizing round #9
# In IlFunctionId("Keyboard_poll"), in block from 32..=46, removing repetitive write at 41 because it is the same as at 36: inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("Keyboard_poll"), in block from 32..=46, removing repetitive write at 42 because it is the same as at 41: inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("Keyboard_poll"), optimizing round #10
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `inline_lcd_draw_char_lcd_logical_to_physical_0_i` - which is also never modified. Replacing refs to latter with the former and deleting the copy: inline_lcd_draw_char_lcd_logical_to_physical_0_i <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), removing no-op goto instruction #14: goto inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("main"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_main_getchar_8_inline_getchar_queue_pop_5_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_main_getchar_8_inline_getchar_queue_push_7_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff`.
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_s <- inline_main_getchar_8_tfff6 U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_s <- inline_main_getchar_8_tfff6 U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), var `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("main"), var `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("main"), optimizing round #3
# In IlFunctionId("main"), var `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("main"), optimizing round #4
# In IlFunctionId("main"), var `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("main"), optimizing round #5
# In IlFunctionId("main"), var `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("main"), optimizing round #6
# In IlFunctionId("main"), optimizing round #7
# In IlFunctionId("main"), var `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("main"), optimizing round #8
# In IlFunctionId("main"), var `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("main"), optimizing round #9
# In IlFunctionId("main"), var `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"main\"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("main"), optimizing round #10
# In IlFunctionId("main"), optimizing round #11
# In IlFunctionId("main"), var `inline_main_getchar_8_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("main"), optimizing round #12
# In IlFunctionId("main"), var `inline_main_getchar_8_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_main_getchar_8_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("main"), optimizing round #13
# In IlFunctionId("main"), optimizing round #14
# In IlFunctionId("main"), removing no-op goto instruction #82: goto inline_main_putc_1_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #69: goto inline_main_getchar_8_function_end_getchar
# In IlFunctionId("main"), removing no-op goto instruction #63: goto inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop
# In IlFunctionId("main"), removing no-op goto instruction #29: goto inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push
# In IlFunctionId("main"), optimizing round #15
# In IlFunctionId("main"), merging duplicate labels at #78 && #79: 'IlLabelId("inline_main_putc_1_putc_if_end_0")' and 'IlLabelId("inline_main_putc_1_function_end_putc")' to 'IlLabelId("inline_main_putc_1_putc_if_end_0")'
# In IlFunctionId("main"), optimizing round #16
# In IlFunctionId("main"), in block from 15..=29, removing repetitive write at 24 because it is the same as at 19: inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("main"), in block from 15..=29, removing repetitive write at 25 because it is the same as at 24: inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("main"), in block from 49..=62, removing repetitive write at 55 because it is the same as at 50: inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 
# In IlFunctionId("main"), in block from 49..=62, removing repetitive write at 56 because it is the same as at 55: inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 
# In IlFunctionId("main"), optimizing round #17
# In IlFunctionId("main"), at #22, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_s with inline_main_getchar_8_inline_getchar_queue_pop_5_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_push_7_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) -> inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7)
# In IlFunctionId("main"), at #17, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_s with inline_main_getchar_8_inline_getchar_queue_pop_5_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_main_getchar_8_inline_getchar_queue_push_7_s <- 0n987392/0x000f1100u32  -> inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32 
# In IlFunctionId("main"), at #20, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] U8 -> inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8
# In IlFunctionId("main"), at #24, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] U8 -> inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8
# In IlFunctionId("main"), at #26, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8 -> mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8
# In IlFunctionId("main"), at #19, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32  -> inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("main"), at #9, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' -> if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'
# In IlFunctionId("main"), at #14, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_te3c4 != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' -> if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'
# In IlFunctionId("main"), at #33, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_teb6e != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' -> if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3'
# In IlFunctionId("main"), at #8, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #13, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #32, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #70, replacing reference to inline_main_putc_1_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_1_t76c7 != inline_main_putc_1_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' -> if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0'
# In IlFunctionId("main"), at #69, replacing reference to inline_main_putc_1_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_1_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #3, replacing reference to ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_1' else 'function_end_main' -> if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main'
# In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #18
# In IlFunctionId("main"), optimizing round #19
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_4_s`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_4_t4d4f`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_stdio_init_queue_init_4_tb702`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_stdio_init_queue_init_4_tc1ff`.
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_4_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_t4d4f <- inline_stdio_init_queue_init_4_s U32` with constant `inline_stdio_init_queue_init_4_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_tb702 <- inline_stdio_init_queue_init_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_4_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_t4d4f <- inline_stdio_init_queue_init_4_s U32` with constant `inline_stdio_init_queue_init_4_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_tc1ff <- inline_stdio_init_queue_init_4_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_4_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_4_s` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_4_s <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_4_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_4_s <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("stdio_init"), optimizing round #3
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_4_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_4_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_4_t4d4f <- inline_stdio_init_queue_init_4_s U32` with constant `inline_stdio_init_queue_init_4_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #4
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_4_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_4_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_4_t4d4f <- inline_stdio_init_queue_init_4_s U32` with constant `inline_stdio_init_queue_init_4_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #5
# In IlFunctionId("stdio_init"), optimizing round #6
# In IlFunctionId("stdio_init"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("stdio_init"), optimizing round #7
# In IlFunctionId("stdio_init"), optimizing round #8
# In IlFunctionId("stdio_init"), removing no-op goto instruction #10: goto inline_stdio_init_queue_init_4_function_end_queue_init
# In IlFunctionId("stdio_init"), optimizing round #9
# IlFunctionId("KeyBoard_init")()
# 00: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 01: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 02: mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 03: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# 04: mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# 05: return None # None
# 06: :function_end_KeyBoard_init # None
# 07: Unreachable # None

# IlFunctionId("Keyboard_poll")()
# 00: Some(t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 01: t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 02: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 03: if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 04: :Keyboard_poll_if_true_0_1 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 05: return None # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 06: :Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 07: Some(code) <= call io_read2() # Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# 08: tf68c <- code U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 09: t528d U32 <- tf68c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 10: index <- t528d Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 11: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 12: t379c <- mem[td45b] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 13: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 14: if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 15: :Keyboard_poll_if_true_0_4 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 16: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 17: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 18: t674 <- td18e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 19: t23a <- t4c8b Add Var(t674) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 20: c <- mem[t23a] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 21: goto Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 22: :Keyboard_poll_if_else_0_5 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 23: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 24: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 25: tb62e <- t4c8b Add Var(td18e) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 26: c <- mem[tb62e] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 27: :Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 28: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 29: t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 30: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 31: if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 32: :Keyboard_poll_if_true_0_7 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 33: tac13 <- c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 34: inline_Keyboard_poll_queue_push_6_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 35: inline_Keyboard_poll_queue_push_6_n <- tac13 U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 36: inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 37: inline_Keyboard_poll_queue_push_6_t3ee <- mem[inline_Keyboard_poll_queue_push_6_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 38: inline_Keyboard_poll_queue_push_6_t5bb7 U32 <- inline_Keyboard_poll_queue_push_6_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 39: inline_Keyboard_poll_queue_push_6_t2187 <- inline_Keyboard_poll_queue_push_6_s Add Var(inline_Keyboard_poll_queue_push_6_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 40: mem[inline_Keyboard_poll_queue_push_6_t2187] <- inline_Keyboard_poll_queue_push_6_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 41: inline_Keyboard_poll_queue_push_6_t3ee <- mem[inline_Keyboard_poll_queue_push_6_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 42: inline_Keyboard_poll_queue_push_6_tf3c4 <- inline_Keyboard_poll_queue_push_6_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 43: mem[inline_Keyboard_poll_queue_push_6_tc1ff] <- inline_Keyboard_poll_queue_push_6_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 44: :Keyboard_poll_if_end_6 # None
# 45: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 46: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 47: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 48: te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 49: ted94 <- t4c8b Add Var(te5cf) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 50: t2ca9 <- mem[ted94] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 51: if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 52: :Keyboard_poll_if_true_0_10 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 53: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 54: t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 55: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 56: if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 57: :Keyboard_poll_if_true_0_13 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 58: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 59: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 60: mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 61: goto Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 62: :Keyboard_poll_if_else_0_14 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 63: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 64: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 65: mem[td45b] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 66: :Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 67: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 68: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 69: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 70: t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 71: t6cd9 <- t4c8b Add Var(t5e63) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 72: t7b09 <- mem[t6cd9] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 73: if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 74: :Keyboard_poll_if_true_0_16 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 75: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 76: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 77: mem[tdaa] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 78: goto Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 79: :Keyboard_poll_if_else_0_17 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 80: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 81: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 82: mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 83: :Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 84: return None # None
# 85: :function_end_Keyboard_poll # None
# 86: Unreachable # None

# IlFunctionId("delay")(x,)
# 00: :delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 01: tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 02: t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 03: if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 04: :delay_while_body_1 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 05: tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 06: x <- tad57 Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 07: goto delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 08: :delay_while_end_2 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 09: return None # None
# 10: :function_end_delay # None
# 11: Unreachable # None

# IlFunctionId("io_read2")()
# 00: Unreachable # None
# 01: :function_end_io_read2 # None
# 02: Unreachable # None

# IlFunctionId("io_ready_to_read")()
# 00: Unreachable # None
# 01: :function_end_io_ready_to_read # None
# 02: Unreachable # None

# IlFunctionId("io_write0")(data,)
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_io_write0 # None
# 03: Unreachable # None

# IlFunctionId("io_write1")(data,)
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_io_write1 # None
# 03: Unreachable # None

# IlFunctionId("lcd_draw_char")(i,ch,)
# 00: inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(9,5))
# 01: inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(9,5))
# 02: inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 03: inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 04: inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 05: inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 06: inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 <- const &lcd_row_start # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 07: inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 08: inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 09: inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 10: inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf] U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 11: inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_0_col U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 12: inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 13: pos <- inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 14: :inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical # None
# 15: t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 16: t1730 <- t136d ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 17: t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 18: None <= call io_write1(t2176,) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 19: t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 20: t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 21: None <= call io_write1(t791e,) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 22: t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(19,5))
# 23: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(19,5))
# 24: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 25: t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 26: t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 27: None <= call io_write1(t3e8f,) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 28: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 29: t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 30: tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 31: None <= call io_write1(tb5dc,) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 32: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(23,5))
# 33: return None # None
# 34: :function_end_lcd_draw_char # None
# 35: Unreachable # None

# IlFunctionId("lcd_init")()
# 00: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 01: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 02: mem[t0] <- ta97f U8 # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 03: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(72,5))
# 04: :lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 05: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 06: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 07: if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 08: :lcd_init_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 09: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 10: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 11: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 12: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 13: mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 14: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 15: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 16: goto lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 17: :lcd_init_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 18: t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(78,5))
# 19: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(78,5))
# 20: t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(79,5))
# 21: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(79,5))
# 22: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(80,5))
# 23: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(81,5))
# 24: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(82,5))
# 25: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(83,5))
# 26: t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(85,5))
# 27: None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(85,5))
# 28: t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(86,5))
# 29: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(86,5))
# 30: None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(88,5))
# 31: t477 <- 0n8/0x08u8  # Some('/lutcomp/programs/lib/lcd.j':(89,5))
# 32: None <= call io_write1(t477,) # Some('/lutcomp/programs/lib/lcd.j':(89,5))
# 33: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(90,5))
# 34: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(92,5))
# 35: None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(92,5))
# 36: tec13 <- 0n12/0x0cu8  # Some('/lutcomp/programs/lib/lcd.j':(93,5))
# 37: None <= call io_write1(tec13,) # Some('/lutcomp/programs/lib/lcd.j':(93,5))
# 38: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(94,5))
# 39: None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(96,5))
# 40: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/lcd.j':(97,5))
# 41: None <= call io_write1(ta11a,) # Some('/lutcomp/programs/lib/lcd.j':(97,5))
# 42: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(98,5))
# 43: return None # None
# 44: :function_end_lcd_init # None
# 45: Unreachable # None

# IlFunctionId("lcd_putc")(ch,)
# 00: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 01: t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 02: if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 03: :lcd_putc_if_true_0_1 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 04: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 05: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 06: t78f0 <- t5dda Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 07: tf5a3 <- t78f0 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 08: next <- tf5a3 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 09: :lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 10: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 11: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 12: ta5ff <- next U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 13: if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 14: :lcd_putc_while_body_4 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 15: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 16: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 17: tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 18: t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 19: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 20: mem[t164d] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 21: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 22: tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 23: mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 24: goto lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 25: :lcd_putc_while_end_5 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 26: goto lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 27: :lcd_putc_if_else_0_2 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 28: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 29: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 30: tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 31: t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 32: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 33: mem[t164d] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 34: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 35: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 36: None <= call lcd_draw_char(t5dda,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 37: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 38: tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 39: mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 40: :lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 41: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 42: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 43: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 44: if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 45: :lcd_putc_if_true_0_7 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 46: None <= call lcd_scroll_up() # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 47: :lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 48: return None # None
# 49: :function_end_lcd_putc # None
# 50: Unreachable # None

# IlFunctionId("lcd_scroll_up")()
# 00: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 01: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 02: t81b5 <- t5dda Subtract Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 03: mem[t0] <- t81b5 U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 04: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(29,5))
# 05: :lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 06: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 07: t9586 <- 0n60/0x3cu8  # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 08: if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 09: :lcd_scroll_up_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 10: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 11: tfd89 <- td0f3 Add Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 12: t760c U32 <- tfd89 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 13: t54b2 <- t760c Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 14: ch <- mem[t54b2] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 15: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 16: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 17: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 18: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 19: ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 20: if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 21: :lcd_scroll_up_if_true_0_4 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 22: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 23: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 24: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 25: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 26: mem[t9e70] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 27: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 28: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 29: None <= call lcd_draw_char(td0f3,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 30: :lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 31: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 32: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 33: goto lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 34: :lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 35: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 36: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 37: if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 38: :lcd_scroll_up_while_body_7 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 39: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 40: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 41: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 42: ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 43: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 44: if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 45: :lcd_scroll_up_if_true_0_10 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 46: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 47: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 48: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 49: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 50: mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 51: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 52: None <= call lcd_draw_char(td0f3,tdf3b,) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 53: :lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 54: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 55: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 56: goto lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 57: :lcd_scroll_up_while_end_8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 58: return None # None
# 59: :function_end_lcd_scroll_up # None
# 60: Unreachable # None

# IlFunctionId("main")()
# 00: None <= call stdio_init() # Some('programs/test/keyboard_poll.j':(4,5))
# 01: :main_while_predicate_0 # Some('programs/test/keyboard_poll.j':(6,5))
# 02: inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  # Some('programs/test/keyboard_poll.j':(6,5))
# 03: if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main' # Some('programs/test/keyboard_poll.j':(6,5))
# 04: :main_while_body_1 # Some('programs/test/keyboard_poll.j':(6,5))
# 05: inline_main_getchar_8_ch <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(19,5))
# 06: :inline_main_getchar_8_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 07: inline_main_getchar_8_tdcd9 <- inline_main_getchar_8_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 08: inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 09: if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 10: :inline_main_getchar_8_getchar_while_body_1 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 11: Some(inline_main_getchar_8_t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 12: inline_main_getchar_8_te3c4 <- inline_main_getchar_8_t861f BitwiseAnd Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 13: inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 14: if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 15: :inline_main_getchar_8_getchar_if_true_0_4 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 16: inline_main_getchar_8_tb816 <- ttyin # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 17: inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 18: inline_main_getchar_8_inline_getchar_queue_push_7_n <- inline_main_getchar_8_tb816 U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 19: inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 20: inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 21: inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7 U32 <- inline_main_getchar_8_inline_getchar_queue_push_7_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 22: inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 23: mem[inline_main_getchar_8_inline_getchar_queue_push_7_t2187] <- inline_main_getchar_8_inline_getchar_queue_push_7_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 24: inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 25: inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 <- inline_main_getchar_8_inline_getchar_queue_push_7_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 26: mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 27: :inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push # None
# 28: goto inline_main_getchar_8_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 29: :inline_main_getchar_8_getchar_if_else_0_5 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 30: inline_main_getchar_8_t0 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 31: inline_main_getchar_8_teb6e <- mem[inline_main_getchar_8_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 32: inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 33: if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 34: :inline_main_getchar_8_getchar_if_true_1_6 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 35: None <= call Keyboard_poll() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 36: :inline_main_getchar_8_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 37: inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 38: inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 39: inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 40: inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 41: inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 42: if inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd == inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 43: :inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 44: inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 45: inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 46: goto inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 47: :inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 48: inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 49: inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 50: inline_main_getchar_8_inline_getchar_queue_pop_5_tb469 U32 <- inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 51: inline_main_getchar_8_inline_getchar_queue_pop_5_tae11 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_pop_5_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 52: inline_main_getchar_8_inline_getchar_queue_pop_5_value <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 53: inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 54: inline_main_getchar_8_inline_getchar_queue_pop_5_te468 <- inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 55: mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] <- inline_main_getchar_8_inline_getchar_queue_pop_5_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 56: inline_main_getchar_8_inline_getchar_queue_pop_5_t44ed <- inline_main_getchar_8_inline_getchar_queue_pop_5_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 57: inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 58: :inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop # None
# 59: goto inline_main_getchar_8_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 60: :inline_main_getchar_8_getchar_while_end_2 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 61: inline_main_getchar_8_tdcd9 <- inline_main_getchar_8_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
# 62: tbbb3 <- inline_main_getchar_8_tdcd9 U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
# 63: :inline_main_getchar_8_function_end_getchar # None
# 64: inline_main_putc_1_c <- tbbb3 U8 # Some('programs/test/keyboard_poll.j':(6,5))
# 65: inline_main_putc_1_tac13 <- inline_main_putc_1_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 66: None <= call io_write0(inline_main_putc_1_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 67: inline_main_putc_1_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 68: inline_main_putc_1_t76c7 <- mem[inline_main_putc_1_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 69: inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 70: if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 71: :inline_main_putc_1_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 72: inline_main_putc_1_tac13 <- inline_main_putc_1_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 73: None <= call lcd_putc(inline_main_putc_1_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 74: :inline_main_putc_1_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 75: goto main_while_predicate_0 # Some('programs/test/keyboard_poll.j':(6,5))
# 76: :function_end_main # Some('programs/test/keyboard_poll.j':(6,5))
# 77: Unreachable # None

# IlFunctionId("stdio_init")()
# 00: t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 01: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 02: mem[t0] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 03: t1 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
# 04: mem[t1] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(12,5))
# 05: inline_stdio_init_queue_init_4_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 06: inline_stdio_init_queue_init_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 07: mem[inline_stdio_init_queue_init_4_tb702] <- inline_stdio_init_queue_init_4_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 08: inline_stdio_init_queue_init_4_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
# 09: mem[inline_stdio_init_queue_init_4_tc1ff] <- inline_stdio_init_queue_init_4_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
# 10: :inline_stdio_init_queue_init_4_function_end_queue_init # None
# 11: None <= call lcd_init() # Some('/lutcomp/programs/lib/stdio.j':(14,5))
# 12: None <= call KeyBoard_init() # Some('/lutcomp/programs/lib/stdio.j':(15,5))
# 13: return None # None
# 14: :function_end_stdio_init # None
# 15: Unreachable # None


# ImageBaseAddress=0x00090000
# entry
# 90000 Init []
#       Initialzing flags and internal regs.
00 

# 90001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 90007 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 9000d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 00 09 00 

# 90013 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 54 09 09 

# 90017 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 9001d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([16]) Number(0n0/0x00u8)
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987140/0x000f1004u32)
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 90427 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 14 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 9042d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 90430 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 90433 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 14 04 10 0f 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 90439 Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# return None None
# Return { value: None }
# 9043c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 9043e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(U32) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_6_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_6_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35]) Number(0n987392/0x000f1100u32)
# Var inline_Keyboard_poll_queue_push_6_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_6_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([36])
# Var inline_Keyboard_poll_queue_push_6_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_6_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987652/0x000f1204u32)
# Var inline_Keyboard_poll_queue_push_6_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([24])
# Var t23a (t23a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }) Reg(U32) Some([48, 49, 50, 51])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) Reg(U32) Some([28, 29, 30, 31])
# Var t5ea1 (t5ea1 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))) Reg(U8) Some([24])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([52])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([24]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([36]) Number(0n0/0x00u8)
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb62e (tb62e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([48, 49, 50, 51])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987140/0x000f1004u32)
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 90443 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 

# t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# 90445 AndImm8 [Register(0x18), Constant8(0x04=4)]
#       t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
18 18 04 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 90448 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# 9044b Cmp8 [Register(0x18), Register(0x24)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
15 18 24 

# 9044e JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
72 56 04 09 

# 90452 JmpImm [Label24(Keyboard_poll_if_end_0)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
70 58 04 09 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 90456 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 90458 In2 [Register(0x18)]
#       IoRead2
62 18 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\")) }\nArithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# 9045a LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
20 30 00 00 00 00 

# 90460 Copy8 [Register(0x18), Register(0x30)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
0b 18 30 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# 90463 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
20 00 04 00 00 00 

# 90469 Mul8_16 [Register(0x30), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
11 30 00 1c 

# 9046d LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1e 00 

# 90470 LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1f 00 

# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 90473 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# 90479 Load8 [Register(0x20), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
05 20 18 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 9047c LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# 9047f Cmp8 [Register(0x18), Register(0x24)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
15 18 24 

# 90482 JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
72 a2 04 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 90486 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 09 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# 9048c Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
21 1c 20 

# 9048f AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 90495 ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
03 

# 90496 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
30 30 20 30 

# 9049a AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 9049b Load8 [Register(0x30), Register(0x18)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
05 30 18 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 9049e JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 b1 04 09 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 904a2 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 09 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 904a8 ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 904a9 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 30 1c 30 

# 904ad AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 904ae Load8 [Register(0x30), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 30 18 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 904b1 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 904b7 Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 904ba LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 904bd Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 904c0 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 c8 04 09 

# 904c4 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
70 f6 04 09 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_6_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_6_s <- 0n987392/0x000f1100u32 `.
# 904c8 LoadImm32 [Register(0x20), Constant32(0x000f1100=987392)]
#       inline_Keyboard_poll_queue_push_6_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_6_s <- 0n987392/0x000f1100u32 `.
20 20 00 11 0f 00 

# inline_Keyboard_poll_queue_push_6_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_6_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_tc1ff <- inline_Keyboard_poll_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32 `.
# 904ce LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_6_tc1ff <- inline_Keyboard_poll_queue_push_6_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_6_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_6_t3ee <- mem[inline_Keyboard_poll_queue_push_6_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 904d4 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_6_t3ee <- mem[inline_Keyboard_poll_queue_push_6_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_6_t5bb7 U32 <- inline_Keyboard_poll_queue_push_6_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 904d7 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_6_t5bb7 U32 <- inline_Keyboard_poll_queue_push_6_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 28 00 00 00 00 

# 904dd Copy8 [Register(0x24), Register(0x28)]
#       inline_Keyboard_poll_queue_push_6_t5bb7 U32 <- inline_Keyboard_poll_queue_push_6_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 24 28 

# inline_Keyboard_poll_queue_push_6_t2187 <- inline_Keyboard_poll_queue_push_6_s Add Var(inline_Keyboard_poll_queue_push_6_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 904e0 ClearCarry []
#       inline_Keyboard_poll_queue_push_6_t2187 <- inline_Keyboard_poll_queue_push_6_s Add Var(inline_Keyboard_poll_queue_push_6_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 904e1 AddCarry32_1 [Register(0x20), Register(0x28), Register(0x20)]
#       inline_Keyboard_poll_queue_push_6_t2187 <- inline_Keyboard_poll_queue_push_6_s Add Var(inline_Keyboard_poll_queue_push_6_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 20 28 20 

# 904e5 AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_6_t2187 <- inline_Keyboard_poll_queue_push_6_s Add Var(inline_Keyboard_poll_queue_push_6_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_Keyboard_poll_queue_push_6_t2187] <- inline_Keyboard_poll_queue_push_6_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 904e6 Store8 [Register(0x18), Register(0x20)]
#       mem[inline_Keyboard_poll_queue_push_6_t2187] <- inline_Keyboard_poll_queue_push_6_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 20 

# inline_Keyboard_poll_queue_push_6_t3ee <- mem[inline_Keyboard_poll_queue_push_6_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 904e9 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_6_t3ee <- mem[inline_Keyboard_poll_queue_push_6_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_6_tf3c4 <- inline_Keyboard_poll_queue_push_6_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 904ec LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_6_tf3c4 <- inline_Keyboard_poll_queue_push_6_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 904ef Add8NoCarryIn [Register(0x24), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_6_tf3c4 <- inline_Keyboard_poll_queue_push_6_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 24 00 18 

# mem[inline_Keyboard_poll_queue_push_6_tc1ff] <- inline_Keyboard_poll_queue_push_6_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 904f3 Store8 [Register(0x18), Register(0x2c)]
#       mem[inline_Keyboard_poll_queue_push_6_tc1ff] <- inline_Keyboard_poll_queue_push_6_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 18 2c 

# :Keyboard_poll_if_end_6 None
# Keyboard_poll_if_end_6
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Number(0n0/0x00u8)
# 904f6 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 904f9 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 09 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# 904ff Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
21 1c 20 

# 90502 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 90508 ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
03 

# 90509 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
30 30 20 30 

# 9050d AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 9050e Load8 [Register(0x30), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
05 30 18 

# if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# 90511 Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
15 24 18 

# 90514 JzImm [Label24(Keyboard_poll_if_end_9)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
72 47 05 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 90518 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 9051e Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 90521 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 90524 Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 90527 JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 3b 05 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 9052b LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 90531 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 90534 Store8 [Register(0x24), Register(0x20)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 90537 JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 47 05 09 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 9053b LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 90541 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# 90544 Store8 [Register(0x18), Register(0x20)]
#       mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Number(0n0/0x00u8)
# 90547 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 9054a LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 09 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# 90550 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
32 1c 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 90556 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
03 

# 90557 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
30 30 1c 30 

# 9055b AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 9055c Load8 [Register(0x30), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
05 30 18 

# if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# 9055f Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
15 24 18 

# 90562 JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
72 76 05 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 90566 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 9056c LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# 9056f Store8 [Register(0x18), Register(0x20)]
#       mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 90572 JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 82 05 09 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 90576 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 9057c LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 9057f Store8 [Register(0x24), Register(0x20)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 90582 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 90584 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([56, 57, 58, 59]) Number(0n0/0x00000000u32)
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([60, 61, 62, 63])
# Var x (Arg0 x Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# 90589 Copy32 [Register(0x00), Register(0x3c)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [60, 61, 62, 63].
21 00 3c 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 9058c LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 38 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# 90592 Cmp8 [Register(0x3f), Register(0x3b)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
15 3f 3b 

# 90595 Cmp8IfZero [Register(0x3e), Register(0x3a)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 3e 3a 

# 90598 Cmp8IfZero [Register(0x3d), Register(0x39)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 3d 39 

# 9059b Cmp8IfZero [Register(0x3c), Register(0x38)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 3c 38 

# 9059e JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
72 ac 05 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }\nArithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# 905a2 AddImm32IgnoreCarry [Register(0x3c), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
32 3c ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 905a8 JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 8c 05 09 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 905ac JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 905ae Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([66])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([67])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([68])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([67])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([68])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf (t9eaf Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_td007 (td007 Ident("row")) Reg(U8) Some([68])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 (td0f3 Ident("i")) Reg(U8) Some([67])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 (tf14 Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) Reg(U8) Some([80])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9 (tfee9 Ident("col")) Reg(U8) Some([67])
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([67])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([67])
# Var t1730 (t1730 Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))) Reg(U8) Some([68])
# Var t2176 (t2176 Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))) Reg(U8) Some([68])
# Var t3e8f (t3e8f Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))) Reg(U8) Some([67])
# Var t4028 (t4028 Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))) Reg(U8) Some([67])
# Var t6611 (t6611 Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))) Reg(U8) Some([66])
# Var t791e (t791e Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))) Reg(U8) Some([67])
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([72, 73, 74, 75]) Number(0n2/0x00000002u32)
# Var tb5dc (tb5dc Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))) Reg(U8) Some([66])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([66])
# 905b3 Copy8 [Register(0x00), Register(0x43)]
#       Save function parameter 'i' registers [0] to locals [67].
0b 00 43 

# 905b6 Copy8 [Register(0x04), Register(0x42)]
#       Save function parameter 'ch' registers [4] to locals [66].
0b 04 42 

# inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))\nAssign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# 905b9 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 905bc Divide8 [Register(0x43), Register(0x00), Register(0x44)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
17 43 00 44 

# inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nArithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# 905c0 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
04 00 14 

# 905c3 Mul8_8 [Register(0x44), Register(0x00), Register(0x50)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
10 44 00 50 

# inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# 905c7 Copy8 [Register(0x50), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
0b 50 00 

# 905ca Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
02 00 

# 905cc Add8NoCarryIn [Register(0x43), Register(0x00), Register(0x43)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
14 43 00 43 

# inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 905d0 LoadImm32 [Register(0x4c), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 4c 23 04 09 00 

# inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# 905d6 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
20 48 00 00 00 00 

# 905dc Copy8 [Register(0x44), Register(0x48)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
0b 44 48 

# inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# 905df ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
03 

# 905e0 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x48)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
30 4c 48 48 

# 905e4 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_0_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 905e5 Load8 [Register(0x48), Register(0x44)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_0_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 48 44 

# inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_0_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_0_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 905e8 Add8NoCarryIn [Register(0x44), Register(0x43), Register(0x43)]
#       inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_0_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 44 43 43 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_0_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# 905ec LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
04 00 04 

# 905ef Shift8 [Constant8(0x05=5), Register(0x00), Register(0x43), Register(0x44)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
1e 05 00 43 44 

# t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# 905f4 OrImm8 [Register(0x44), Constant8(0x08=8)]
#       t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
19 44 08 

# None <= call io_write1(t2176,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# 905f7 Out1 [Register(0x44)]
#       IoWrite1
69 44 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] })\nArithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0x43), Register(0x43)], resolved: None }
# t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# 905f9 AndImm8 [Register(0x43), Constant8(0x0f=15)]
#       t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
#       Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
18 43 0f 

# None <= call io_write1(t791e,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# 905fc Out1 [Register(0x43)]
#       IoWrite1
69 43 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 905fe LoadImm32 [Register(0x48), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 48 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 90604 Copy32 [Register(0x48), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 48 00 

# Registers used by this function: {66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 90607 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 9060d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 17 06 09 00 

# 90613 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 90617 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x42), Register(0x42)], resolved: None }
# t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# 9061d LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
04 00 04 

# 90620 Shift8 [Constant8(0x05=5), Register(0x00), Register(0x42), Register(0x43)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
1e 05 00 42 43 

# t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# 90625 OrImm8 [Register(0x43), Constant8(0x80=128)]
#       t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
19 43 80 

# None <= call io_write1(t3e8f,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# 90628 Out1 [Register(0x43)]
#       IoWrite1
69 43 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))\nArithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x42), Register(0x42)], resolved: None }
# t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# 9062a AndImm8 [Register(0x42), Constant8(0x0f=15)]
#       t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
#       Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
18 42 0f 

# tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# 9062d OrImm8 [Register(0x42), Constant8(0x80=128)]
#       tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
19 42 80 

# None <= call io_write1(tb5dc,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# 90630 Out1 [Register(0x42)]
#       IoWrite1
69 42 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 90632 Copy32 [Register(0x48), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 48 00 

# Registers used by this function: {66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 90635 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 9063b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 45 06 09 00 

# 90641 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 90645 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 9064b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 9064d Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([81])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([84, 85, 86, 87]) Number(0n987145/0x000f1009u32)
# Var t385d (t385d Number(0n1/0x00000001u32)) Reg(U32) Some([84, 85, 86, 87]) Number(0n1/0x00000001u32)
# Var t3d69 (t3d69 Number(0n3/0x03u8)) Reg(U8) Some([88]) Number(0n3/0x03u8)
# Var t477 (t477 Number(0n8/0x08u8)) Reg(U8) Some([81]) Number(0n8/0x08u8)
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([92, 93, 94, 95]) Number(0n2/0x00000002u32)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([92, 93, 94, 95])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([92, 93, 94, 95])
# Var t9f48 (t9f48 Number(0n2/0x02u8)) Reg(U8) Some([81]) Number(0n2/0x02u8)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([81]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([96]) Number(0n0/0x00u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([81])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([88]) Number(0n80/0x50u8)
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([96]) Number(0n32/0x20u8)
# Var tec13 (tec13 Number(0n12/0x0cu8)) Reg(U8) Some([81]) Number(0n12/0x0cu8)
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 90652 LoadImm32 [Register(0x54), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
20 54 09 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 90658 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 60 00 

# mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 9065b Store8 [Register(0x60), Register(0x54)]
#       mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
06 60 54 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 9065e LoadImm8 [Register(0x51), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 51 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 90661 LoadImm8 [Register(0x58), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 58 50 

# if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 90664 Cmp8 [Register(0x58), Register(0x51)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 58 51 

# 90667 JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 8b 06 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 9066b LoadImm32 [Register(0x5c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 5c 00 00 00 00 

# 90671 Copy8 [Register(0x51), Register(0x5c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 51 5c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 90674 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 5c 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 9067a LoadImm8 [Register(0x60), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 60 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 9067d Store8 [Register(0x60), Register(0x5c)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 60 5c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x51), Register(0x51)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 90680 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 90683 Add8NoCarryIn [Register(0x51), Register(0x00), Register(0x51)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 51 00 51 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 90687 JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
70 61 06 09 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# lcd_init_while_end_2
# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 9068b LoadImm8 [Register(0x58), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 58 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 9068e Out1 [Register(0x58)]
#       IoWrite1
69 58 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 90690 LoadImm32 [Register(0x54), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 54 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 90696 Copy32 [Register(0x54), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 54 00 

# Registers used by this function: {81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 90699 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 9069f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c a9 06 09 00 

# 906a5 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 906a9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 906af Out1 [Register(0x58)]
#       IoWrite1
69 58 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 906b1 Copy32 [Register(0x54), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 54 00 

# Registers used by this function: {81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 906b4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 906ba StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c c4 06 09 00 

# 906c0 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 906c4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 906ca Out1 [Register(0x58)]
#       IoWrite1
69 58 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 906cc Copy32 [Register(0x54), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 54 00 

# Registers used by this function: {81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 906cf AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 906d5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c df 06 09 00 

# 906db JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 906df AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 906e5 LoadImm8 [Register(0x51), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 51 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 906e8 Out1 [Register(0x51)]
#       IoWrite1
69 51 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 906ea LoadImm32 [Register(0x5c), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 5c 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 906f0 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 5c 00 

# Registers used by this function: {81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 906f3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 906f9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 03 07 09 00 

# 906ff JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 90703 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 90709 Out1 [Register(0x51)]
#       IoWrite1
69 51 

# t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# Number(0n8/0x08u8)
# 9070b LoadImm8 [Register(0x51), Constant8(0x08=8)]
#       t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
#       Number(0n8/0x08u8)
04 51 08 

# None <= call io_write1(t477,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# 9070e Out1 [Register(0x51)]
#       IoWrite1
69 51 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 90710 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 5c 00 

# Registers used by this function: {81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 90713 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 90719 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 23 07 09 00 

# 9071f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 90723 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 90729 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 60 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 9072c Out1 [Register(0x60)]
#       IoWrite1
69 60 

# tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# Number(0n12/0x0cu8)
# 9072e LoadImm8 [Register(0x51), Constant8(0x0c=12)]
#       tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
#       Number(0n12/0x0cu8)
04 51 0c 

# None <= call io_write1(tec13,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# 90731 Out1 [Register(0x51)]
#       IoWrite1
69 51 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 90733 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 5c 00 

# Registers used by this function: {81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 90736 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 9073c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 46 07 09 00 

# 90742 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 90746 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 9074c Out1 [Register(0x60)]
#       IoWrite1
69 60 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# Number(0n1/0x01u8)
# 9074e LoadImm8 [Register(0x51), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
#       Number(0n1/0x01u8)
04 51 01 

# None <= call io_write1(ta11a,) Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# 90751 Out1 [Register(0x51)]
#       IoWrite1
69 51 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 90753 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 5c 00 

# Registers used by this function: {81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63}
# Registers to save: []
# 90756 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 9075c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 66 07 09 00 

# 90762 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 89 05 09 

# 90766 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 9076c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 9076e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([97])
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([97])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([100, 101, 102, 103]) Number(0n987145/0x000f1009u32)
# Var t164d (t164d Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }) Reg(U32) Some([104, 105, 106, 107])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([108]) Number(0n10/0x0au8)
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([109])
# Var t78f0 (t78f0 Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([97])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([97])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) Reg(U32) Some([104, 105, 106, 107])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([97]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([97])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([110]) Number(0n32/0x20u8)
# Var tefac (tefac Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))) Reg(U8) Some([109])
# Var tf5a3 (tf5a3 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))) Reg(U8) Some([97])
# 90773 Copy8 [Register(0x00), Register(0x61)]
#       Save function parameter 'ch' registers [0] to locals [97].
0b 00 61 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x61), Register(0x61)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 90776 LoadImm8 [Register(0x6c), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 6c 0a 

# if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 90779 Cmp8 [Register(0x61), Register(0x6c)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 61 6c 

# 9077c JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 84 07 09 

# 90780 JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 e5 07 09 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 90784 LoadImm32 [Register(0x64), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 64 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 9078a Load8 [Register(0x64), Register(0x6d)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 64 6d 

# t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# 9078d LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 14 

# 90790 Divide8 [Register(0x6d), Register(0x00), Register(0x61)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
17 6d 00 61 

# tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# 90794 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
04 00 01 

# 90797 Add8NoCarryIn [Register(0x61), Register(0x00), Register(0x61)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
14 61 00 61 

# next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# 9079b LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
04 00 14 

# 9079e Mul8_8 [Register(0x61), Register(0x00), Register(0x61)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
10 61 00 61 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_predicate_3
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 907a2 LoadImm32 [Register(0x64), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 64 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 907a8 Load8 [Register(0x64), Register(0x6d)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 64 6d 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0x61), Register(0x61)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 907ab Cmp8 [Register(0x61), Register(0x6d)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 61 6d 

# 907ae JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 e1 07 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_body_4
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 907b2 LoadImm32 [Register(0x64), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 64 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# 907b8 Load8 [Register(0x64), Register(0x6d)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
05 64 6d 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 907bb LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 68 00 00 00 00 

# 907c1 Copy8 [Register(0x6d), Register(0x68)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 6d 68 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 907c4 AddImm32IgnoreCarry [Register(0x68), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 68 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 907ca LoadImm8 [Register(0x6e), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 6e 20 

# mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# 907cd Store8 [Register(0x6e), Register(0x68)]
#       mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
06 6e 68 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# 907d0 Load8 [Register(0x64), Register(0x6d)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
05 64 6d 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 907d3 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 907d6 Add8NoCarryIn [Register(0x6d), Register(0x00), Register(0x6d)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 6d 00 6d 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# 907da Store8 [Register(0x6d), Register(0x64)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
06 6d 64 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 907dd JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 a2 07 09 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 907e1 JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 2c 08 09 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_else_0_2
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 907e5 LoadImm32 [Register(0x64), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 64 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# 907eb Load8 [Register(0x64), Register(0x6d)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
05 64 6d 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 907ee LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 68 00 00 00 00 

# 907f4 Copy8 [Register(0x6d), Register(0x68)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 6d 68 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 907f7 AddImm32IgnoreCarry [Register(0x68), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 68 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x61), Register(0x61)], resolved: None }
# mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 907fd Store8 [Register(0x61), Register(0x68)]
#       mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 61 68 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# 90800 Load8 [Register(0x64), Register(0x6d)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
05 64 6d 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x61), Register(0x61)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 90803 Copy8 [Register(0x6d), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 6d 00 

# 90806 Copy8 [Register(0x61), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 61 04 

# Registers used by this function: {97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers to save: []
# 90809 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 9080f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 19 08 09 00 

# 90815 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 b3 05 09 

# 90819 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# 9081f Load8 [Register(0x64), Register(0x6d)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
05 64 6d 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 90822 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 90825 Add8NoCarryIn [Register(0x6d), Register(0x00), Register(0x6d)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 6d 00 6d 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# 90829 Store8 [Register(0x6d), Register(0x64)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
06 6d 64 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_end_0
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 9082c LoadImm32 [Register(0x64), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 64 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# 90832 Load8 [Register(0x64), Register(0x6d)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
05 64 6d 

# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 90835 LoadImm8 [Register(0x61), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 61 50 

# if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# 90838 Cmp8 [Register(0x61), Register(0x6d)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
15 61 6d 

# 9083b JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
71 43 08 09 

# 9083f JmpImm [Label24(lcd_putc_if_end_6)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
70 59 08 09 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(63,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 111, 112, 116, 117, 118, 119, 120, 121, 122, 123, 124}
# Registers to save: []
# 90843 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 90849 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c 53 08 09 00 

# 9084f JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 60 08 09 

# 90853 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 90859 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 9085b Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([111])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([116, 117, 118, 119]) Number(0n987145/0x000f1009u32)
# Var t54b2 (t54b2 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }) Reg(U32) Some([116, 117, 118, 119])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([112])
# Var t760c (t760c Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) Reg(U32) Some([116, 117, 118, 119])
# Var t81b5 (t81b5 Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([112])
# Var t9586 (t9586 Number(0n60/0x3cu8)) Reg(U8) Some([111]) Number(0n60/0x3cu8)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([120, 121, 122, 123])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([120, 121, 122, 123])
# Var ta094 (ta094 Index("lcd_display", Ident("i"))) Reg(U8) Some([124])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([112])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([111]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([111])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([111]) Number(0n32/0x20u8)
# Var tfd89 (tfd89 Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) Reg(U8) Some([111])
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 90860 LoadImm32 [Register(0x74), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
20 74 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 90866 Load8 [Register(0x74), Register(0x70)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 74 70 

# t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# 90869 LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 ec 

# 9086c Add8NoCarryIn [Register(0x70), Register(0x00), Register(0x70)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
14 70 00 70 

# mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 90870 Store8 [Register(0x70), Register(0x74)]
#       mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
06 70 74 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 90873 LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 70 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Number(0n60/0x3cu8)
# 90876 LoadImm8 [Register(0x6f), Constant8(0x3c=60)]
#       t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
#       Number(0n60/0x3cu8)
04 6f 3c 

# if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# 90879 Cmp8 [Register(0x6f), Register(0x70)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
15 6f 70 

# 9087c JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
71 eb 08 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# 90880 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 90883 Add8NoCarryIn [Register(0x70), Register(0x00), Register(0x6f)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
14 70 00 6f 

# t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# 90887 LoadImm32 [Register(0x74), Constant32(0x00000000=0)]
#       Zero-pad for t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
20 74 00 00 00 00 

# 9088d Copy8 [Register(0x6f), Register(0x74)]
#       t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
0b 6f 74 

# t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# 90890 AddImm32IgnoreCarry [Register(0x74), Constant32(0x000f100c=987148)]
#       t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
32 74 0c 10 0f 00 

# ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# 90896 Load8 [Register(0x74), Register(0x6f)]
#       ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
05 74 6f 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x6f), Register(0x6f)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 90899 LoadImm32 [Register(0x78), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 78 00 00 00 00 

# 9089f Copy8 [Register(0x70), Register(0x78)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 70 78 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 908a2 AddImm32IgnoreCarry [Register(0x78), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 78 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# 908a8 Load8 [Register(0x78), Register(0x7c)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
05 78 7c 

# if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# 908ab Cmp8 [Register(0x6f), Register(0x7c)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
15 6f 7c 

# 908ae JzImm [Label24(lcd_scroll_up_if_end_3)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
72 e0 08 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_4)], resolved: None }
# :lcd_scroll_up_if_true_0_4 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 908b2 LoadImm32 [Register(0x78), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 78 00 00 00 00 

# 908b8 Copy8 [Register(0x70), Register(0x78)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 70 78 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 908bb AddImm32IgnoreCarry [Register(0x78), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 78 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x6f), Register(0x6f)], resolved: None }
# mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 908c1 Store8 [Register(0x6f), Register(0x78)]
#       mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 6f 78 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x6f), Register(0x6f)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 908c4 Copy8 [Register(0x70), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 70 00 

# 908c7 Copy8 [Register(0x6f), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 6f 04 

# Registers used by this function: {111, 112, 116, 117, 118, 119, 120, 121, 122, 123, 124}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers to save: []
# 908ca AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 908d0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c da 08 09 00 

# 908d6 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 b3 05 09 

# 908da AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# :lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_end_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 908e0 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 908e3 Add8NoCarryIn [Register(0x70), Register(0x00), Register(0x70)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 70 00 70 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 908e7 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 76 08 09 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 908eb LoadImm8 [Register(0x6f), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 6f 50 

# if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 908ee Cmp8 [Register(0x6f), Register(0x70)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 6f 70 

# 908f1 JcImm [Label24(lcd_scroll_up_while_end_8)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 4d 09 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_7)], resolved: None }
# :lcd_scroll_up_while_body_7 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_7
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 908f5 LoadImm32 [Register(0x78), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 78 00 00 00 00 

# 908fb Copy8 [Register(0x70), Register(0x78)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 70 78 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 908fe AddImm32IgnoreCarry [Register(0x78), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 78 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# 90904 Load8 [Register(0x78), Register(0x7c)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
05 78 7c 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 90907 LoadImm8 [Register(0x6f), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 6f 20 

# if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# 9090a Cmp8 [Register(0x7c), Register(0x6f)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
15 7c 6f 

# 9090d JzImm [Label24(lcd_scroll_up_if_end_9)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
72 42 09 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_10)], resolved: None }
# :lcd_scroll_up_if_true_0_10 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_10
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 90911 LoadImm32 [Register(0x78), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 78 00 00 00 00 

# 90917 Copy8 [Register(0x70), Register(0x78)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 70 78 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 9091a AddImm32IgnoreCarry [Register(0x78), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 78 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 90920 LoadImm8 [Register(0x6f), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 6f 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 90923 Store8 [Register(0x6f), Register(0x78)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 6f 78 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# 90926 Copy8 [Register(0x70), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 70 00 

# 90929 Copy8 [Register(0x6f), Register(0x04)]
#       Arg1[ch]=tdf3b None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 6f 04 

# Registers used by this function: {111, 112, 116, 117, 118, 119, 120, 121, 122, 123, 124}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80}
# Registers to save: []
# 9092c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 90932 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 3c 09 09 00 

# 90938 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 b3 05 09 

# 9093c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# :lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_end_9
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 90942 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 90945 Add8NoCarryIn [Register(0x70), Register(0x00), Register(0x70)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 70 00 70 

# goto lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 90949 JmpImm [Label24(lcd_scroll_up_while_end_2)]
#       goto lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 eb 08 09 

# :lcd_scroll_up_while_end_8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_while_end_8
# return None None
# Return { value: None }
# 9094d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 9094f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var inline_main_getchar_8_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([125])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([128, 129, 130, 131]) Number(0n987392/0x000f1100u32)
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([132])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t44ed (t44ed Ident("value")) Reg(U8) Some([125])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([132]) Number(0n0/0x00u8)
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([140])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([144, 145, 146, 147]) Number(0n987648/0x000f1200u32)
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([136, 137, 138, 139]) Number(0n987652/0x000f1204u32)
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([125])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([132])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_n (Arg1 n Number(U8)) Reg(U8) Some([140])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([148])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([144, 145, 146, 147])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([125])
# Var inline_main_getchar_8_t0 (static "keyboard_enable" addr) Reg(U32) Some([128, 129, 130, 131]) Number(0n987144/0x000f1008u32)
# Var inline_main_getchar_8_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([125])
# Var inline_main_getchar_8_tb816 (tb816 TtyIn) Reg(U8) Some([132])
# Var inline_main_getchar_8_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([125])
# Var inline_main_getchar_8_te3c4 (te3c4 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))) Reg(U8) Some([125])
# Var inline_main_getchar_8_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([125])
# Var inline_main_putc_1_c (Arg0 c Number(U8)) Reg(U8) Some([125])
# Var inline_main_putc_1_t0 (static "lcd_enable" addr) Reg(U32) Some([136, 137, 138, 139]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_1_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([140])
# Var inline_main_putc_1_tac13 (tac13 Ident("c")) Reg(U8) Some([125])
# Var tbbb3 (tbbb3 Call(Call { function: "getchar", parameters: [] })) Reg(U8) Some([125])
# None <= call stdio_init() Some('programs/test/keyboard_poll.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {125, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148}
# Registers used by callee tree: {16, 20, 21, 22, 23, 56, 57, 58, 59, 60, 61, 62, 63, 65, 81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160}
# Registers to save: []
# 90954 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 9095a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c 64 09 09 00 

# 90960 JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 8b 0a 09 

# 90964 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# :main_while_predicate_0 Some('programs/test/keyboard_poll.j':(6,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }] }
# main_while_predicate_0
# inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_poll.j':(6,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# 9096a LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('programs/test/keyboard_poll.j':(6,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #2, replacing reference to ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
04 84 00 

# if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main' Some('programs/test/keyboard_poll.j':(6,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #3, replacing reference to ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_1' else 'function_end_main' -> if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main'
# 9096d Cmp8 [Register(0x84), Register(0x84)]
#       if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main' Some('programs/test/keyboard_poll.j':(6,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #3, replacing reference to ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_1' else 'function_end_main' -> if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main'
15 84 84 

# 90970 JzImm [Label24(main_while_body_1)]
#       if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main' Some('programs/test/keyboard_poll.j':(6,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #3, replacing reference to ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_1' else 'function_end_main' -> if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main'
72 78 09 09 

# 90974 JmpImm [Label24(function_end_main)]
#       if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main' Some('programs/test/keyboard_poll.j':(6,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #3, replacing reference to ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'main_while_body_1' else 'function_end_main' -> if inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'main_while_body_1' else 'function_end_main'
70 86 0a 09 

# :main_while_body_1 Some('programs/test/keyboard_poll.j':(6,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }] }
# main_while_body_1
# inline_main_getchar_8_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 90978 LoadImm8 [Register(0x7d), Constant8(0x00=0)]
#       inline_main_getchar_8_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 7d 00 

# :inline_main_getchar_8_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_main_getchar_8_getchar_while_predicate_0
# inline_main_getchar_8_tdcd9 <- inline_main_getchar_8_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getchar_8_tdcd9 <- inline_main_getchar_8_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x7d), Register(0x7d)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #8, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# 9097b LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #8, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
04 84 00 

# if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #9, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' -> if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'
# 9097e Cmp8 [Register(0x7d), Register(0x84)]
#       if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #9, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' -> if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'
15 7d 84 

# 90981 JzImm [Label24(inline_main_getchar_8_getchar_while_body_1)]
#       if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #9, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' -> if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'
72 89 09 09 

# 90985 JmpImm [Label24(inline_main_getchar_8_getchar_while_end_2)]
#       if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #9, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2' -> if inline_main_getchar_8_tdcd9 == inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'
70 54 0a 09 

# :inline_main_getchar_8_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_main_getchar_8_getchar_while_body_1
# Some(inline_main_getchar_8_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 90989 IoReadyToRead [Register(0x7d)]
#       ReadyToRead
79 7d 

# inline_main_getchar_8_te3c4 <- inline_main_getchar_8_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# 9098b AndImm8 [Register(0x7d), Constant8(0x01=1)]
#       inline_main_getchar_8_te3c4 <- inline_main_getchar_8_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
18 7d 01 

# inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #13, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# 9098e LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #13, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
04 84 00 

# if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #14, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_te3c4 != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' -> if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'
# 90991 Cmp8 [Register(0x7d), Register(0x84)]
#       if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #14, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_te3c4 != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' -> if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'
15 7d 84 

# 90994 JzImm [Label24(inline_main_getchar_8_getchar_if_else_0_5)]
#       if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #14, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_te3c4 != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' -> if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'
72 cf 09 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #14, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_te3c4 != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5' -> if inline_main_getchar_8_te3c4 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'\n", opcode: JmpImm, args: [Label24(inline_main_getchar_8_getchar_if_true_0_4)], resolved: None }
# :inline_main_getchar_8_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_main_getchar_8_getchar_if_true_0_4
# inline_main_getchar_8_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 90998 In0 [Register(0x84)]
#       inline_main_getchar_8_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 84 

# inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_s <- inline_main_getchar_8_tfff6 U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_s <- 0n987392/0x000f1100u32 `.
# # In IlFunctionId("main"), at #17, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_s with inline_main_getchar_8_inline_getchar_queue_pop_5_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_main_getchar_8_inline_getchar_queue_push_7_s <- 0n987392/0x000f1100u32  -> inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32 
# 9099a LoadImm32 [Register(0x80), Constant32(0x000f1100=987392)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_s <- inline_main_getchar_8_tfff6 U32` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_s <- 0n987392/0x000f1100u32 `.
#       # In IlFunctionId("main"), at #17, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_s with inline_main_getchar_8_inline_getchar_queue_pop_5_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_main_getchar_8_inline_getchar_queue_push_7_s <- 0n987392/0x000f1100u32  -> inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32 
20 80 00 11 0f 00 

# inline_main_getchar_8_inline_getchar_queue_push_7_n <- inline_main_getchar_8_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# 909a0 Copy8 [Register(0x84), Register(0x8c)]
#       inline_main_getchar_8_inline_getchar_queue_push_7_n <- inline_main_getchar_8_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
0b 84 8c 

# inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32 `.
# # In IlFunctionId("main"), at #19, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32  -> inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32 
# 909a3 LoadImm32 [Register(0x88), Constant32(0x000f1204=987652)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- inline_main_getchar_8_inline_getchar_queue_push_7_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32 `.
#       # In IlFunctionId("main"), at #19, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff <- 0n987652/0x000f1204u32  -> inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32 
20 88 04 12 0f 00 

# inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# # In IlFunctionId("main"), at #20, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] U8 -> inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8
# 909a9 Load8 [Register(0x88), Register(0x94)]
#       inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("main"), at #20, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] U8 -> inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8
05 88 94 

# inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7 U32 <- inline_main_getchar_8_inline_getchar_queue_push_7_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 909ac LoadImm32 [Register(0x90), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7 U32 <- inline_main_getchar_8_inline_getchar_queue_push_7_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 90 00 00 00 00 

# 909b2 Copy8 [Register(0x94), Register(0x90)]
#       inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7 U32 <- inline_main_getchar_8_inline_getchar_queue_push_7_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 94 90 

# inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# # In IlFunctionId("main"), at #22, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_s with inline_main_getchar_8_inline_getchar_queue_pop_5_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_push_7_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) -> inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7)
# 909b5 ClearCarry []
#       inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("main"), at #22, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_s with inline_main_getchar_8_inline_getchar_queue_pop_5_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_push_7_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) -> inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7)
03 

# 909b6 AddCarry32_1 [Register(0x80), Register(0x90), Register(0x80)]
#       inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("main"), at #22, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_s with inline_main_getchar_8_inline_getchar_queue_pop_5_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_push_7_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) -> inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7)
30 80 90 80 

# 909ba AddCarry32_2 []
#       inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("main"), at #22, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_s with inline_main_getchar_8_inline_getchar_queue_pop_5_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_push_7_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7) -> inline_main_getchar_8_inline_getchar_queue_push_7_t2187 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_push_7_t5bb7)
31 

# mem[inline_main_getchar_8_inline_getchar_queue_push_7_t2187] <- inline_main_getchar_8_inline_getchar_queue_push_7_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 909bb Store8 [Register(0x8c), Register(0x80)]
#       mem[inline_main_getchar_8_inline_getchar_queue_push_7_t2187] <- inline_main_getchar_8_inline_getchar_queue_push_7_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 8c 80 

# inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# # In IlFunctionId("main"), at #24, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] U8 -> inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8
# 909be Load8 [Register(0x88), Register(0x94)]
#       inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("main"), at #24, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] U8 -> inline_main_getchar_8_inline_getchar_queue_push_7_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8
05 88 94 

# inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 <- inline_main_getchar_8_inline_getchar_queue_push_7_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 909c1 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 <- inline_main_getchar_8_inline_getchar_queue_push_7_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 909c4 Add8NoCarryIn [Register(0x94), Register(0x00), Register(0x7d)]
#       inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 <- inline_main_getchar_8_inline_getchar_queue_push_7_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 94 00 7d 

# mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# # In IlFunctionId("main"), at #26, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8 -> mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8
# 909c8 Store8 [Register(0x7d), Register(0x88)]
#       mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("main"), at #26, replacing reference to inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff with inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_main_getchar_8_inline_getchar_queue_push_7_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8 -> mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] <- inline_main_getchar_8_inline_getchar_queue_push_7_tf3c4 U8
06 7d 88 

# :inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push None
# inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push
# goto inline_main_getchar_8_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 909cb JmpImm [Label24(inline_main_getchar_8_getchar_if_end_3)]
#       goto inline_main_getchar_8_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 f8 09 09 

# :inline_main_getchar_8_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_8_getchar_if_else_0_5
# inline_main_getchar_8_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 909cf LoadImm32 [Register(0x80), Constant32(0x000f1008=987144)]
#       inline_main_getchar_8_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
20 80 08 10 0f 00 

# inline_main_getchar_8_teb6e <- mem[inline_main_getchar_8_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 909d5 Load8 [Register(0x80), Register(0x7d)]
#       inline_main_getchar_8_teb6e <- mem[inline_main_getchar_8_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
05 80 7d 

# inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #32, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# 909d8 LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #32, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_getchar_8_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
04 84 00 

# if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #33, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_teb6e != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' -> if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3'
# 909db Cmp8 [Register(0x7d), Register(0x84)]
#       if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #33, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_teb6e != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' -> if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3'
15 7d 84 

# 909de JzImm [Label24(inline_main_getchar_8_getchar_if_end_3)]
#       if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #33, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_teb6e != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' -> if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3'
72 f8 09 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #33, replacing reference to inline_main_getchar_8_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_getchar_8_teb6e != inline_main_getchar_8_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3' -> if inline_main_getchar_8_teb6e != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_getchar_8_getchar_if_true_1_6' else 'inline_main_getchar_8_getchar_if_end_3'\n", opcode: JmpImm, args: [Label24(inline_main_getchar_8_getchar_if_true_1_6)], resolved: None }
# :inline_main_getchar_8_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_8_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {125, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52}
# Registers to save: []
# 909e2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 909e8 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c f2 09 09 00 

# 909ee JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 43 04 09 

# 909f2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# :inline_main_getchar_8_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_8_getchar_if_end_3
# inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_s <- inline_main_getchar_8_tfff6 U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32 `.
# 909f8 LoadImm32 [Register(0x80), Constant32(0x000f1100=987392)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_s <- inline_main_getchar_8_tfff6 U32` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_s <- 0n987392/0x000f1100u32 `.
20 80 00 11 0f 00 

# inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 `.
# 909fe LoadImm32 [Register(0x90), Constant32(0x000f1200=987648)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 `.
20 90 00 12 0f 00 

# inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 90a04 Load8 [Register(0x90), Register(0x8c)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 90 8c 

# inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32 `.
# 90a07 LoadImm32 [Register(0x88), Constant32(0x000f1204=987652)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff <- 0n987652/0x000f1204u32 `.
20 88 04 12 0f 00 

# inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 90a0d Load8 [Register(0x88), Register(0x84)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 88 84 

# if inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd == inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 90a10 Cmp8 [Register(0x8c), Register(0x84)]
#       if inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd == inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 8c 84 

# 90a13 JzImm [Label24(inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1)]
#       if inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd == inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 1b 0a 09 

# 90a17 JmpImm [Label24(inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0)]
#       if inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd == inline_main_getchar_8_inline_getchar_queue_pop_5_t3ee then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 25 0a 09 

# :inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1
# inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 90a1b LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 84 00 

# inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 90a1e Copy8 [Register(0x84), Register(0x7d)]
#       inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 84 7d 

# goto inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 90a21 JmpImm [Label24(inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop)]
#       goto inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 50 0a 09 

# :inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0
# inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 `.
# 90a25 LoadImm32 [Register(0x90), Constant32(0x000f1200=987648)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("main"), replacing `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_main_getchar_8_inline_getchar_queue_pop_5_tb702 <- 0n987648/0x000f1200u32 `.
20 90 00 12 0f 00 

# inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 90a2b Load8 [Register(0x90), Register(0x8c)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 90 8c 

# inline_main_getchar_8_inline_getchar_queue_pop_5_tb469 U32 <- inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 90a2e LoadImm32 [Register(0x88), Constant32(0x00000000=0)]
#       Zero-pad for inline_main_getchar_8_inline_getchar_queue_pop_5_tb469 U32 <- inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 88 00 00 00 00 

# 90a34 Copy8 [Register(0x8c), Register(0x88)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tb469 U32 <- inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 8c 88 

# inline_main_getchar_8_inline_getchar_queue_pop_5_tae11 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_pop_5_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# 90a37 ClearCarry []
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tae11 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_pop_5_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
03 

# 90a38 AddCarry32_1 [Register(0x80), Register(0x88), Register(0x80)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tae11 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_pop_5_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
30 80 88 80 

# 90a3c AddCarry32_2 []
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tae11 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s Add Var(inline_main_getchar_8_inline_getchar_queue_pop_5_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
31 

# inline_main_getchar_8_inline_getchar_queue_pop_5_value <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 90a3d Load8 [Register(0x80), Register(0x84)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_value <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 80 84 

# inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# 90a40 Load8 [Register(0x90), Register(0x8c)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
05 90 8c 

# inline_main_getchar_8_inline_getchar_queue_pop_5_te468 <- inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 90a43 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_te468 <- inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 90a46 Add8NoCarryIn [Register(0x8c), Register(0x00), Register(0x7d)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_te468 <- inline_main_getchar_8_inline_getchar_queue_pop_5_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 8c 00 7d 

# mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] <- inline_main_getchar_8_inline_getchar_queue_pop_5_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# 90a4a Store8 [Register(0x7d), Register(0x90)]
#       mem[inline_main_getchar_8_inline_getchar_queue_pop_5_tb702] <- inline_main_getchar_8_inline_getchar_queue_pop_5_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
06 7d 90 

# inline_main_getchar_8_inline_getchar_queue_pop_5_t44ed <- inline_main_getchar_8_inline_getchar_queue_pop_5_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 90a4d Copy8 [Register(0x84), Register(0x7d)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_t44ed <- inline_main_getchar_8_inline_getchar_queue_pop_5_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 84 7d 

# inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x7d), Register(0x7d)], resolved: None }
# :inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop None
# inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop
# goto inline_main_getchar_8_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 90a50 JmpImm [Label24(inline_main_getchar_8_getchar_while_predicate_0)]
#       goto inline_main_getchar_8_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 7b 09 09 

# :inline_main_getchar_8_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_main_getchar_8_getchar_while_end_2
# inline_main_getchar_8_tdcd9 <- inline_main_getchar_8_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_main_getchar_8_tdcd9 <- inline_main_getchar_8_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x7d), Register(0x7d)], resolved: None }
# tbbb3 <- inline_main_getchar_8_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "tbbb3 <- inline_main_getchar_8_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x7d), Register(0x7d)], resolved: None }
# :inline_main_getchar_8_function_end_getchar None
# inline_main_getchar_8_function_end_getchar
# inline_main_putc_1_c <- tbbb3 U8 Some('programs/test/keyboard_poll.j':(6,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] }) }
# Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] })
# optimized away noop copy Instruction { source: "inline_main_putc_1_c <- tbbb3 U8 Some('programs/test/keyboard_poll.j':(6,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] }) }\nCall(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] })\n", opcode: Copy8, args: [Register(0x7d), Register(0x7d)], resolved: None }
# inline_main_putc_1_tac13 <- inline_main_putc_1_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_1_tac13 <- inline_main_putc_1_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x7d), Register(0x7d)], resolved: None }
# None <= call io_write0(inline_main_putc_1_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 90a54 Out0 [Register(0x7d)]
#       IoWrite0
68 7d 

# inline_main_putc_1_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 90a56 LoadImm32 [Register(0x88), Constant32(0x000f105c=987228)]
#       inline_main_putc_1_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 88 5c 10 0f 00 

# inline_main_putc_1_t76c7 <- mem[inline_main_putc_1_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 90a5c Load8 [Register(0x88), Register(0x8c)]
#       inline_main_putc_1_t76c7 <- mem[inline_main_putc_1_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 88 8c 

# inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #69, replacing reference to inline_main_putc_1_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_1_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
# 90a5f LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #69, replacing reference to inline_main_putc_1_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_1_ta97f <- 0n0/0x00u8  -> inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f <- 0n0/0x00u8 
04 84 00 

# if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #70, replacing reference to inline_main_putc_1_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_1_t76c7 != inline_main_putc_1_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' -> if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0'
# 90a62 Cmp8 [Register(0x8c), Register(0x84)]
#       if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #70, replacing reference to inline_main_putc_1_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_1_t76c7 != inline_main_putc_1_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' -> if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0'
15 8c 84 

# 90a65 JzImm [Label24(inline_main_putc_1_putc_if_end_0)]
#       if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #70, replacing reference to inline_main_putc_1_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_1_t76c7 != inline_main_putc_1_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' -> if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0'
72 82 0a 09 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #70, replacing reference to inline_main_putc_1_ta97f with inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_1_t76c7 != inline_main_putc_1_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0' -> if inline_main_putc_1_t76c7 != inline_main_getchar_8_inline_getchar_queue_pop_5_ta97f then 'inline_main_putc_1_putc_if_true_0_1' else 'inline_main_putc_1_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_main_putc_1_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_1_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_1_putc_if_true_0_1
# inline_main_putc_1_tac13 <- inline_main_putc_1_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_1_tac13 <- inline_main_putc_1_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x7d), Register(0x7d)], resolved: None }
# None <= call lcd_putc(inline_main_putc_1_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 90a69 Copy8 [Register(0x7d), Register(0x00)]
#       Arg0[ch]=inline_main_putc_1_tac13 None <= call lcd_putc(inline_main_putc_1_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 7d 00 

# Registers used by this function: {125, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 122, 123, 124}
# Registers to save: []
# 90a6c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 90a72 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 7c 0a 09 00 

# 90a78 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 73 07 09 

# 90a7c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_1_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_1_putc_if_end_0
# goto main_while_predicate_0 Some('programs/test/keyboard_poll.j':(6,5))
# 90a82 JmpImm [Label24(main_while_predicate_0)]
#       goto main_while_predicate_0 Some('programs/test/keyboard_poll.j':(6,5))
70 6a 09 09 

# :function_end_main Some('programs/test/keyboard_poll.j':(6,5))
# function_end_main
# Unreachable None
# 90a86 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var inline_stdio_init_queue_init_4_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([149]) Number(0n0/0x00u8)
# Var inline_stdio_init_queue_init_4_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([152, 153, 154, 155]) Number(0n987648/0x000f1200u32)
# Var inline_stdio_init_queue_init_4_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([152, 153, 154, 155]) Number(0n987652/0x000f1204u32)
# Var t0 (static "lcd_enable" addr) Reg(U32) Some([156, 157, 158, 159]) Number(0n987228/0x000f105cu32)
# Var t1 (static "keyboard_enable" addr) Reg(U32) Some([156, 157, 158, 159]) Number(0n987144/0x000f1008u32)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([160]) Number(0n1/0x01u8)
# t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 90a8b LoadImm32 [Register(0x9c), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 9c 5c 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 90a91 LoadImm8 [Register(0xa0), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 a0 01 

# mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 90a94 Store8 [Register(0xa0), Register(0x9c)]
#       mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 a0 9c 

# t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 90a97 LoadImm32 [Register(0x9c), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 9c 08 10 0f 00 

# mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 90a9d Store8 [Register(0xa0), Register(0x9c)]
#       mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 a0 9c 

# inline_stdio_init_queue_init_4_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_tb702 <- inline_stdio_init_queue_init_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_4_tb702 <- 0n987648/0x000f1200u32 `.
# 90aa0 LoadImm32 [Register(0x98), Constant32(0x000f1200=987648)]
#       inline_stdio_init_queue_init_4_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_tb702 <- inline_stdio_init_queue_init_4_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_4_tb702 <- 0n987648/0x000f1200u32 `.
20 98 00 12 0f 00 

# inline_stdio_init_queue_init_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 90aa6 LoadImm8 [Register(0x95), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 95 00 

# mem[inline_stdio_init_queue_init_4_tb702] <- inline_stdio_init_queue_init_4_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# 90aa9 Store8 [Register(0x95), Register(0x98)]
#       mem[inline_stdio_init_queue_init_4_tb702] <- inline_stdio_init_queue_init_4_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
06 95 98 

# inline_stdio_init_queue_init_4_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_tc1ff <- inline_stdio_init_queue_init_4_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_4_tc1ff <- 0n987652/0x000f1204u32 `.
# 90aac LoadImm32 [Register(0x98), Constant32(0x000f1204=987652)]
#       inline_stdio_init_queue_init_4_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_4_tc1ff <- inline_stdio_init_queue_init_4_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_4_tc1ff <- 0n987652/0x000f1204u32 `.
20 98 04 12 0f 00 

# mem[inline_stdio_init_queue_init_4_tc1ff] <- inline_stdio_init_queue_init_4_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# 90ab2 Store8 [Register(0x95), Register(0x98)]
#       mem[inline_stdio_init_queue_init_4_tc1ff] <- inline_stdio_init_queue_init_4_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
06 95 98 

# :inline_stdio_init_queue_init_4_function_end_queue_init None
# inline_stdio_init_queue_init_4_function_end_queue_init
# None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {149, 152, 153, 154, 155, 156, 157, 158, 159, 160}
# Registers used by callee tree: {56, 57, 58, 59, 60, 61, 62, 63, 65, 81, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96}
# Registers to save: []
# 90ab5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 90abb StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c c5 0a 09 00 

# 90ac1 JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 52 06 09 

# 90ac5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# None <= call KeyBoard_init() Some('/lutcomp/programs/lib/stdio.j':(15,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {149, 152, 153, 154, 155, 156, 157, 158, 159, 160}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 90acb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 90ad1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c db 0a 09 00 

# 90ad7 JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 04 09 

# 90adb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 90ae1 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 90ae3 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

