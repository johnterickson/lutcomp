v2.0 raw
# ImageBaseAddress=0x00090000
# entry
# 90000 Instruction { source: "Initialzing flags and internal regs.", opcode: Init, args: [], resolved: None }
00 
# 90001 Instruction { source: "Initialzing stack register to 0x000f0f00.", opcode: LoadImm32, args: [Register(0x0c), Constant32(0x000f0f00=986880)], resolved: None }
20 0c 00 0f 0f 00 
# 90007 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 9000d Instruction { source: "PseudoCall(Label24(:main))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 17 00 09 00 
# 90013 Instruction { source: "PseudoCall(Label24(:main))", opcode: JmpImm, args: [Label24(:main)], resolved: None }
70 60 0a 09 
# 90017 Instruction { source: "PseudoCall(Label24(:main))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# 9001d Instruction { source: "Halting after return from entry function.", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([16, 17, 18, 19])
# Var t1 (t1 Number(U8, 0)) Reg(U8) Some([20])
# Var t2 (t2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([16, 17, 18, 19])
# Var t3 (t3 Number(USIZE, 987136)) Reg(U32) Some([16, 17, 18, 19])
# Var t4 (t4 Number(USIZE, 4)) Reg(U32) Some([24, 25, 26, 27])
# Var t5 (t5 Number(U8, 0)) Reg(U8) Some([20])
# t0 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 90427 Instruction { source: "t0 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f1000=987136)], resolved: None }
20 10 00 10 0f 00 
# t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 9042d Instruction { source: "t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# mem[t0] <- t1 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 90430 Instruction { source: "mem[t0] <- t1 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x14), Register(0x10)], resolved: None }
06 14 10 
# t3 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 90433 Instruction { source: "t3 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x10), Constant32(0x000f1000=987136)], resolved: None }
20 10 00 10 0f 00 
# t4 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 90439 Instruction { source: "t4 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x18), Constant32(0x00000004=4)], resolved: None }
20 18 04 00 00 00 
# t2 <- t3 Add t4
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# optimized away noop copy Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x10), Register(0x10)], resolved: None }
# 9043f Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x10), Constant32(0x00000004=4)], resolved: None }
32 10 04 00 00 00 
# t5 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90445 Instruction { source: "t5 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x14), Constant8(0x00=0)], resolved: None }
04 14 00 
# mem[t2] <- t5 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 90448 Instruction { source: "mem[t2] <- t5 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x14), Register(0x10)], resolved: None }
06 14 10 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 9044b Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_KeyBoard_init
# 	SourceContext { contexts: [] }
# function_end_KeyBoard_init
# Unreachable
# 	SourceContext { contexts: [] }
# 9044d Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :Keyboard_poll
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_6_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_Keyboard_poll_queue_push_6_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_Keyboard_poll_queue_push_6_n (Arg1 n Number(U8)) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_6_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_6_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_6_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_6_t10 (t10 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_6_t11 (t11 Number(USIZE, 260)) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_6_t12 (t12 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_6_t13 (t13 PtrFieldDeref("s", "last")) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_6_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_6_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_6_t16 (t16 Number(USIZE, 260)) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_6_t17 (t17 Number(U8, 1)) Reg(U8) Some([48])
# Var inline_Keyboard_poll_queue_push_6_t2 (t2 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_6_t3 (t3 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_Keyboard_poll_queue_push_6_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([56])
# Var inline_Keyboard_poll_queue_push_6_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_Keyboard_poll_queue_push_6_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_6_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_Keyboard_poll_queue_push_6_t8 (t8 Ident("n")) Reg(U8) Some([28])
# Var inline_Keyboard_poll_queue_push_6_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_6_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([40, 41, 42, 43])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))) Reg(U8) Some([28])
# Var t1 (t1 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([28])
# Var t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([44, 45, 46, 47])
# Var t11 (t11 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([44, 45, 46, 47])
# Var t12 (t12 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([36, 37, 38, 39])
# Var t13 (t13 Ident("index")) Reg(U32) Some([32, 33, 34, 35])
# Var t14 (t14 Number(USIZE, 1)) Reg(U32) Some([36, 37, 38, 39])
# Var t15 (t15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([44, 45, 46, 47])
# Var t16 (t16 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([44, 45, 46, 47])
# Var t17 (t17 Ident("index")) Reg(U32) Some([32, 33, 34, 35])
# Var t18 (t18 LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([48])
# Var t19 (t19 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([36, 37, 38, 39])
# Var t2 (t2 Number(U8, 4)) Reg(U8) Some([57])
# Var t20 (t20 Number(USIZE, 987136)) Reg(U32) Some([36, 37, 38, 39])
# Var t21 (t21 Number(USIZE, 4)) Reg(U32) Some([40, 41, 42, 43])
# Var t22 (t22 Number(U8, 0)) Reg(U8) Some([58])
# Var t23 (t23 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })) Reg(U8) Some([28])
# Var t24 (t24 AddressOf(Ident("stdin"))) Reg(U32) Some([36, 37, 38, 39])
# Var t25 (static "stdin") Reg(U32) Some([36, 37, 38, 39])
# Var t26 (t26 Ident("c")) Reg(U8) Some([28])
# Var t27 (t27 Number(U8, 0)) Reg(U8) Some([28])
# Var t28 (t28 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([48])
# Var t29 (t29 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([36, 37, 38, 39])
# Var t3 (t3 Number(U8, 0)) Reg(U8) Some([57])
# Var t30 (t30 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([36, 37, 38, 39])
# Var t31 (t31 Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([40, 41, 42, 43])
# Var t32 (t32 Ident("index")) Reg(U32) Some([32, 33, 34, 35])
# Var t33 (t33 Number(USIZE, 2)) Reg(U32) Some([40, 41, 42, 43])
# Var t34 (t34 LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([28])
# Var t35 (t35 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([44, 45, 46, 47])
# Var t36 (t36 Number(USIZE, 987136)) Reg(U32) Some([44, 45, 46, 47])
# Var t37 (t37 Number(USIZE, 4)) Reg(U32) Some([36, 37, 38, 39])
# Var t38 (t38 Number(U8, 0)) Reg(U8) Some([48])
# Var t39 (t39 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([44, 45, 46, 47])
# Var t4 (t4 Number(USIZE, 4)) Reg(U32) Some([32, 33, 34, 35])
# Var t40 (t40 Number(U8, 0)) Reg(U8) Some([48])
# Var t41 (t41 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([44, 45, 46, 47])
# Var t42 (t42 Number(U8, 1)) Reg(U8) Some([48])
# Var t43 (t43 Number(U8, 0)) Reg(U8) Some([28])
# Var t44 (t44 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([57])
# Var t45 (t45 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([32, 33, 34, 35])
# Var t46 (t46 Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([36, 37, 38, 39])
# Var t47 (t47 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([32, 33, 34, 35])
# Var t48 (t48 Ident("index")) Reg(U32) Some([32, 33, 34, 35])
# Var t49 (t49 Number(USIZE, 3)) Reg(U32) Some([40, 41, 42, 43])
# Var t5 (t5 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([44, 45, 46, 47])
# Var t50 (t50 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([44, 45, 46, 47])
# Var t51 (t51 Number(USIZE, 987136)) Reg(U32) Some([44, 45, 46, 47])
# Var t52 (t52 Number(USIZE, 4)) Reg(U32) Some([32, 33, 34, 35])
# Var t53 (t53 Number(U8, 1)) Reg(U8) Some([57])
# Var t54 (t54 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([44, 45, 46, 47])
# Var t55 (t55 Number(USIZE, 987136)) Reg(U32) Some([44, 45, 46, 47])
# Var t56 (t56 Number(USIZE, 4)) Reg(U32) Some([32, 33, 34, 35])
# Var t57 (t57 Number(U8, 0)) Reg(U8) Some([57])
# Var t6 (t6 Ident("code")) Reg(U8) Some([28])
# Var t7 (t7 LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([28])
# Var t8 (t8 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([44, 45, 46, 47])
# Var t9 (t9 Number(U8, 0)) Reg(U8) Some([48])
# Some(t1) <= call io_ready_to_read()
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 90452 Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x1c)], resolved: None }
79 1c 
# t2 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 90454 Instruction { source: "t2 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x04=4)], resolved: None }
04 39 04 
# t0 <- t1 BitwiseAnd t2
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4))"] }
# 90457 Instruction { source: "t0 <- t1 BitwiseAnd t2\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4))\"] }", opcode: And8, args: [Register(0x1c), Register(0x39), Register(0x1c)], resolved: None }
1b 1c 39 1c 
# t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 9045b Instruction { source: "t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# if t0 == t3 then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }", "Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }"] }
# 9045e Instruction { source: "if t0 == t3 then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x39)], resolved: None }
15 1c 39 
# 90461 Instruction { source: "if t0 == t3 then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_true_0_1)], resolved: None }
72 69 04 09 
# 90465 Instruction { source: "if t0 == t3 then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }\", \"Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_else_0_2)], resolved: None }
70 6f 04 09 
# :Keyboard_poll_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_1
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 90469 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# goto Keyboard_poll_if_end_0
# 	SourceContext { contexts: [] }
# 9046b Instruction { source: "goto Keyboard_poll_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_0)], resolved: None }
70 6f 04 09 
# :Keyboard_poll_if_else_0_2
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2()
# 	SourceContext { contexts: ["Assign { target: Ident(\"code\"), var_type: Some(Number(U8)), value: Call(Call { function: \"io_read2\", parameters: [] }) }", "Call(Call { function: \"io_read2\", parameters: [] })"] }
# 9046f Instruction { source: "IoRead2", opcode: In2, args: [Register(0x1c)], resolved: None }
62 1c 
# t4 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 90471 Instruction { source: "t4 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000004=4)], resolved: None }
20 20 04 00 00 00 
# t6 <- code U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Ident(\"code\")", "Ident(\"code\")"] }
# optimized away noop copy Instruction { source: "t6 <- code U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Ident(\\\"code\\\")\", \"Ident(\\\"code\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5 U32 <- t6 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }"] }
# 90477 Instruction { source: "Zero-pad for t5 U32 <- t6 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x00000000=0)], resolved: None }
20 2c 00 00 00 00 
# 9047d Instruction { source: "t5 U32 <- t6 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"code\\\") }\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x2c)], resolved: None }
0b 1c 2c 
# index <- t4 Multiply t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }", "Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))"] }
# 90480 Instruction { source: "index <- t4 Multiply t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: Mul8_16, args: [Register(0x20), Register(0x2c), Register(0x20)], resolved: None }
11 20 2c 20 
# 90484 Instruction { source: "index <- t4 Multiply t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x22), Constant8(0x00=0)], resolved: None }
04 22 00 
# 90487 Instruction { source: "index <- t4 Multiply t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"index\\\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\")) }\", \"Arithmetic(Multiply, Number(USIZE, 4), Ident(\\\"code\\\"))\"] }", opcode: LoadImm8, args: [Register(0x23), Constant8(0x00=0)], resolved: None }
04 23 00 
# t8 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 9048a Instruction { source: "t8 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t7 <- mem[t8] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"shift_held\")", "LocalFieldDeref(\"keyboard\", \"shift_held\")"] }
# 90490 Instruction { source: "t7 <- mem[t8] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# t9 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90493 Instruction { source: "t9 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x00=0)], resolved: None }
04 30 00 
# if t7 != t9 then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }"] }
# 90496 Instruction { source: "if t7 != t9 then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x30)], resolved: None }
15 1c 30 
# 90499 Instruction { source: "if t7 != t9 then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_5)], resolved: None }
72 bf 04 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7 != t9 then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }, [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }"] }
# Keyboard_poll_if_true_0_4
# t11 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 9049d Instruction { source: "t11 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 2c 22 00 09 00 
# t13 <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t13 <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t14 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 904a3 Instruction { source: "t14 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000001=1)], resolved: None }
20 24 01 00 00 00 
# t12 <- t13 Add t14
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))"] }
# 904a9 Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x24)], resolved: None }
21 20 24 
# 904ac Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x24), Constant32(0x00000001=1)], resolved: None }
32 24 01 00 00 00 
# t10 <- t11 Add t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 904b2 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 904b3 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x24), Register(0x2c)], resolved: None }
30 2c 24 2c 
# 904b7 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# c <- mem[t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))"] }
# 904b8 Instruction { source: "c <- mem[t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 1)))\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# goto Keyboard_poll_if_end_3
# 	SourceContext { contexts: [] }
# 904bb Instruction { source: "goto Keyboard_poll_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_3)], resolved: None }
70 ce 04 09 
# :Keyboard_poll_if_else_0_5
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_5
# t16 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 904bf Instruction { source: "t16 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x2c), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 2c 22 00 09 00 
# t17 <- index U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t17 <- index U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t15 <- t16 Add t17
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))"] }
# 904c5 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 904c6 Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x20), Register(0x2c)], resolved: None }
30 2c 20 2c 
# 904ca Instruction { source: "t15 <- t16 Add t17\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\")) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Ident(\\\"index\\\"))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# c <- mem[t15] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))"] }
# 904cb Instruction { source: "c <- mem[t15] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"c\\\"), var_type: None, value: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\")) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Ident(\\\"index\\\"))\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# :Keyboard_poll_if_end_3
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_3
# t20 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 904ce Instruction { source: "t20 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x000f1000=987136)], resolved: None }
20 24 00 10 0f 00 
# t21 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 904d4 Instruction { source: "t21 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000004=4)], resolved: None }
20 28 04 00 00 00 
# t19 <- t20 Add t21
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# optimized away noop copy Instruction { source: "t19 <- t20 Add t21\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# 904da Instruction { source: "t19 <- t20 Add t21\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x24), Constant32(0x00000004=4)], resolved: None }
32 24 04 00 00 00 
# t18 <- mem[t19] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")"] }
# 904e0 Instruction { source: "t18 <- mem[t19] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x24), Register(0x30)], resolved: None }
05 24 30 
# t22 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 904e3 Instruction { source: "t22 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x3a), Constant8(0x00=0)], resolved: None }
04 3a 00 
# if t18 == t22 then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }", "Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 904e6 Instruction { source: "if t18 == t22 then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x30), Register(0x3a)], resolved: None }
15 30 3a 
# 904e9 Instruction { source: "if t18 == t22 then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_true_0_7)], resolved: None }
72 f1 04 09 
# 904ed Instruction { source: "if t18 == t22 then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }])], else_block: [] }\", \"Comparison { op: Equals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_else_0_8)], resolved: None }
70 4a 05 09 
# :Keyboard_poll_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_7
# t25 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 904f1 Instruction { source: "t25 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x000f105c=987228)], resolved: None }
20 24 5c 10 0f 00 
# t24 <- t25 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "t24 <- t25 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# t26 <- c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "t26 <- c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_6_s <- t24 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_6_s <- t24 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_6_n <- t26 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_6_n <- t26 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_6_t0 <- inline_Keyboard_poll_queue_push_6_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_6_t0 <- inline_Keyboard_poll_queue_push_6_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_6_values <- inline_Keyboard_poll_queue_push_6_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 904f7 Instruction { source: "inline_Keyboard_poll_queue_push_6_values <- inline_Keyboard_poll_queue_push_6_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0x24), Register(0x28)], resolved: None }
21 24 28 
# inline_Keyboard_poll_queue_push_6_t2 <- inline_Keyboard_poll_queue_push_6_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_6_t2 <- inline_Keyboard_poll_queue_push_6_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0x28), Register(0x28)], resolved: None }
# inline_Keyboard_poll_queue_push_6_t6 <- inline_Keyboard_poll_queue_push_6_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_6_t6 <- inline_Keyboard_poll_queue_push_6_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_6_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 904fa Instruction { source: "inline_Keyboard_poll_queue_push_6_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x00000104=260)], resolved: None }
20 34 04 01 00 00 
# inline_Keyboard_poll_queue_push_6_t5 <- inline_Keyboard_poll_queue_push_6_t6 Add inline_Keyboard_poll_queue_push_6_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 90500 Instruction { source: "inline_Keyboard_poll_queue_push_6_t5 <- inline_Keyboard_poll_queue_push_6_t6 Add inline_Keyboard_poll_queue_push_6_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90501 Instruction { source: "inline_Keyboard_poll_queue_push_6_t5 <- inline_Keyboard_poll_queue_push_6_t6 Add inline_Keyboard_poll_queue_push_6_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x34), Register(0x34)], resolved: None }
30 24 34 34 
# 90505 Instruction { source: "inline_Keyboard_poll_queue_push_6_t5 <- inline_Keyboard_poll_queue_push_6_t6 Add inline_Keyboard_poll_queue_push_6_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_6_t4 <- mem[inline_Keyboard_poll_queue_push_6_t5] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 90506 Instruction { source: "inline_Keyboard_poll_queue_push_6_t4 <- mem[inline_Keyboard_poll_queue_push_6_t5] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x34), Register(0x38)], resolved: None }
05 34 38 
# inline_Keyboard_poll_queue_push_6_t3 U32 <- inline_Keyboard_poll_queue_push_6_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 90509 Instruction { source: "Zero-pad for inline_Keyboard_poll_queue_push_6_t3 U32 <- inline_Keyboard_poll_queue_push_6_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0x34), Constant32(0x00000000=0)], resolved: None }
20 34 00 00 00 00 
# 9050f Instruction { source: "inline_Keyboard_poll_queue_push_6_t3 U32 <- inline_Keyboard_poll_queue_push_6_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0x38), Register(0x34)], resolved: None }
0b 38 34 
# inline_Keyboard_poll_queue_push_6_t1 <- inline_Keyboard_poll_queue_push_6_t2 Add inline_Keyboard_poll_queue_push_6_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 90512 Instruction { source: "inline_Keyboard_poll_queue_push_6_t1 <- inline_Keyboard_poll_queue_push_6_t2 Add inline_Keyboard_poll_queue_push_6_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90513 Instruction { source: "inline_Keyboard_poll_queue_push_6_t1 <- inline_Keyboard_poll_queue_push_6_t2 Add inline_Keyboard_poll_queue_push_6_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x28), Register(0x34), Register(0x28)], resolved: None }
30 28 34 28 
# 90517 Instruction { source: "inline_Keyboard_poll_queue_push_6_t1 <- inline_Keyboard_poll_queue_push_6_t2 Add inline_Keyboard_poll_queue_push_6_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_6_t8 <- inline_Keyboard_poll_queue_push_6_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_6_t8 <- inline_Keyboard_poll_queue_push_6_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# mem[inline_Keyboard_poll_queue_push_6_t1] <- inline_Keyboard_poll_queue_push_6_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 90518 Instruction { source: "mem[inline_Keyboard_poll_queue_push_6_t1] <- inline_Keyboard_poll_queue_push_6_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x1c), Register(0x28)], resolved: None }
06 1c 28 
# inline_Keyboard_poll_queue_push_6_t10 <- inline_Keyboard_poll_queue_push_6_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 9051b Instruction { source: "inline_Keyboard_poll_queue_push_6_t10 <- inline_Keyboard_poll_queue_push_6_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x2c)], resolved: None }
21 24 2c 
# inline_Keyboard_poll_queue_push_6_t11 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 9051e Instruction { source: "inline_Keyboard_poll_queue_push_6_t11 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000104=260)], resolved: None }
20 28 04 01 00 00 
# inline_Keyboard_poll_queue_push_6_t9 <- inline_Keyboard_poll_queue_push_6_t10 Add inline_Keyboard_poll_queue_push_6_t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 90524 Instruction { source: "inline_Keyboard_poll_queue_push_6_t9 <- inline_Keyboard_poll_queue_push_6_t10 Add inline_Keyboard_poll_queue_push_6_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90525 Instruction { source: "inline_Keyboard_poll_queue_push_6_t9 <- inline_Keyboard_poll_queue_push_6_t10 Add inline_Keyboard_poll_queue_push_6_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x28), Register(0x28)], resolved: None }
30 2c 28 28 
# 90529 Instruction { source: "inline_Keyboard_poll_queue_push_6_t9 <- inline_Keyboard_poll_queue_push_6_t10 Add inline_Keyboard_poll_queue_push_6_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_6_t15 <- inline_Keyboard_poll_queue_push_6_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 9052a Instruction { source: "inline_Keyboard_poll_queue_push_6_t15 <- inline_Keyboard_poll_queue_push_6_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0x24), Register(0x2c)], resolved: None }
21 24 2c 
# inline_Keyboard_poll_queue_push_6_t16 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 9052d Instruction { source: "inline_Keyboard_poll_queue_push_6_t16 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000104=260)], resolved: None }
20 24 04 01 00 00 
# inline_Keyboard_poll_queue_push_6_t14 <- inline_Keyboard_poll_queue_push_6_t15 Add inline_Keyboard_poll_queue_push_6_t16
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 90533 Instruction { source: "inline_Keyboard_poll_queue_push_6_t14 <- inline_Keyboard_poll_queue_push_6_t15 Add inline_Keyboard_poll_queue_push_6_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90534 Instruction { source: "inline_Keyboard_poll_queue_push_6_t14 <- inline_Keyboard_poll_queue_push_6_t15 Add inline_Keyboard_poll_queue_push_6_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0x2c), Register(0x24), Register(0x2c)], resolved: None }
30 2c 24 2c 
# 90538 Instruction { source: "inline_Keyboard_poll_queue_push_6_t14 <- inline_Keyboard_poll_queue_push_6_t15 Add inline_Keyboard_poll_queue_push_6_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_Keyboard_poll_queue_push_6_t13 <- mem[inline_Keyboard_poll_queue_push_6_t14] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 90539 Instruction { source: "inline_Keyboard_poll_queue_push_6_t13 <- mem[inline_Keyboard_poll_queue_push_6_t14] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# inline_Keyboard_poll_queue_push_6_t17 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 9053c Instruction { source: "inline_Keyboard_poll_queue_push_6_t17 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x01=1)], resolved: None }
04 30 01 
# inline_Keyboard_poll_queue_push_6_t12 <- inline_Keyboard_poll_queue_push_6_t13 Add inline_Keyboard_poll_queue_push_6_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 9053f Instruction { source: "inline_Keyboard_poll_queue_push_6_t12 <- inline_Keyboard_poll_queue_push_6_t13 Add inline_Keyboard_poll_queue_push_6_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x1c), Register(0x30), Register(0x1c)], resolved: None }
14 1c 30 1c 
# mem[inline_Keyboard_poll_queue_push_6_t9] <- inline_Keyboard_poll_queue_push_6_t12 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 90543 Instruction { source: "mem[inline_Keyboard_poll_queue_push_6_t9] <- inline_Keyboard_poll_queue_push_6_t12 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x1c), Register(0x28)], resolved: None }
06 1c 28 
# goto inline_Keyboard_poll_queue_push_6_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_6_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_6_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_6_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_Keyboard_poll_queue_push_6_function_end_queue_push
# goto Keyboard_poll_if_end_6
# 	SourceContext { contexts: [] }
# 90546 Instruction { source: "goto Keyboard_poll_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_6)], resolved: None }
70 4a 05 09 
# :Keyboard_poll_if_else_0_8
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_6
# t27 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 9054a Instruction { source: "t27 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
04 1c 00 
# t30 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 9054d Instruction { source: "t30 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 24 22 00 09 00 
# t32 <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t32 <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t33 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 90553 Instruction { source: "t33 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000002=2)], resolved: None }
20 28 02 00 00 00 
# t31 <- t32 Add t33
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))"] }
# 90559 Instruction { source: "t31 <- t32 Add t33\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x28)], resolved: None }
21 20 28 
# 9055c Instruction { source: "t31 <- t32 Add t33\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x28), Constant32(0x00000002=2)], resolved: None }
32 28 02 00 00 00 
# t29 <- t30 Add t31
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 90562 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90563 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x28), Register(0x24)], resolved: None }
30 24 28 24 
# 90567 Instruction { source: "t29 <- t30 Add t31\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t28 <- mem[t29] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))"] }
# 90568 Instruction { source: "t28 <- mem[t29] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2)))\"] }", opcode: Load8, args: [Register(0x24), Register(0x30)], resolved: None }
05 24 30 
# if t27 != t28 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }"] }
# 9056b Instruction { source: "if t27 != t28 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x30)], resolved: None }
15 1c 30 
# 9056e Instruction { source: "if t27 != t28 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_11)], resolved: None }
72 b1 05 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t27 != t28 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 2))) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }"] }
# Keyboard_poll_if_true_0_10
# t36 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 90572 Instruction { source: "t36 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t37 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 90578 Instruction { source: "t37 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x24), Constant32(0x00000004=4)], resolved: None }
20 24 04 00 00 00 
# t35 <- t36 Add t37
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# optimized away noop copy Instruction { source: "t35 <- t36 Add t37\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x2c), Register(0x2c)], resolved: None }
# 9057e Instruction { source: "t35 <- t36 Add t37\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x2c), Constant32(0x00000004=4)], resolved: None }
32 2c 04 00 00 00 
# t34 <- mem[t35] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")", "LocalFieldDeref(\"keyboard\", \"release_in_progress\")"] }
# 90584 Instruction { source: "t34 <- mem[t35] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\", \"LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\")\"] }", opcode: Load8, args: [Register(0x2c), Register(0x1c)], resolved: None }
05 2c 1c 
# t38 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90587 Instruction { source: "t38 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x00=0)], resolved: None }
04 30 00 
# if t34 != t38 then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }", "Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }"] }
# 9058a Instruction { source: "if t34 != t38 then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x30)], resolved: None }
15 1c 30 
# 9058d Instruction { source: "if t34 != t38 then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_14)], resolved: None }
72 a1 05 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t34 != t38 then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }] }\", \"Comparison { op: NotEquals, left: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }"] }
# Keyboard_poll_if_true_0_13
# t39 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 90591 Instruction { source: "t39 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t40 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90597 Instruction { source: "t40 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x00=0)], resolved: None }
04 30 00 
# mem[t39] <- t40 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }"] }
# 9059a Instruction { source: "mem[t39] <- t40 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x30), Register(0x2c)], resolved: None }
06 30 2c 
# goto Keyboard_poll_if_end_12
# 	SourceContext { contexts: [] }
# 9059d Instruction { source: "goto Keyboard_poll_if_end_12\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_12)], resolved: None }
70 ad 05 09 
# :Keyboard_poll_if_else_0_14
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_14
# t41 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }", "Number(USIZE, 987136)"] }
# 905a1 Instruction { source: "t41 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t42 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 905a7 Instruction { source: "t42 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x30), Constant8(0x01=1)], resolved: None }
04 30 01 
# mem[t41] <- t42 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }"] }
# 905aa Instruction { source: "mem[t41] <- t42 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"shift_held\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x30), Register(0x2c)], resolved: None }
06 30 2c 
# :Keyboard_poll_if_end_12
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9
# 	SourceContext { contexts: [] }
# 905ad Instruction { source: "goto Keyboard_poll_if_end_9\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_9)], resolved: None }
70 b1 05 09 
# :Keyboard_poll_if_else_0_11
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_9
# t43 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 905b1 Instruction { source: "t43 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x1c), Constant8(0x00=0)], resolved: None }
04 1c 00 
# t46 <- const &PS2_SCAN_CODE_TO_ASCII
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }", "Ident(\"PS2_SCAN_CODE_TO_ASCII\")"] }
# 905b4 Instruction { source: "t46 <- const &PS2_SCAN_CODE_TO_ASCII\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }\", \"Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\")\"] }", opcode: LoadImm32, args: [Register(0x24), Label32(:PS2_SCAN_CODE_TO_ASCII)], resolved: None }
20 24 22 00 09 00 
# t48 <- index U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Ident(\"index\")", "Ident(\"index\")"] }
# optimized away noop copy Instruction { source: "t48 <- index U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Ident(\\\"index\\\")\", \"Ident(\\\"index\\\")\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# t49 <- 0n3/0x00000003u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Number(USIZE, 3)", "Number(USIZE, 3)"] }
# 905ba Instruction { source: "t49 <- 0n3/0x00000003u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Number(USIZE, 3)\", \"Number(USIZE, 3)\"] }", opcode: LoadImm32, args: [Register(0x28), Constant32(0x00000003=3)], resolved: None }
20 28 03 00 00 00 
# t47 <- t48 Add t49
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))", "Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))"] }
# optimized away noop copy Instruction { source: "t47 <- t48 Add t49\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# 905c0 Instruction { source: "t47 <- t48 Add t49\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\", \"Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x20), Constant32(0x00000003=3)], resolved: None }
32 20 03 00 00 00 
# t45 <- t46 Add t47
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 905c6 Instruction { source: "t45 <- t46 Add t47\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 905c7 Instruction { source: "t45 <- t46 Add t47\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_1, args: [Register(0x24), Register(0x20), Register(0x20)], resolved: None }
30 24 20 20 
# 905cb Instruction { source: "t45 <- t46 Add t47\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\\\"PS2_SCAN_CODE_TO_ASCII\\\") }, Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# t44 <- mem[t45] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))", "Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))"] }
# 905cc Instruction { source: "t44 <- mem[t45] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\", \"Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3)))\"] }", opcode: Load8, args: [Register(0x20), Register(0x39)], resolved: None }
05 20 39 
# if t43 != t44 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }", "Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }"] }
# 905cf Instruction { source: "if t43 != t44 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: Cmp8, args: [Register(0x1c), Register(0x39)], resolved: None }
15 1c 39 
# 905d2 Instruction { source: "if t43 != t44 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JzImm, args: [Label24(Keyboard_poll_if_else_0_17)], resolved: None }
72 f2 05 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t43 != t44 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }] }\", \"Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\\\"PS2_SCAN_CODE_TO_ASCII\\\", Arithmetic(Add, Ident(\\\"index\\\"), Number(USIZE, 3))) }\"] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }"] }
# Keyboard_poll_if_true_0_16
# t51 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 905d6 Instruction { source: "t51 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t52 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 905dc Instruction { source: "t52 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000004=4)], resolved: None }
20 20 04 00 00 00 
# t50 <- t51 Add t52
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# optimized away noop copy Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x2c), Register(0x2c)], resolved: None }
# 905e2 Instruction { source: "t50 <- t51 Add t52\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x2c), Constant32(0x00000004=4)], resolved: None }
32 2c 04 00 00 00 
# t53 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }", "Number(U8, 1)", "Number(U8, 1)"] }
# 905e8 Instruction { source: "t53 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x01=1)], resolved: None }
04 39 01 
# mem[t50] <- t53 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }"] }
# 905eb Instruction { source: "mem[t50] <- t53 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 1) }\"] }", opcode: Store8, args: [Register(0x39), Register(0x2c)], resolved: None }
06 39 2c 
# goto Keyboard_poll_if_end_15
# 	SourceContext { contexts: [] }
# 905ee Instruction { source: "goto Keyboard_poll_if_end_15\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(Keyboard_poll_if_end_15)], resolved: None }
70 0a 06 09 
# :Keyboard_poll_if_else_0_17
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_else_0_17
# t55 <- 0n987136/0x000f1000u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 987136)", "Number(USIZE, 987136)"] }
# 905f2 Instruction { source: "t55 <- 0n987136/0x000f1000u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 987136)\", \"Number(USIZE, 987136)\"] }", opcode: LoadImm32, args: [Register(0x2c), Constant32(0x000f1000=987136)], resolved: None }
20 2c 00 10 0f 00 
# t56 <- 0n4/0x00000004u32 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))", "Number(USIZE, 4)", "Number(USIZE, 4)"] }
# 905f8 Instruction { source: "t56 <- 0n4/0x00000004u32 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\", \"Number(USIZE, 4)\", \"Number(USIZE, 4)\"] }", opcode: LoadImm32, args: [Register(0x20), Constant32(0x00000004=4)], resolved: None }
20 20 04 00 00 00 
# t54 <- t55 Add t56
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }", "Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))"] }
# optimized away noop copy Instruction { source: "t54 <- t55 Add t56\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: Copy32, args: [Register(0x2c), Register(0x2c)], resolved: None }
# 905fe Instruction { source: "t54 <- t55 Add t56\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }\", \"Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x2c), Constant32(0x00000004=4)], resolved: None }
32 2c 04 00 00 00 
# t57 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90604 Instruction { source: "t57 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x39), Constant8(0x00=0)], resolved: None }
04 39 00 
# mem[t54] <- t57 U8
# 	SourceContext { contexts: ["Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }"] }
# 90607 Instruction { source: "mem[t54] <- t57 U8\n\tSourceContext { contexts: [\"Assign { target: LocalFieldDeref(\\\"keyboard\\\", \\\"release_in_progress\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0x39), Register(0x2c)], resolved: None }
06 39 2c 
# :Keyboard_poll_if_end_15
# 	SourceContext { contexts: [] }
# Keyboard_poll_if_end_15
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 9060a Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_Keyboard_poll
# 	SourceContext { contexts: [] }
# function_end_Keyboard_poll
# Unreachable
# 	SourceContext { contexts: [] }
# 9060c Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :delay
# Ret None
# Arg0=x
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Ident("x")) Reg(U32) Some([60, 61, 62, 63])
# Var t1 (t1 Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var t2 (t2 Ident("x")) Reg(U32) Some([60, 61, 62, 63])
# Var t3 (t3 Number(USIZE, 1)) Reg(U32) Some([64, 65, 66, 67])
# Var x (Arg0 x Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# 90611 Instruction { source: "Save function parameter 'x' registers [0, 1, 2, 3] to locals [60, 61, 62, 63].", opcode: Copy32, args: [Register(0x00), Register(0x3c)], resolved: None }
21 00 3c 
# :delay_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }"] }
# delay_while_predicate_0
# t0 <- x U32
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t0 <- x U32\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# t1 <- 0n0/0x00000000u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }", "Number(USIZE, 0)", "Number(USIZE, 0)"] }
# 90614 Instruction { source: "t1 <- 0n0/0x00000000u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\", \"Number(USIZE, 0)\", \"Number(USIZE, 0)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000000=0)], resolved: None }
20 40 00 00 00 00 
# if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }", "Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }"] }
# 9061a Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8, args: [Register(0x3f), Register(0x43)], resolved: None }
15 3f 43 
# 9061d Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x3e), Register(0x42)], resolved: None }
16 3e 42 
# 90620 Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x3d), Register(0x41)], resolved: None }
16 3d 41 
# 90623 Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: Cmp8IfZero, args: [Register(0x3c), Register(0x40)], resolved: None }
16 3c 40 
# 90626 Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: JzImm, args: [Label24(delay_while_end_2)], resolved: None }
72 3a 06 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 != t1 then 'delay_while_body_1' else 'delay_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }] }\", \"Comparison { op: NotEquals, left: Ident(\\\"x\\\"), right: Number(USIZE, 0) }\"] }", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }"] }
# delay_while_body_1
# t2 <- x U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))", "Ident(\"x\")", "Ident(\"x\")"] }
# optimized away noop copy Instruction { source: "t2 <- x U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\", \"Ident(\\\"x\\\")\", \"Ident(\\\"x\\\")\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# t3 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 9062a Instruction { source: "t3 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x40), Constant32(0x00000001=1)], resolved: None }
20 40 01 00 00 00 
# x <- t2 Subtract t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }", "Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))"] }
# optimized away noop copy Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# 90630 Instruction { source: "x <- t2 Subtract t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"x\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1)) }\", \"Arithmetic(Subtract, Ident(\\\"x\\\"), Number(USIZE, 1))\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x3c), Constant32(0xffffffff=4294967295)], resolved: None }
32 3c ff ff ff ff 
# goto delay_while_predicate_0
# 	SourceContext { contexts: [] }
# 90636 Instruction { source: "goto delay_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(delay_while_predicate_0)], resolved: None }
70 14 06 09 
# :delay_while_end_2
# 	SourceContext { contexts: [] }
# delay_while_end_2
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 9063a Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_delay
# 	SourceContext { contexts: [] }
# function_end_delay
# Unreachable
# 	SourceContext { contexts: [] }
# 9063c Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([70])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([71])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([71])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_i (Arg0 i Number(U8)) Reg(U8) Some([71])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([72])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t0 (t0 Ident("i")) Reg(U8) Some([71])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t1 (t1 Number(U8, 20)) Reg(U8) Some([72])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t10 (t10 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t11 (t11 Ident("row")) Reg(U8) Some([72])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t12 (t12 Ident("col")) Reg(U8) Some([71])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t2 (t2 Ident("i")) Reg(U8) Some([71])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t3 (t3 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([80])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t4 (t4 Ident("row")) Reg(U8) Some([72])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t5 (t5 Number(U8, 20)) Reg(U8) Some([80])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t6 (t6 Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([71])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t7 (t7 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([72])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t8 (t8 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_lcd_draw_char_lcd_logical_to_physical_0_t9 (t9 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([84, 85, 86, 87])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([71])
# Var t0 (t0 Ident("i")) Reg(U8) Some([71])
# Var t1 (t1 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })) Reg(U8) Some([70])
# Var t10 (t10 Number(U8, 15)) Reg(U8) Some([71])
# Var t11 (t11 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([70])
# Var t12 (t12 Number(USIZE, 2)) Reg(U32) Some([88, 89, 90, 91])
# Var t13 (t13 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })) Reg(U8) Some([70])
# Var t14 (t14 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))) Reg(U8) Some([71])
# Var t15 (t15 Number(U8, 128)) Reg(U8) Some([71])
# Var t16 (t16 Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))) Reg(U8) Some([72])
# Var t17 (t17 Ident("ch")) Reg(U8) Some([70])
# Var t18 (t18 Number(U8, 4)) Reg(U8) Some([72])
# Var t19 (t19 Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })) Reg(U8) Some([70])
# Var t2 (t2 Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))) Reg(U8) Some([72])
# Var t20 (t20 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))) Reg(U8) Some([70])
# Var t21 (t21 Number(U8, 128)) Reg(U8) Some([71])
# Var t22 (t22 Arithmetic(And, Ident("ch"), Number(U8, 15))) Reg(U8) Some([70])
# Var t23 (t23 Ident("ch")) Reg(U8) Some([70])
# Var t24 (t24 Number(U8, 15)) Reg(U8) Some([72])
# Var t25 (t25 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([70])
# Var t26 (t26 Number(USIZE, 2)) Reg(U32) Some([92, 93, 94, 95])
# Var t3 (t3 Number(U8, 8)) Reg(U8) Some([72])
# Var t4 (t4 Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))) Reg(U8) Some([80])
# Var t5 (t5 Ident("pos")) Reg(U8) Some([71])
# Var t6 (t6 Number(U8, 4)) Reg(U8) Some([80])
# Var t7 (t7 Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })) Reg(U8) Some([70])
# Var t8 (t8 Arithmetic(And, Ident("pos"), Number(U8, 15))) Reg(U8) Some([71])
# Var t9 (t9 Ident("pos")) Reg(U8) Some([72])
# 90641 Instruction { source: "Save function parameter 'i' registers [0] to locals [71].", opcode: Copy8, args: [Register(0x00), Register(0x47)], resolved: None }
0b 00 47 
# 90644 Instruction { source: "Save function parameter 'ch' registers [4] to locals [70].", opcode: Copy8, args: [Register(0x04), Register(0x46)], resolved: None }
0b 04 46 
# t0 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t0 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"pos\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_i <- t0 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }", "Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_i <- t0 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"pos\\\"), var_type: Some(Number(U8)), value: Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] }) }\", \"Call(Call { function: \\\"lcd_logical_to_physical\\\", parameters: [Ident(\\\"i\\\")] })\"] }", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t0 <- inline_lcd_draw_char_lcd_logical_to_physical_0_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t0 <- inline_lcd_draw_char_lcd_logical_to_physical_0_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t1 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 90647 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t1 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x48), Constant8(0x14=20)], resolved: None }
04 48 14 
# inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_t0 Divide inline_lcd_draw_char_lcd_logical_to_physical_0_t1
# 	SourceContext { contexts: ["Assign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Divide, Ident(\"i\"), Number(U8, 20))"] }
# 9064a Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_row <- inline_lcd_draw_char_lcd_logical_to_physical_0_t0 Divide inline_lcd_draw_char_lcd_logical_to_physical_0_t1\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"row\\\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Divide, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: Divide8, args: [Register(0x47), Register(0x48), Register(0x48)], resolved: None }
17 47 48 48 
# inline_lcd_draw_char_lcd_logical_to_physical_0_t2 <- inline_lcd_draw_char_lcd_logical_to_physical_0_i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t2 <- inline_lcd_draw_char_lcd_logical_to_physical_0_i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t4 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t4 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t5 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 9064e Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t5 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x50), Constant8(0x14=20)], resolved: None }
04 50 14 
# inline_lcd_draw_char_lcd_logical_to_physical_0_t3 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t4 Multiply inline_lcd_draw_char_lcd_logical_to_physical_0_t5
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))", "Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))"] }
# 90651 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t3 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t4 Multiply inline_lcd_draw_char_lcd_logical_to_physical_0_t5\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\", \"Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))\"] }", opcode: Mul8_8, args: [Register(0x48), Register(0x50), Register(0x50)], resolved: None }
10 48 50 50 
# inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2 Subtract inline_lcd_draw_char_lcd_logical_to_physical_0_t3
# 	SourceContext { contexts: ["Assign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }", "Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))"] }
# 90655 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2 Subtract inline_lcd_draw_char_lcd_logical_to_physical_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Copy8, args: [Register(0x50), Register(0x00)], resolved: None }
0b 50 00 
# 90658 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2 Subtract inline_lcd_draw_char_lcd_logical_to_physical_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 9065a Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_col <- inline_lcd_draw_char_lcd_logical_to_physical_0_t2 Subtract inline_lcd_draw_char_lcd_logical_to_physical_0_t3\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"col\\\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20))) }\", \"Arithmetic(Subtract, Ident(\\\"i\\\"), Arithmetic(Multiply, Ident(\\\"row\\\"), Number(U8, 20)))\"] }", opcode: Add8NoCarryIn, args: [Register(0x47), Register(0x00), Register(0x47)], resolved: None }
14 47 00 47 
# inline_lcd_draw_char_lcd_logical_to_physical_0_t9 <- const &lcd_row_start
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }", "Ident(\"lcd_row_start\")"] }
# 9065e Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t9 <- const &lcd_row_start\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }\", \"Ident(\\\"lcd_row_start\\\")\"] }", opcode: LoadImm32, args: [Register(0x54), Label32(:lcd_row_start)], resolved: None }
20 54 23 04 09 00 
# inline_lcd_draw_char_lcd_logical_to_physical_0_t11 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Ident(\"row\")", "Ident(\"row\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t11 <- inline_lcd_draw_char_lcd_logical_to_physical_0_row U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Ident(\\\"row\\\")\", \"Ident(\\\"row\\\")\"] }", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t10 U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t11 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }"] }
# 90664 Instruction { source: "Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_0_t10 U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: LoadImm32, args: [Register(0x4c), Constant32(0x00000000=0)], resolved: None }
20 4c 00 00 00 00 
# 9066a Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t10 U32 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t11 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }\"] }", opcode: Copy8, args: [Register(0x48), Register(0x4c)], resolved: None }
0b 48 4c 
# inline_lcd_draw_char_lcd_logical_to_physical_0_t8 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t9 Add inline_lcd_draw_char_lcd_logical_to_physical_0_t10
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })"] }
# 9066d Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t8 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t9 Add inline_lcd_draw_char_lcd_logical_to_physical_0_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 9066e Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t8 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t9 Add inline_lcd_draw_char_lcd_logical_to_physical_0_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0x54), Register(0x4c), Register(0x4c)], resolved: None }
30 54 4c 4c 
# 90672 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t8 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t9 Add inline_lcd_draw_char_lcd_logical_to_physical_0_t10\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\\\"lcd_row_start\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"row\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_lcd_draw_char_lcd_logical_to_physical_0_t7 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_0_t8] U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Index(\"lcd_row_start\", Ident(\"row\"))", "Index(\"lcd_row_start\", Ident(\"row\"))"] }
# 90673 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t7 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_0_t8] U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\", \"Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\"))\"] }", opcode: Load8, args: [Register(0x4c), Register(0x48)], resolved: None }
05 4c 48 
# inline_lcd_draw_char_lcd_logical_to_physical_0_t12 <- inline_lcd_draw_char_lcd_logical_to_physical_0_col U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Ident(\"col\")", "Ident(\"col\")"] }
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t12 <- inline_lcd_draw_char_lcd_logical_to_physical_0_col U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Ident(\\\"col\\\")\", \"Ident(\\\"col\\\")\"] }", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_0_t6 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t7 Add inline_lcd_draw_char_lcd_logical_to_physical_0_t12
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))", "Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))"] }
# 90676 Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_0_t6 <- inline_lcd_draw_char_lcd_logical_to_physical_0_t7 Add inline_lcd_draw_char_lcd_logical_to_physical_0_t12\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\", \"Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))\"] }", opcode: Add8NoCarryIn, args: [Register(0x48), Register(0x47), Register(0x47)], resolved: None }
14 48 47 47 
# pos <- inline_lcd_draw_char_lcd_logical_to_physical_0_t6 U8
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_0_t6 U8\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# goto inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: ["Return { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical\n\tSourceContext { contexts: [\"Return { value: Some(Arithmetic(Add, Index(\\\"lcd_row_start\\\", Ident(\\\"row\\\")), Ident(\\\"col\\\"))) }\"] }", opcode: JmpImm, args: [Label24(inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical
# 	SourceContext { contexts: [] }
# inline_lcd_draw_char_lcd_logical_to_physical_0_function_end_lcd_logical_to_physical
# t3 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Number(U8, 8)", "Number(U8, 8)"] }
# 9067a Instruction { source: "t3 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x48), Constant8(0x08=8)], resolved: None }
04 48 08 
# t5 <- pos U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Ident(\"pos\")", "Ident(\"pos\")"] }
# optimized away noop copy Instruction { source: "t5 <- pos U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Ident(\\\"pos\\\")\", \"Ident(\\\"pos\\\")\"] }", opcode: Copy8, args: [Register(0x47), Register(0x47)], resolved: None }
# t6 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 9067d Instruction { source: "t6 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x50), Constant8(0x04=4)], resolved: None }
04 50 04 
# t4 <- t5 ShiftRight t6
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))"] }
# 90680 Instruction { source: "t4 <- t5 ShiftRight t6\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x50), Register(0x47), Register(0x50)], resolved: None }
1e 05 50 47 50 
# t2 <- t3 BitwiseOr t4
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))"] }
# 90685 Instruction { source: "t2 <- t3 BitwiseOr t4\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\\\"pos\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x48), Register(0x50), Register(0x48)], resolved: None }
1c 48 50 48 
# None <= call io_write1(t2,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })"] }
# 90689 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x48)], resolved: None }
69 48 
# t9 <- pos U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Ident(\"pos\")", "Ident(\"pos\")"] }
# 9068b Instruction { source: "t9 <- pos U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Ident(\\\"pos\\\")\", \"Ident(\\\"pos\\\")\"] }", opcode: Copy8, args: [Register(0x47), Register(0x48)], resolved: None }
0b 47 48 
# t10 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 9068e Instruction { source: "t10 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x0f=15)], resolved: None }
04 47 0f 
# t8 <- t9 BitwiseAnd t10
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))", "Arithmetic(And, Ident(\"pos\"), Number(U8, 15))"] }
# 90691 Instruction { source: "t8 <- t9 BitwiseAnd t10\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))] })\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"pos\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x48), Register(0x47), Register(0x47)], resolved: None }
1b 48 47 47 
# None <= call io_write1(t8,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })"] }
# 90695 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x47)], resolved: None }
69 47 
# t12 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 90697 Instruction { source: "t12 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x58), Constant32(0x00000002=2)], resolved: None }
20 58 02 00 00 00 
# None <= call delay(t12,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 9069d Instruction { source: "Arg0[x]=t12 None <= call delay(t12,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x58), Register(0x00)], resolved: None }
21 58 00 
# Registers used by this function: {70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 906a0 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 906a6 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c b0 06 09 00 
# 906ac Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 906b0 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t15 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 906b6 Instruction { source: "t15 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x80=128)], resolved: None }
04 47 80 
# t17 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t17 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x46), Register(0x46)], resolved: None }
# t18 <- 0n4/0x04u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Number(U8, 4)", "Number(U8, 4)"] }
# 906b9 Instruction { source: "t18 <- 0n4/0x04u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Number(U8, 4)\", \"Number(U8, 4)\"] }", opcode: LoadImm8, args: [Register(0x48), Constant8(0x04=4)], resolved: None }
04 48 04 
# t16 <- t17 ShiftRight t18
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))", "Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))"] }
# 906bc Instruction { source: "t16 <- t17 ShiftRight t18\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\", \"Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4))\"] }", opcode: Shift8, args: [Constant8(0x05=5), Register(0x48), Register(0x46), Register(0x48)], resolved: None }
1e 05 48 46 48 
# t14 <- t15 BitwiseOr t16
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))"] }
# 906c1 Instruction { source: "t14 <- t15 BitwiseOr t16\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\\\"ch\\\"), Number(U8, 4)))\"] }", opcode: Or8, args: [Register(0x47), Register(0x48), Register(0x47)], resolved: None }
1c 47 48 47 
# None <= call io_write1(t14,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })"] }
# 906c5 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x47)], resolved: None }
69 47 
# t21 <- 0n128/0x80u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Number(U8, 128)", "Number(U8, 128)"] }
# 906c7 Instruction { source: "t21 <- 0n128/0x80u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Number(U8, 128)\", \"Number(U8, 128)\"] }", opcode: LoadImm8, args: [Register(0x47), Constant8(0x80=128)], resolved: None }
04 47 80 
# t23 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t23 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x46), Register(0x46)], resolved: None }
# t24 <- 0n15/0x0fu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Number(U8, 15)", "Number(U8, 15)"] }
# 906ca Instruction { source: "t24 <- 0n15/0x0fu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Number(U8, 15)\", \"Number(U8, 15)\"] }", opcode: LoadImm8, args: [Register(0x48), Constant8(0x0f=15)], resolved: None }
04 48 0f 
# t22 <- t23 BitwiseAnd t24
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))", "Arithmetic(And, Ident(\"ch\"), Number(U8, 15))"] }
# 906cd Instruction { source: "t22 <- t23 BitwiseAnd t24\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\", \"Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15))\"] }", opcode: And8, args: [Register(0x46), Register(0x48), Register(0x46)], resolved: None }
1b 46 48 46 
# t20 <- t21 BitwiseOr t22
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))", "Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))"] }
# 906d1 Instruction { source: "t20 <- t21 BitwiseOr t22\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))] })\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\", \"Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\\\"ch\\\"), Number(U8, 15)))\"] }", opcode: Or8, args: [Register(0x47), Register(0x46), Register(0x46)], resolved: None }
1c 47 46 46 
# None <= call io_write1(t20,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })", "Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })"] }
# 906d5 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x46)], resolved: None }
69 46 
# t26 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 906d7 Instruction { source: "t26 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x5c), Constant32(0x00000002=2)], resolved: None }
20 5c 02 00 00 00 
# None <= call delay(t26,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 906dd Instruction { source: "Arg0[x]=t26 None <= call delay(t26,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x5c), Register(0x00)], resolved: None }
21 5c 00 
# Registers used by this function: {70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 906e0 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 906e6 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c f0 06 09 00 
# 906ec Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 906f0 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 906f6 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_draw_char
# 	SourceContext { contexts: [] }
# function_end_lcd_draw_char
# Unreachable
# 	SourceContext { contexts: [] }
# 906f8 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([96])
# Var lcd_current (Local lcd_current Number(U8) Reg(U8)) Reg(U8) Some([96])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Ident("i")) Reg(U8) Some([96])
# Var t1 (t1 Number(U8, 80)) Reg(U8) Some([97])
# Var t10 (t10 Number(U8, 3)) Reg(U8) Some([96])
# Var t11 (t11 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([96])
# Var t12 (t12 Number(USIZE, 1)) Reg(U32) Some([100, 101, 102, 103])
# Var t13 (t13 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([96])
# Var t14 (t14 Number(U8, 3)) Reg(U8) Some([96])
# Var t15 (t15 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([96])
# Var t16 (t16 Number(USIZE, 1)) Reg(U32) Some([100, 101, 102, 103])
# Var t17 (t17 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([96])
# Var t18 (t18 Number(U8, 3)) Reg(U8) Some([96])
# Var t19 (t19 Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([96])
# Var t2 (t2 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([104, 105, 106, 107])
# Var t20 (t20 Number(USIZE, 1)) Reg(U32) Some([100, 101, 102, 103])
# Var t21 (t21 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([96])
# Var t22 (t22 Number(U8, 2)) Reg(U8) Some([96])
# Var t23 (t23 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([96])
# Var t24 (t24 Number(USIZE, 2)) Reg(U32) Some([100, 101, 102, 103])
# Var t25 (t25 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([96])
# Var t26 (t26 Number(U8, 2)) Reg(U8) Some([96])
# Var t27 (t27 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([96])
# Var t28 (t28 Number(U8, 8)) Reg(U8) Some([96])
# Var t29 (t29 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([96])
# Var t3 (t3 Number(USIZE, 987148)) Reg(U32) Some([104, 105, 106, 107])
# Var t30 (t30 Number(USIZE, 2)) Reg(U32) Some([100, 101, 102, 103])
# Var t31 (t31 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([96])
# Var t32 (t32 Number(U8, 0)) Reg(U8) Some([96])
# Var t33 (t33 Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })) Reg(U8) Some([96])
# Var t34 (t34 Number(U8, 12)) Reg(U8) Some([96])
# Var t35 (t35 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([96])
# Var t36 (t36 Number(USIZE, 2)) Reg(U32) Some([100, 101, 102, 103])
# Var t37 (t37 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([96])
# Var t38 (t38 Number(U8, 0)) Reg(U8) Some([96])
# Var t39 (t39 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([96])
# Var t4 (t4 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([108, 109, 110, 111])
# Var t40 (t40 Number(U8, 1)) Reg(U8) Some([96])
# Var t41 (t41 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([96])
# Var t42 (t42 Number(USIZE, 2)) Reg(U32) Some([100, 101, 102, 103])
# Var t5 (t5 Ident("i")) Reg(U8) Some([96])
# Var t6 (t6 Number(U8, 32)) Reg(U8) Some([112])
# Var t7 (t7 Ident("i")) Reg(U8) Some([96])
# Var t8 (t8 Number(U8, 1)) Reg(U8) Some([97])
# Var t9 (t9 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([96])
# lcd_current <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)"] }
# 906fd Instruction { source: "lcd_current <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 90700 Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# :lcd_init_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_init_while_predicate_0
# t0 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t0 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x60), Register(0x60)], resolved: None }
# t1 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 90703 Instruction { source: "t1 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x50=80)], resolved: None }
04 61 50 
# if t0 < t1 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }"] }
# 90706 Instruction { source: "if t0 < t1 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0x61), Register(0x60)], resolved: None }
15 61 60 
# 90709 Instruction { source: "if t0 < t1 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_init_while_end_2)], resolved: None }
71 36 07 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t0 < t1 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_init_while_body_1
# t3 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 9070d Instruction { source: "t3 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x68), Constant32(0x000f100c=987148)], resolved: None }
20 68 0c 10 0f 00 
# t5 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t5 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x60), Register(0x60)], resolved: None }
# t4 U32 <- t5 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 90713 Instruction { source: "Zero-pad for t4 U32 <- t5 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x6c), Constant32(0x00000000=0)], resolved: None }
20 6c 00 00 00 00 
# 90719 Instruction { source: "t4 U32 <- t5 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x60), Register(0x6c)], resolved: None }
0b 60 6c 
# t2 <- t3 Add t4
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 9071c Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: Copy32, args: [Register(0x6c), Register(0x68)], resolved: None }
21 6c 68 
# 9071f Instruction { source: "t2 <- t3 Add t4\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x68), Constant32(0x000f100c=987148)], resolved: None }
32 68 0c 10 0f 00 
# t6 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 90725 Instruction { source: "t6 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x70), Constant8(0x20=32)], resolved: None }
04 70 20 
# mem[t2] <- t6 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }"] }
# 90728 Instruction { source: "mem[t2] <- t6 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0x70), Register(0x68)], resolved: None }
06 70 68 
# t7 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t7 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x60), Register(0x60)], resolved: None }
# t8 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 9072b Instruction { source: "t8 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x61), Constant8(0x01=1)], resolved: None }
04 61 01 
# i <- t7 Add t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 9072e Instruction { source: "i <- t7 Add t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x60), Register(0x61), Register(0x60)], resolved: None }
14 60 61 60 
# goto lcd_init_while_predicate_0
# 	SourceContext { contexts: [] }
# 90732 Instruction { source: "goto lcd_init_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_init_while_predicate_0)], resolved: None }
70 03 07 09 
# :lcd_init_while_end_2
# 	SourceContext { contexts: [] }
# lcd_init_while_end_2
# t10 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 90736 Instruction { source: "t10 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x03=3)], resolved: None }
04 60 03 
# None <= call io_write1(t10,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 90739 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t12 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 9073b Instruction { source: "t12 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000001=1)], resolved: None }
20 64 01 00 00 00 
# None <= call delay(t12,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 90741 Instruction { source: "Arg0[x]=t12 None <= call delay(t12,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x00)], resolved: None }
21 64 00 
# Registers used by this function: {96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 90744 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 9074a Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 54 07 09 00 
# 90750 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 90754 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t14 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 9075a Instruction { source: "t14 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x03=3)], resolved: None }
04 60 03 
# None <= call io_write1(t14,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 9075d Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t16 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 9075f Instruction { source: "t16 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000001=1)], resolved: None }
20 64 01 00 00 00 
# None <= call delay(t16,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 90765 Instruction { source: "Arg0[x]=t16 None <= call delay(t16,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x00)], resolved: None }
21 64 00 
# Registers used by this function: {96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 90768 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 9076e Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 78 07 09 00 
# 90774 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 90778 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t18 <- 0n3/0x03u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Number(U8, 3)", "Number(U8, 3)"] }
# 9077e Instruction { source: "t18 <- 0n3/0x03u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 3)] })\", \"Number(U8, 3)\", \"Number(U8, 3)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x03=3)], resolved: None }
04 60 03 
# None <= call io_write1(t18,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 3)] })"] }
# 90781 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t20 <- 0n1/0x00000001u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Number(USIZE, 1)", "Number(USIZE, 1)"] }
# 90783 Instruction { source: "t20 <- 0n1/0x00000001u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Number(USIZE, 1)\", \"Number(USIZE, 1)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000001=1)], resolved: None }
20 64 01 00 00 00 
# None <= call delay(t20,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 1)] })"] }
# 90789 Instruction { source: "Arg0[x]=t20 None <= call delay(t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 1)] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x00)], resolved: None }
21 64 00 
# Registers used by this function: {96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 9078c Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90792 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 9c 07 09 00 
# 90798 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 9079c Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t22 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 907a2 Instruction { source: "t22 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x02=2)], resolved: None }
04 60 02 
# None <= call io_write1(t22,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 907a5 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t24 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 907a7 Instruction { source: "t24 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000002=2)], resolved: None }
20 64 02 00 00 00 
# None <= call delay(t24,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 907ad Instruction { source: "Arg0[x]=t24 None <= call delay(t24,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x00)], resolved: None }
21 64 00 
# Registers used by this function: {96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 907b0 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 907b6 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c c0 07 09 00 
# 907bc Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 907c0 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t26 <- 0n2/0x02u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Number(U8, 2)", "Number(U8, 2)"] }
# 907c6 Instruction { source: "t26 <- 0n2/0x02u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 2)] })\", \"Number(U8, 2)\", \"Number(U8, 2)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x02=2)], resolved: None }
04 60 02 
# None <= call io_write1(t26,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 2)] })"] }
# 907c9 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t28 <- 0n8/0x08u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Number(U8, 8)", "Number(U8, 8)"] }
# 907cb Instruction { source: "t28 <- 0n8/0x08u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 8)] })\", \"Number(U8, 8)\", \"Number(U8, 8)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x08=8)], resolved: None }
04 60 08 
# None <= call io_write1(t28,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 8)] })"] }
# 907ce Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t30 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 907d0 Instruction { source: "t30 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000002=2)], resolved: None }
20 64 02 00 00 00 
# None <= call delay(t30,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 907d6 Instruction { source: "Arg0[x]=t30 None <= call delay(t30,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x00)], resolved: None }
21 64 00 
# Registers used by this function: {96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 907d9 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 907df Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c e9 07 09 00 
# 907e5 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 907e9 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t32 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 907ef Instruction { source: "t32 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# None <= call io_write1(t32,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 907f2 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t34 <- 0n12/0x0cu8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Number(U8, 12)", "Number(U8, 12)"] }
# 907f4 Instruction { source: "t34 <- 0n12/0x0cu8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 12)] })\", \"Number(U8, 12)\", \"Number(U8, 12)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x0c=12)], resolved: None }
04 60 0c 
# None <= call io_write1(t34,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 12)] })"] }
# 907f7 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t36 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 907f9 Instruction { source: "t36 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000002=2)], resolved: None }
20 64 02 00 00 00 
# None <= call delay(t36,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 907ff Instruction { source: "Arg0[x]=t36 None <= call delay(t36,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x00)], resolved: None }
21 64 00 
# Registers used by this function: {96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 90802 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90808 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 12 08 09 00 
# 9080e Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 90812 Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t38 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Number(U8, 0)", "Number(U8, 0)"] }
# 90818 Instruction { source: "t38 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 0)] })\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x00=0)], resolved: None }
04 60 00 
# None <= call io_write1(t38,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 0)] })"] }
# 9081b Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t40 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Number(U8, 1)", "Number(U8, 1)"] }
# 9081d Instruction { source: "t40 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] }) }\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Call(Call { function: \\\"io_write1\\\", parameters: [Number(U8, 1)] })\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x60), Constant8(0x01=1)], resolved: None }
04 60 01 
# None <= call io_write1(t40,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] }) }", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })", "Call(Call { function: \"io_write1\", parameters: [Number(U8, 1)] })"] }
# 90820 Instruction { source: "IoWrite1", opcode: Out1, args: [Register(0x60)], resolved: None }
69 60 
# t42 <- 0n2/0x00000002u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Number(USIZE, 2)", "Number(USIZE, 2)"] }
# 90822 Instruction { source: "t42 <- 0n2/0x00000002u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Number(USIZE, 2)\", \"Number(USIZE, 2)\"] }", opcode: LoadImm32, args: [Register(0x64), Constant32(0x00000002=2)], resolved: None }
20 64 02 00 00 00 
# None <= call delay(t42,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] }) }", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })", "Call(Call { function: \"delay\", parameters: [Number(USIZE, 2)] })"] }
# 90828 Instruction { source: "Arg0[x]=t42 None <= call delay(t42,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] }) }\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\", \"Call(Call { function: \\\"delay\\\", parameters: [Number(USIZE, 2)] })\"] }", opcode: Copy32, args: [Register(0x64), Register(0x00)], resolved: None }
21 64 00 
# Registers used by this function: {96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67}
# Registers to save: []
# 9082b Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90831 Instruction { source: "PseudoCall(Label24(:delay))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 3b 08 09 00 
# 90837 Instruction { source: "PseudoCall(Label24(:delay))", opcode: JmpImm, args: [Label24(:delay)], resolved: None }
70 11 06 09 
# 9083b Instruction { source: "PseudoCall(Label24(:delay))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 90841 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_init
# 	SourceContext { contexts: [] }
# function_end_lcd_init
# Unreachable
# 	SourceContext { contexts: [] }
# 90843 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_putc
# Ret None
# Arg0=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([113])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([113])
# Var t0 (t0 Ident("ch")) Reg(U8) Some([113])
# Var t1 (t1 Number(U8, 10)) Reg(U8) Some([114])
# Var t10 (static "lcd_current") Reg(U32) Some([116, 117, 118, 119])
# Var t11 (t11 Ident("next")) Reg(U8) Some([113])
# Var t12 (t12 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([116, 117, 118, 119])
# Var t13 (t13 Number(USIZE, 987148)) Reg(U32) Some([116, 117, 118, 119])
# Var t14 (t14 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([120, 121, 122, 123])
# Var t15 (t15 Ident("lcd_current")) Reg(U8) Some([124])
# Var t16 (static "lcd_current") Reg(U32) Some([120, 121, 122, 123])
# Var t17 (t17 Number(U8, 32)) Reg(U8) Some([124])
# Var t18 (static "lcd_current") Reg(U32) Some([116, 117, 118, 119])
# Var t19 (t19 Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))) Reg(U8) Some([124])
# Var t2 (t2 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))) Reg(U8) Some([113])
# Var t20 (t20 Ident("lcd_current")) Reg(U8) Some([124])
# Var t21 (static "lcd_current") Reg(U32) Some([120, 121, 122, 123])
# Var t22 (t22 Number(U8, 1)) Reg(U8) Some([125])
# Var t23 (t23 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([116, 117, 118, 119])
# Var t24 (t24 Number(USIZE, 987148)) Reg(U32) Some([116, 117, 118, 119])
# Var t25 (t25 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([120, 121, 122, 123])
# Var t26 (t26 Ident("lcd_current")) Reg(U8) Some([124])
# Var t27 (static "lcd_current") Reg(U32) Some([120, 121, 122, 123])
# Var t28 (t28 Ident("ch")) Reg(U8) Some([113])
# Var t29 (t29 Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })) Reg(U8) Some([113])
# Var t3 (t3 Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([113])
# Var t30 (t30 Ident("lcd_current")) Reg(U8) Some([114])
# Var t31 (static "lcd_current") Reg(U32) Some([116, 117, 118, 119])
# Var t32 (t32 Ident("ch")) Reg(U8) Some([113])
# Var t33 (static "lcd_current") Reg(U32) Some([128, 129, 130, 131])
# Var t34 (t34 Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))) Reg(U8) Some([114])
# Var t35 (t35 Ident("lcd_current")) Reg(U8) Some([114])
# Var t36 (static "lcd_current") Reg(U32) Some([116, 117, 118, 119])
# Var t37 (t37 Number(U8, 1)) Reg(U8) Some([124])
# Var t38 (t38 Ident("lcd_current")) Reg(U8) Some([113])
# Var t39 (static "lcd_current") Reg(U32) Some([128, 129, 130, 131])
# Var t4 (t4 Ident("lcd_current")) Reg(U8) Some([113])
# Var t40 (t40 Number(U8, 80)) Reg(U8) Some([114])
# Var t41 (t41 Call(Call { function: "lcd_scroll_up", parameters: [] })) Reg(U8) Some([113])
# Var t5 (static "lcd_current") Reg(U32) Some([128, 129, 130, 131])
# Var t6 (t6 Number(U8, 20)) Reg(U8) Some([114])
# Var t7 (t7 Number(U8, 1)) Reg(U8) Some([114])
# Var t8 (t8 Number(U8, 20)) Reg(U8) Some([114])
# Var t9 (t9 Ident("lcd_current")) Reg(U8) Some([114])
# 90848 Instruction { source: "Save function parameter 'ch' registers [0] to locals [113].", opcode: Copy8, args: [Register(0x00), Register(0x71)], resolved: None }
0b 00 71 
# t0 <- ch U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t0 <- ch U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x71), Register(0x71)], resolved: None }
# t1 <- 0n10/0x0au8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }", "Number(U8, 10)", "Number(U8, 10)"] }
# 9084b Instruction { source: "t1 <- 0n10/0x0au8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\", \"Number(U8, 10)\", \"Number(U8, 10)\"] }", opcode: LoadImm8, args: [Register(0x72), Constant8(0x0a=10)], resolved: None }
04 72 0a 
# if t0 == t1 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }"] }
# 9084e Instruction { source: "if t0 == t1 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: Cmp8, args: [Register(0x71), Register(0x72)], resolved: None }
15 71 72 
# 90851 Instruction { source: "if t0 == t1 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JzImm, args: [Label24(lcd_putc_if_true_0_1)], resolved: None }
72 59 08 09 
# 90855 Instruction { source: "if t0 == t1 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }, [Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 10) }\"] }", opcode: JmpImm, args: [Label24(lcd_putc_if_else_0_2)], resolved: None }
70 cf 08 09 
# :lcd_putc_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }"] }
# lcd_putc_if_true_0_1
# t5 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 90859 Instruction { source: "t5 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x000f1008=987144)], resolved: None }
20 80 08 10 0f 00 
# t4 <- mem[t5] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 9085f Instruction { source: "t4 <- mem[t5] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x80), Register(0x71)], resolved: None }
05 80 71 
# t6 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 90862 Instruction { source: "t6 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x72), Constant8(0x14=20)], resolved: None }
04 72 14 
# t3 <- t4 Divide t6
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20))"] }
# 90865 Instruction { source: "t3 <- t4 Divide t6\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Divide8, args: [Register(0x71), Register(0x72), Register(0x71)], resolved: None }
17 71 72 71 
# t7 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 90869 Instruction { source: "t7 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x72), Constant8(0x01=1)], resolved: None }
04 72 01 
# t2 <- t3 Add t7
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))", "Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1))"] }
# 9086c Instruction { source: "t2 <- t3 Add t7\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\", \"Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x71), Register(0x72), Register(0x71)], resolved: None }
14 71 72 71 
# t8 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 90870 Instruction { source: "t8 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x72), Constant8(0x14=20)], resolved: None }
04 72 14 
# next <- t2 Multiply t8
# 	SourceContext { contexts: ["Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }", "Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))"] }
# 90873 Instruction { source: "next <- t2 Multiply t8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"next\\\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }\", \"Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\\\"lcd_current\\\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))\"] }", opcode: Mul8_8, args: [Register(0x71), Register(0x72), Register(0x71)], resolved: None }
10 71 72 71 
# :lcd_putc_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }"] }
# lcd_putc_while_predicate_3
# t10 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 90877 Instruction { source: "t10 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x74), Constant32(0x000f1008=987144)], resolved: None }
20 74 08 10 0f 00 
# t9 <- mem[t10] U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 9087d Instruction { source: "t9 <- mem[t10] U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x74), Register(0x72)], resolved: None }
05 74 72 
# t11 <- next U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }", "Ident(\"next\")", "Ident(\"next\")"] }
# optimized away noop copy Instruction { source: "t11 <- next U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\", \"Ident(\\\"next\\\")\", \"Ident(\\\"next\\\")\"] }", opcode: Copy8, args: [Register(0x71), Register(0x71)], resolved: None }
# if t9 < t11 then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }"] }
# 90880 Instruction { source: "if t9 < t11 then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: Cmp8, args: [Register(0x71), Register(0x72)], resolved: None }
15 71 72 
# 90883 Instruction { source: "if t9 < t11 then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: JcImm, args: [Label24(lcd_putc_while_end_5)], resolved: None }
71 cb 08 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t9 < t11 then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"lcd_current\\\"), right: Ident(\\\"next\\\") }\"] }", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }"] }
# lcd_putc_while_body_4
# t13 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 90887 Instruction { source: "t13 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x74), Constant32(0x000f100c=987148)], resolved: None }
20 74 0c 10 0f 00 
# t16 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 9088d Instruction { source: "t16 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x78), Constant32(0x000f1008=987144)], resolved: None }
20 78 08 10 0f 00 
# t15 <- mem[t16] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 90893 Instruction { source: "t15 <- mem[t16] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x78), Register(0x7c)], resolved: None }
05 78 7c 
# t14 U32 <- t15 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }"] }
# 90896 Instruction { source: "Zero-pad for t14 U32 <- t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: LoadImm32, args: [Register(0x78), Constant32(0x00000000=0)], resolved: None }
20 78 00 00 00 00 
# 9089c Instruction { source: "t14 U32 <- t15 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x78)], resolved: None }
0b 7c 78 
# t12 <- t13 Add t14
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })"] }
# 9089f Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: Copy32, args: [Register(0x78), Register(0x74)], resolved: None }
21 78 74 
# 908a2 Instruction { source: "t12 <- t13 Add t14\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x74), Constant32(0x000f100c=987148)], resolved: None }
32 74 0c 10 0f 00 
# t17 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 908a8 Instruction { source: "t17 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x7c), Constant8(0x20=32)], resolved: None }
04 7c 20 
# mem[t12] <- t17 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }"] }
# 908ab Instruction { source: "mem[t12] <- t17 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0x7c), Register(0x74)], resolved: None }
06 7c 74 
# t18 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 908ae Instruction { source: "t18 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x74), Constant32(0x000f1008=987144)], resolved: None }
20 74 08 10 0f 00 
# t21 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 908b4 Instruction { source: "t21 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x78), Constant32(0x000f1008=987144)], resolved: None }
20 78 08 10 0f 00 
# t20 <- mem[t21] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 908ba Instruction { source: "t20 <- mem[t21] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x78), Register(0x7c)], resolved: None }
05 78 7c 
# t22 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 908bd Instruction { source: "t22 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x7d), Constant8(0x01=1)], resolved: None }
04 7d 01 
# t19 <- t20 Add t22
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))"] }
# 908c0 Instruction { source: "t19 <- t20 Add t22\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x7c), Register(0x7d), Register(0x7c)], resolved: None }
14 7c 7d 7c 
# mem[t18] <- t19 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 908c4 Instruction { source: "mem[t18] <- t19 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x7c), Register(0x74)], resolved: None }
06 7c 74 
# goto lcd_putc_while_predicate_3
# 	SourceContext { contexts: [] }
# 908c7 Instruction { source: "goto lcd_putc_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_putc_while_predicate_3)], resolved: None }
70 77 08 09 
# :lcd_putc_while_end_5
# 	SourceContext { contexts: [] }
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0
# 	SourceContext { contexts: [] }
# 908cb Instruction { source: "goto lcd_putc_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_putc_if_end_0)], resolved: None }
70 31 09 09 
# :lcd_putc_if_else_0_2
# 	SourceContext { contexts: [] }
# lcd_putc_if_else_0_2
# t24 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 908cf Instruction { source: "t24 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x74), Constant32(0x000f100c=987148)], resolved: None }
20 74 0c 10 0f 00 
# t27 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 908d5 Instruction { source: "t27 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x78), Constant32(0x000f1008=987144)], resolved: None }
20 78 08 10 0f 00 
# t26 <- mem[t27] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 908db Instruction { source: "t26 <- mem[t27] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x78), Register(0x7c)], resolved: None }
05 78 7c 
# t25 U32 <- t26 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }"] }
# 908de Instruction { source: "Zero-pad for t25 U32 <- t26 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: LoadImm32, args: [Register(0x78), Constant32(0x00000000=0)], resolved: None }
20 78 00 00 00 00 
# 908e4 Instruction { source: "t25 U32 <- t26 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }\"] }", opcode: Copy8, args: [Register(0x7c), Register(0x78)], resolved: None }
0b 7c 78 
# t23 <- t24 Add t25
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"lcd_current\") })"] }
# 908e7 Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: Copy32, args: [Register(0x78), Register(0x74)], resolved: None }
21 78 74 
# 908ea Instruction { source: "t23 <- t24 Add t25\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"lcd_current\\\") })\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x74), Constant32(0x000f100c=987148)], resolved: None }
32 74 0c 10 0f 00 
# t28 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t28 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x71), Register(0x71)], resolved: None }
# mem[t23] <- t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }"] }
# 908f0 Instruction { source: "mem[t23] <- t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"lcd_current\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x71), Register(0x74)], resolved: None }
06 71 74 
# t31 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 908f3 Instruction { source: "t31 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x74), Constant32(0x000f1008=987144)], resolved: None }
20 74 08 10 0f 00 
# t30 <- mem[t31] U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 908f9 Instruction { source: "t30 <- mem[t31] U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x74), Register(0x72)], resolved: None }
05 74 72 
# t32 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t32 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x71), Register(0x71)], resolved: None }
# None <= call lcd_draw_char(t30,t32,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })"] }
# 908fc Instruction { source: "Arg0[i]=t30 None <= call lcd_draw_char(t30,t32,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x72), Register(0x00)], resolved: None }
0b 72 00 
# 908ff Instruction { source: "Arg1[ch]=t32 None <= call lcd_draw_char(t30,t32,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"lcd_current\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x71), Register(0x04)], resolved: None }
0b 71 04 
# Registers used by this function: {113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95}
# Registers to save: []
# 90902 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90908 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 12 09 09 00 
# 9090e Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: JmpImm, args: [Label24(:lcd_draw_char)], resolved: None }
70 41 06 09 
# 90912 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t33 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 90918 Instruction { source: "t33 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x000f1008=987144)], resolved: None }
20 80 08 10 0f 00 
# t36 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 9091e Instruction { source: "t36 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x74), Constant32(0x000f1008=987144)], resolved: None }
20 74 08 10 0f 00 
# t35 <- mem[t36] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 90924 Instruction { source: "t35 <- mem[t36] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x74), Register(0x72)], resolved: None }
05 74 72 
# t37 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 90927 Instruction { source: "t37 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x7c), Constant8(0x01=1)], resolved: None }
04 7c 01 
# t34 <- t35 Add t37
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))", "Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1))"] }
# 9092a Instruction { source: "t34 <- t35 Add t37\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\", \"Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x72), Register(0x7c), Register(0x72)], resolved: None }
14 72 7c 72 
# mem[t33] <- t34 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }"] }
# 9092e Instruction { source: "mem[t33] <- t34 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"lcd_current\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x72), Register(0x80)], resolved: None }
06 72 80 
# :lcd_putc_if_end_0
# 	SourceContext { contexts: [] }
# lcd_putc_if_end_0
# t39 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 90931 Instruction { source: "t39 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x80), Constant32(0x000f1008=987144)], resolved: None }
20 80 08 10 0f 00 
# t38 <- mem[t39] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 90937 Instruction { source: "t38 <- mem[t39] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x80), Register(0x71)], resolved: None }
05 80 71 
# t40 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 9093a Instruction { source: "t40 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x72), Constant8(0x50=80)], resolved: None }
04 72 50 
# if t38 >= t40 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }", "Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }"] }
# 9093d Instruction { source: "if t38 >= t40 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0x72), Register(0x71)], resolved: None }
15 72 71 
# 90940 Instruction { source: "if t38 >= t40 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_putc_if_true_0_7)], resolved: None }
71 48 09 09 
# 90944 Instruction { source: "if t38 >= t40 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \\\"lcd_scroll_up\\\", parameters: [] }) }])], else_block: [] }\", \"Comparison { op: GreaterThanOrEqual, left: Ident(\\\"lcd_current\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_putc_if_else_0_8)], resolved: None }
70 62 09 09 
# :lcd_putc_if_true_0_7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"lcd_current\"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }])], else_block: [] }"] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_scroll_up\", parameters: [] }) }", "Call(Call { function: \"lcd_scroll_up\", parameters: [] })", "Call(Call { function: \"lcd_scroll_up\", parameters: [] })"] }
# Registers used by this function: {113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 132, 133, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 90948 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 9094e Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 58 09 09 00 
# 90954 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: JmpImm, args: [Label24(:lcd_scroll_up)], resolved: None }
70 69 09 09 
# 90958 Instruction { source: "PseudoCall(Label24(:lcd_scroll_up))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto lcd_putc_if_end_6
# 	SourceContext { contexts: [] }
# 9095e Instruction { source: "goto lcd_putc_if_end_6\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_putc_if_end_6)], resolved: None }
70 62 09 09 
# :lcd_putc_if_else_0_8
# 	SourceContext { contexts: [] }
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6
# 	SourceContext { contexts: [] }
# lcd_putc_if_end_6
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 90962 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_putc
# 	SourceContext { contexts: [] }
# function_end_lcd_putc
# Unreachable
# 	SourceContext { contexts: [] }
# 90964 Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :lcd_scroll_up
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([132])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([133])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "lcd_current") Reg(U32) Some([136, 137, 138, 139])
# Var t1 (t1 Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([133])
# Var t10 (t10 Arithmetic(Add, Ident("i"), Number(U8, 20))) Reg(U8) Some([132])
# Var t11 (t11 Ident("i")) Reg(U8) Some([132])
# Var t12 (t12 Number(U8, 20)) Reg(U8) Some([140])
# Var t13 (t13 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([144, 145, 146, 147])
# Var t14 (t14 Number(USIZE, 987148)) Reg(U32) Some([144, 145, 146, 147])
# Var t15 (t15 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([148, 149, 150, 151])
# Var t16 (t16 Ident("i")) Reg(U8) Some([133])
# Var t17 (t17 Ident("ch")) Reg(U8) Some([132])
# Var t18 (t18 Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })) Reg(U8) Some([132])
# Var t19 (t19 Ident("i")) Reg(U8) Some([133])
# Var t2 (t2 Ident("lcd_current")) Reg(U8) Some([133])
# Var t20 (t20 Ident("ch")) Reg(U8) Some([132])
# Var t21 (t21 Ident("i")) Reg(U8) Some([132])
# Var t22 (t22 Number(U8, 1)) Reg(U8) Some([133])
# Var t23 (t23 Ident("i")) Reg(U8) Some([132])
# Var t24 (t24 Number(U8, 80)) Reg(U8) Some([140])
# Var t25 (t25 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([136, 137, 138, 139])
# Var t26 (t26 Number(USIZE, 987148)) Reg(U32) Some([136, 137, 138, 139])
# Var t27 (t27 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([144, 145, 146, 147])
# Var t28 (t28 Ident("i")) Reg(U8) Some([133])
# Var t29 (t29 Number(U8, 32)) Reg(U8) Some([140])
# Var t3 (static "lcd_current") Reg(U32) Some([152, 153, 154, 155])
# Var t30 (t30 Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })) Reg(U8) Some([132])
# Var t31 (t31 Ident("i")) Reg(U8) Some([132])
# Var t32 (t32 Number(U8, 32)) Reg(U8) Some([140])
# Var t33 (t33 Ident("i")) Reg(U8) Some([132])
# Var t34 (t34 Number(U8, 1)) Reg(U8) Some([133])
# Var t4 (t4 Number(U8, 20)) Reg(U8) Some([140])
# Var t5 (t5 Ident("i")) Reg(U8) Some([132])
# Var t6 (t6 Number(U8, 60)) Reg(U8) Some([140])
# Var t7 (t7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }) Reg(U32) Some([136, 137, 138, 139])
# Var t8 (t8 Number(USIZE, 987148)) Reg(U32) Some([148, 149, 150, 151])
# Var t9 (t9 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) Reg(U32) Some([136, 137, 138, 139])
# t0 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }"] }
# 90969 Instruction { source: "t0 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x000f1008=987144)], resolved: None }
20 88 08 10 0f 00 
# t3 <- 0n987144/0x000f1008u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 9096f Instruction { source: "t3 <- 0n987144/0x000f1008u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: LoadImm32, args: [Register(0x98), Constant32(0x000f1008=987144)], resolved: None }
20 98 08 10 0f 00 
# t2 <- mem[t3] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Ident(\"lcd_current\")", "Ident(\"lcd_current\")"] }
# 90975 Instruction { source: "t2 <- mem[t3] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Ident(\\\"lcd_current\\\")\", \"Ident(\\\"lcd_current\\\")\"] }", opcode: Load8, args: [Register(0x98), Register(0x85)], resolved: None }
05 98 85 
# t4 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 90978 Instruction { source: "t4 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x8c), Constant8(0x14=20)], resolved: None }
04 8c 14 
# t1 <- t2 Subtract t4
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))", "Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20))"] }
# 9097b Instruction { source: "t1 <- t2 Subtract t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x00)], resolved: None }
0b 8c 00 
# 9097e Instruction { source: "t1 <- t2 Subtract t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Negate8, args: [Register(0x00)], resolved: None }
02 00 
# 90980 Instruction { source: "t1 <- t2 Subtract t4\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\", \"Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20))\"] }", opcode: Add8NoCarryIn, args: [Register(0x85), Register(0x00), Register(0x85)], resolved: None }
14 85 00 85 
# mem[t0] <- t1 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Subtract, Ident(\"lcd_current\"), Number(U8, 20)) }"] }
# 90984 Instruction { source: "mem[t0] <- t1 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"lcd_current\\\"), var_type: None, value: Arithmetic(Subtract, Ident(\\\"lcd_current\\\"), Number(U8, 20)) }\"] }", opcode: Store8, args: [Register(0x85), Register(0x88)], resolved: None }
06 85 88 
# i <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 90987 Instruction { source: "i <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x85), Constant8(0x00=0)], resolved: None }
04 85 00 
# :lcd_scroll_up_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_predicate_0
# t5 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }", "Ident(\"i\")", "Ident(\"i\")"] }
# 9098a Instruction { source: "t5 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x84)], resolved: None }
0b 85 84 
# t6 <- 0n60/0x3cu8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }", "Number(U8, 60)", "Number(U8, 60)"] }
# 9098d Instruction { source: "t6 <- 0n60/0x3cu8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\", \"Number(U8, 60)\", \"Number(U8, 60)\"] }", opcode: LoadImm8, args: [Register(0x8c), Constant8(0x3c=60)], resolved: None }
04 8c 3c 
# if t5 < t6 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }"] }
# 90990 Instruction { source: "if t5 < t6 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: Cmp8, args: [Register(0x8c), Register(0x84)], resolved: None }
15 8c 84 
# 90993 Instruction { source: "if t5 < t6 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: JcImm, args: [Label24(lcd_scroll_up_while_end_2)], resolved: None }
71 fe 09 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5 < t6 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }, Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 60) }\"] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_body_1
# t8 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 90997 Instruction { source: "t8 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x000f100c=987148)], resolved: None }
20 94 0c 10 0f 00 
# t11 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Ident(\"i\")", "Ident(\"i\")"] }
# 9099d Instruction { source: "t11 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x84)], resolved: None }
0b 85 84 
# t12 <- 0n20/0x14u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Number(U8, 20)", "Number(U8, 20)"] }
# 909a0 Instruction { source: "t12 <- 0n20/0x14u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Number(U8, 20)\", \"Number(U8, 20)\"] }", opcode: LoadImm8, args: [Register(0x8c), Constant8(0x14=20)], resolved: None }
04 8c 14 
# t10 <- t11 Add t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))", "Arithmetic(Add, Ident(\"i\"), Number(U8, 20))"] }
# 909a3 Instruction { source: "t10 <- t11 Add t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))\"] }", opcode: Add8NoCarryIn, args: [Register(0x84), Register(0x8c), Register(0x84)], resolved: None }
14 84 8c 84 
# t9 U32 <- t10 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }"] }
# 909a7 Instruction { source: "Zero-pad for t9 U32 <- t10 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x00000000=0)], resolved: None }
20 88 00 00 00 00 
# 909ad Instruction { source: "t9 U32 <- t10 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }\"] }", opcode: Copy8, args: [Register(0x84), Register(0x88)], resolved: None }
0b 84 88 
# t7 <- t8 Add t9
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })"] }
# optimized away noop copy Instruction { source: "t7 <- t8 Add t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\"] }", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# 909b0 Instruction { source: "t7 <- t8 Add t9\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)) })\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x88), Constant32(0x000f100c=987148)], resolved: None }
32 88 0c 10 0f 00 
# ch <- mem[t7] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }", "Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))"] }
# 909b6 Instruction { source: "ch <- mem[t7] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20))) }\", \"Index(\\\"lcd_display\\\", Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 20)))\"] }", opcode: Load8, args: [Register(0x88), Register(0x84)], resolved: None }
05 88 84 
# t14 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 909b9 Instruction { source: "t14 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x90), Constant32(0x000f100c=987148)], resolved: None }
20 90 0c 10 0f 00 
# t16 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t16 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# t15 U32 <- t16 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 909bf Instruction { source: "Zero-pad for t15 U32 <- t16 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x94), Constant32(0x00000000=0)], resolved: None }
20 94 00 00 00 00 
# 909c5 Instruction { source: "t15 U32 <- t16 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x85), Register(0x94)], resolved: None }
0b 85 94 
# t13 <- t14 Add t15
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 909c8 Instruction { source: "t13 <- t14 Add t15\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: Copy32, args: [Register(0x94), Register(0x90)], resolved: None }
21 94 90 
# 909cb Instruction { source: "t13 <- t14 Add t15\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x90), Constant32(0x000f100c=987148)], resolved: None }
32 90 0c 10 0f 00 
# t17 <- ch U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t17 <- ch U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# mem[t13] <- t17 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }"] }
# 909d1 Instruction { source: "mem[t13] <- t17 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Ident(\\\"ch\\\") }\"] }", opcode: Store8, args: [Register(0x84), Register(0x90)], resolved: None }
06 84 90 
# t19 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t19 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# t20 <- ch U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "t20 <- ch U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# None <= call lcd_draw_char(t19,t20,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })"] }
# 909d4 Instruction { source: "Arg0[i]=t19 None <= call lcd_draw_char(t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x85), Register(0x00)], resolved: None }
0b 85 00 
# 909d7 Instruction { source: "Arg1[ch]=t20 None <= call lcd_draw_char(t19,t20,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Ident(\\\"ch\\\")] })\"] }", opcode: Copy8, args: [Register(0x84), Register(0x04)], resolved: None }
0b 84 04 
# Registers used by this function: {132, 133, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95}
# Registers to save: []
# 909da Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 909e0 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c ea 09 09 00 
# 909e6 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: JmpImm, args: [Label24(:lcd_draw_char)], resolved: None }
70 41 06 09 
# 909ea Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t21 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# 909f0 Instruction { source: "t21 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x84)], resolved: None }
0b 85 84 
# t22 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 909f3 Instruction { source: "t22 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x85), Constant8(0x01=1)], resolved: None }
04 85 01 
# i <- t21 Add t22
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 909f6 Instruction { source: "i <- t21 Add t22\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x84), Register(0x85), Register(0x85)], resolved: None }
14 84 85 85 
# goto lcd_scroll_up_while_predicate_0
# 	SourceContext { contexts: [] }
# 909fa Instruction { source: "goto lcd_scroll_up_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_predicate_0)], resolved: None }
70 8a 09 09 
# :lcd_scroll_up_while_end_2
# 	SourceContext { contexts: [] }
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_3
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_predicate_3
# t23 <- i U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Ident(\"i\")", "Ident(\"i\")"] }
# 909fe Instruction { source: "t23 <- i U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x84)], resolved: None }
0b 85 84 
# t24 <- 0n80/0x50u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }", "Number(U8, 80)", "Number(U8, 80)"] }
# 90a01 Instruction { source: "t24 <- 0n80/0x50u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\", \"Number(U8, 80)\", \"Number(U8, 80)\"] }", opcode: LoadImm8, args: [Register(0x8c), Constant8(0x50=80)], resolved: None }
04 8c 50 
# if t23 < t24 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }", "Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }"] }
# 90a04 Instruction { source: "if t23 < t24 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: Cmp8, args: [Register(0x8c), Register(0x84)], resolved: None }
15 8c 84 
# 90a07 Instruction { source: "if t23 < t24 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JcImm, args: [Label24(lcd_scroll_up_while_end_5)], resolved: None }
71 59 0a 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t23 < t24 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }, Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }] }\", \"Comparison { op: LessThan, left: Ident(\\\"i\\\"), right: Number(U8, 80) }\"] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_4)], resolved: None }
# :lcd_scroll_up_while_body_4
# 	SourceContext { contexts: ["While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }"] }
# lcd_scroll_up_while_body_4
# t26 <- 0n987148/0x000f100cu32 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Number(USIZE, 987148)", "Number(USIZE, 987148)"] }
# 90a0b Instruction { source: "t26 <- 0n987148/0x000f100cu32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Number(USIZE, 987148)\", \"Number(USIZE, 987148)\"] }", opcode: LoadImm32, args: [Register(0x88), Constant32(0x000f100c=987148)], resolved: None }
20 88 0c 10 0f 00 
# t28 <- i U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Ident(\"i\")", "Ident(\"i\")"] }
# optimized away noop copy Instruction { source: "t28 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# t27 U32 <- t28 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }"] }
# 90a11 Instruction { source: "Zero-pad for t27 U32 <- t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: LoadImm32, args: [Register(0x90), Constant32(0x00000000=0)], resolved: None }
20 90 00 00 00 00 
# 90a17 Instruction { source: "t27 U32 <- t28 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }\"] }", opcode: Copy8, args: [Register(0x85), Register(0x90)], resolved: None }
0b 85 90 
# t25 <- t26 Add t27
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }", "Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })"] }
# 90a1a Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: Copy32, args: [Register(0x90), Register(0x88)], resolved: None }
21 90 88 
# 90a1d Instruction { source: "t25 <- t26 Add t27\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") }) }\", \"Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\\\"i\\\") })\"] }", opcode: AddImm32IgnoreCarry, args: [Register(0x88), Constant32(0x000f100c=987148)], resolved: None }
32 88 0c 10 0f 00 
# t29 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }", "Number(U8, 32)", "Number(U8, 32)"] }
# 90a23 Instruction { source: "t29 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x8c), Constant8(0x20=32)], resolved: None }
04 8c 20 
# mem[t25] <- t29 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }"] }
# 90a26 Instruction { source: "mem[t25] <- t29 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"lcd_display\\\", Ident(\\\"i\\\")), var_type: None, value: Number(U8, 32) }\"] }", opcode: Store8, args: [Register(0x8c), Register(0x88)], resolved: None }
06 8c 88 
# t31 <- i U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Ident(\"i\")", "Ident(\"i\")"] }
# 90a29 Instruction { source: "t31 <- i U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x84)], resolved: None }
0b 85 84 
# t32 <- 0n32/0x20u8 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Number(U8, 32)", "Number(U8, 32)"] }
# 90a2c Instruction { source: "t32 <- 0n32/0x20u8 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Number(U8, 32)\", \"Number(U8, 32)\"] }", opcode: LoadImm8, args: [Register(0x8c), Constant8(0x20=32)], resolved: None }
04 8c 20 
# None <= call lcd_draw_char(t31,t32,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })", "Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })"] }
# 90a2f Instruction { source: "Arg0[i]=t31 None <= call lcd_draw_char(t31,t32,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\"] }", opcode: Copy8, args: [Register(0x84), Register(0x00)], resolved: None }
0b 84 00 
# 90a32 Instruction { source: "Arg1[ch]=t32 None <= call lcd_draw_char(t31,t32,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] }) }\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\", \"Call(Call { function: \\\"lcd_draw_char\\\", parameters: [Ident(\\\"i\\\"), Number(U8, 32)] })\"] }", opcode: Copy8, args: [Register(0x8c), Register(0x04)], resolved: None }
0b 8c 04 
# Registers used by this function: {132, 133, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95}
# Registers to save: []
# 90a35 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90a3b Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 45 0a 09 00 
# 90a41 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: JmpImm, args: [Label24(:lcd_draw_char)], resolved: None }
70 41 06 09 
# 90a45 Instruction { source: "PseudoCall(Label24(:lcd_draw_char))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# t33 <- i U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Ident(\"i\")", "Ident(\"i\")"] }
# 90a4b Instruction { source: "t33 <- i U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Ident(\\\"i\\\")\", \"Ident(\\\"i\\\")\"] }", opcode: Copy8, args: [Register(0x85), Register(0x84)], resolved: None }
0b 85 84 
# t34 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 90a4e Instruction { source: "t34 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0x85), Constant8(0x01=1)], resolved: None }
04 85 01 
# i <- t33 Add t34
# 	SourceContext { contexts: ["Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }", "Arithmetic(Add, Ident(\"i\"), Number(U8, 1))"] }
# 90a51 Instruction { source: "i <- t33 Add t34\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"i\\\"), var_type: None, value: Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, Ident(\\\"i\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x84), Register(0x85), Register(0x85)], resolved: None }
14 84 85 85 
# goto lcd_scroll_up_while_predicate_3
# 	SourceContext { contexts: [] }
# 90a55 Instruction { source: "goto lcd_scroll_up_while_predicate_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_predicate_3)], resolved: None }
70 fe 09 09 
# :lcd_scroll_up_while_end_5
# 	SourceContext { contexts: [] }
# lcd_scroll_up_while_end_5
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 90a59 Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_lcd_scroll_up
# 	SourceContext { contexts: [] }
# function_end_lcd_scroll_up
# Unreachable
# 	SourceContext { contexts: [] }
# 90a5b Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getchar_8_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getchar_8_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t0 (t0 PtrFieldDeref("s", "first")) Reg(U8) Some([164])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t10 (t10 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t11 (t11 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t12 (t12 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t13 (t13 PtrFieldDeref("s", "first")) Reg(U8) Some([176])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t16 (t16 Number(USIZE, 256)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t17 (t17 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t18 (t18 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t19 (t19 Number(USIZE, 256)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t2 (t2 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t20 (t20 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t21 (t21 PtrFieldDeref("s", "first")) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t22 (t22 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t23 (t23 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t24 (t24 Number(USIZE, 256)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t25 (t25 Number(U8, 1)) Reg(U8) Some([176])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t26 (t26 Ident("value")) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t3 (t3 Number(USIZE, 256)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([176])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t8 (t8 Number(U8, 0)) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([177])
# Var inline_main_getchar_8_inline_getchar_queue_pop_5_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_getchar_8_inline_getchar_queue_push_7_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getchar_8_inline_getchar_queue_push_7_n (Arg1 n Number(U8)) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t1 (t1 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t10 (t10 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t11 (t11 Number(USIZE, 260)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t12 (t12 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t13 (t13 PtrFieldDeref("s", "last")) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t14 (t14 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t15 (t15 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t16 (t16 Number(USIZE, 260)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t17 (t17 Number(U8, 1)) Reg(U8) Some([164])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t2 (t2 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t3 (t3 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t4 (t4 PtrFieldDeref("s", "last")) Reg(U8) Some([177])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t5 (t5 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t6 (t6 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t7 (t7 Number(USIZE, 260)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t8 (t8 Ident("n")) Reg(U8) Some([156])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_t9 (t9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_inline_getchar_queue_push_7_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_main_getchar_8_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_getchar_8_t0 (t0 Ident("ch")) Reg(U8) Some([156])
# Var inline_main_getchar_8_t1 (t1 Number(U8, 0)) Reg(U8) Some([164])
# Var inline_main_getchar_8_t10 (t10 Call(Call { function: "Keyboard_poll", parameters: [] })) Reg(U8) Some([156])
# Var inline_main_getchar_8_t11 (t11 AddressOf(Ident("stdin"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_t12 (static "stdin") Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_t13 (t13 Ident("ch")) Reg(U8) Some([156])
# Var inline_main_getchar_8_t2 (t2 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([156])
# Var inline_main_getchar_8_t3 (t3 Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([156])
# Var inline_main_getchar_8_t4 (t4 Number(U8, 1)) Reg(U8) Some([164])
# Var inline_main_getchar_8_t5 (t5 Number(U8, 0)) Reg(U8) Some([164])
# Var inline_main_getchar_8_t6 (t6 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })) Reg(U8) Some([156])
# Var inline_main_getchar_8_t7 (t7 AddressOf(Ident("stdin"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_t8 (static "stdin") Reg(U32) Some([160, 161, 162, 163])
# Var inline_main_getchar_8_t9 (t9 TtyIn) Reg(U8) Some([176])
# Var inline_main_putc_1_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_1_c (Arg0 c Number(U8)) Reg(U8) Some([156])
# Var inline_main_putc_1_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_1_t0 (t0 Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([156])
# Var inline_main_putc_1_t1 (t1 Ident("c")) Reg(U8) Some([156])
# Var inline_main_putc_1_t2 (t2 Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([156])
# Var inline_main_putc_1_t3 (t3 Ident("c")) Reg(U8) Some([156])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Call(Call { function: "stdio_init", parameters: [] })) Reg(U8) Some([156])
# Var t1 (t1 Number(U8, 0)) Reg(U8) Some([156])
# Var t2 (t2 Number(U8, 0)) Reg(U8) Some([164])
# Var t3 (t3 Call(Call { function: "putc", parameters: [Call(Call { function: "getchar", parameters: [] })] })) Reg(U8) Some([156])
# Var t4 (t4 Call(Call { function: "getchar", parameters: [] })) Reg(U8) Some([156])
# None <= call stdio_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stdio_init\", parameters: [] }) }", "Call(Call { function: \"stdio_init\", parameters: [] })", "Call(Call { function: \"stdio_init\", parameters: [] })"] }
# Registers used by this function: {156, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 60, 61, 62, 63, 64, 65, 66, 67, 69, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194}
# Registers to save: []
# 90a60 Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90a66 Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 70 0a 09 00 
# 90a6c Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: JmpImm, args: [Label24(:stdio_init)], resolved: None }
70 d4 0b 09 
# 90a70 Instruction { source: "PseudoCall(Label24(:stdio_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# :main_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] }) }] }"] }
# main_while_predicate_0
# t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] }) }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90a76 Instruction { source: "t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Call(Call { function: \\\"getchar\\\", parameters: [] })] }) }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x9c), Constant8(0x00=0)], resolved: None }
04 9c 00 
# t2 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] }) }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90a79 Instruction { source: "t2 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Call(Call { function: \\\"getchar\\\", parameters: [] })] }) }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa4), Constant8(0x00=0)], resolved: None }
04 a4 00 
# if t1 == t2 then 'main_while_body_1' else 'main_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] }) }] }", "Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }"] }
# 90a7c Instruction { source: "if t1 == t2 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Call(Call { function: \\\"getchar\\\", parameters: [] })] }) }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x9c), Register(0xa4)], resolved: None }
15 9c a4 
# 90a7f Instruction { source: "if t1 == t2 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Call(Call { function: \\\"getchar\\\", parameters: [] })] }) }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(main_while_body_1)], resolved: None }
72 87 0a 09 
# 90a83 Instruction { source: "if t1 == t2 then 'main_while_body_1' else 'main_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Call(Call { function: \\\"getchar\\\", parameters: [] })] }) }] }\", \"Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(main_while_end_2)], resolved: None }
70 cf 0b 09 
# :main_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] }) }] }"] }
# main_while_body_1
# inline_main_getchar_8_ch <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: Some(Number(U8)), value: Number(U8, 0) }", "Number(U8, 0)"] }
# 90a87 Instruction { source: "inline_main_getchar_8_ch <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: Some(Number(U8)), value: Number(U8, 0) }\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x9c), Constant8(0x00=0)], resolved: None }
04 9c 00 
# :inline_main_getchar_8_getchar_while_predicate_0
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }"] }
# inline_main_getchar_8_getchar_while_predicate_0
# inline_main_getchar_8_t0 <- inline_main_getchar_8_ch U8
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_t0 <- inline_main_getchar_8_ch U8\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_main_getchar_8_t1 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90a8a Instruction { source: "inline_main_getchar_8_t1 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa4), Constant8(0x00=0)], resolved: None }
04 a4 00 
# if inline_main_getchar_8_t0 == inline_main_getchar_8_t1 then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }", "Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }"] }
# 90a8d Instruction { source: "if inline_main_getchar_8_t0 == inline_main_getchar_8_t1 then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x9c), Register(0xa4)], resolved: None }
15 9c a4 
# 90a90 Instruction { source: "if inline_main_getchar_8_t0 == inline_main_getchar_8_t1 then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_getchar_8_getchar_while_body_1)], resolved: None }
72 98 0a 09 
# 90a94 Instruction { source: "if inline_main_getchar_8_t0 == inline_main_getchar_8_t1 then 'inline_main_getchar_8_getchar_while_body_1' else 'inline_main_getchar_8_getchar_while_end_2'\n\tSourceContext { contexts: [\"While { predicate: Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }, Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }] }\", \"Comparison { op: Equals, left: Ident(\\\"ch\\\"), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_getchar_while_end_2)], resolved: None }
70 b0 0b 09 
# :inline_main_getchar_8_getchar_while_body_1
# 	SourceContext { contexts: ["While { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }"] }
# inline_main_getchar_8_getchar_while_body_1
# Some(inline_main_getchar_8_t3) <= call io_ready_to_read()
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Call(Call { function: \"io_ready_to_read\", parameters: [] })", "Call(Call { function: \"io_ready_to_read\", parameters: [] })"] }
# 90a98 Instruction { source: "ReadyToRead", opcode: IoReadyToRead, args: [Register(0x9c)], resolved: None }
79 9c 
# inline_main_getchar_8_t4 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 90a9a Instruction { source: "inline_main_getchar_8_t4 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xa4), Constant8(0x01=1)], resolved: None }
04 a4 01 
# inline_main_getchar_8_t2 <- inline_main_getchar_8_t3 BitwiseAnd inline_main_getchar_8_t4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))", "Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1))"] }
# 90a9d Instruction { source: "inline_main_getchar_8_t2 <- inline_main_getchar_8_t3 BitwiseAnd inline_main_getchar_8_t4\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\", \"Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1))\"] }", opcode: And8, args: [Register(0x9c), Register(0xa4), Register(0x9c)], resolved: None }
1b 9c a4 9c 
# inline_main_getchar_8_t5 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90aa1 Instruction { source: "inline_main_getchar_8_t5 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xa4), Constant8(0x00=0)], resolved: None }
04 a4 00 
# if inline_main_getchar_8_t2 != inline_main_getchar_8_t5 then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }", "Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }"] }
# 90aa4 Instruction { source: "if inline_main_getchar_8_t2 != inline_main_getchar_8_t5 then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: Cmp8, args: [Register(0x9c), Register(0xa4)], resolved: None }
15 9c a4 
# 90aa7 Instruction { source: "if inline_main_getchar_8_t2 != inline_main_getchar_8_t5 then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JzImm, args: [Label24(inline_main_getchar_8_getchar_if_else_0_5)], resolved: None }
72 0c 0b 09 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_getchar_8_t2 != inline_main_getchar_8_t5 then 'inline_main_getchar_8_getchar_if_true_0_4' else 'inline_main_getchar_8_getchar_if_else_0_5'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \\\"Keyboard_poll\\\", parameters: [] }) }] }\", \"Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \\\"io_ready_to_read\\\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_getchar_if_true_0_4)], resolved: None }
# :inline_main_getchar_8_getchar_if_true_0_4
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }"] }
# inline_main_getchar_8_getchar_if_true_0_4
# inline_main_getchar_8_t8 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 90aab Instruction { source: "inline_main_getchar_8_t8 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x000f105c=987228)], resolved: None }
20 a0 5c 10 0f 00 
# inline_main_getchar_8_t7 <- inline_main_getchar_8_t8 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_t7 <- inline_main_getchar_8_t8 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_t9 <- ttyin
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "TtyIn", "TtyIn"] }
# 90ab1 Instruction { source: "inline_main_getchar_8_t9 <- ttyin\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"TtyIn\", \"TtyIn\"] }", opcode: In0, args: [Register(0xb0)], resolved: None }
60 b0 
# inline_main_getchar_8_inline_getchar_queue_push_7_s <- inline_main_getchar_8_t7 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })"] }
# 90ab3 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_s <- inline_main_getchar_8_t7 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa8)], resolved: None }
21 a0 a8 
# inline_main_getchar_8_inline_getchar_queue_push_7_n <- inline_main_getchar_8_t9 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })"] }
# 90ab6 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_n <- inline_main_getchar_8_t9 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] }) }\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\", \"Call(Call { function: \\\"queue_push\\\", parameters: [AddressOf(Ident(\\\"stdin\\\")), TtyIn] })\"] }", opcode: Copy8, args: [Register(0xb0), Register(0x9c)], resolved: None }
0b b0 9c 
# inline_main_getchar_8_inline_getchar_queue_push_7_t0 <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t0 <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_push_7_values <- inline_main_getchar_8_inline_getchar_queue_push_7_t0 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 90ab9 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_values <- inline_main_getchar_8_inline_getchar_queue_push_7_t0 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xac)], resolved: None }
21 a8 ac 
# inline_main_getchar_8_inline_getchar_queue_push_7_t2 <- inline_main_getchar_8_inline_getchar_queue_push_7_values U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t2 <- inline_main_getchar_8_inline_getchar_queue_push_7_values U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_push_7_t6 <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t6 <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_push_7_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 90abc Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000104=260)], resolved: None }
20 b4 04 01 00 00 
# inline_main_getchar_8_inline_getchar_queue_push_7_t5 <- inline_main_getchar_8_inline_getchar_queue_push_7_t6 Add inline_main_getchar_8_inline_getchar_queue_push_7_t7
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 90ac2 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t5 <- inline_main_getchar_8_inline_getchar_queue_push_7_t6 Add inline_main_getchar_8_inline_getchar_queue_push_7_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90ac3 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t5 <- inline_main_getchar_8_inline_getchar_queue_push_7_t6 Add inline_main_getchar_8_inline_getchar_queue_push_7_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0xb4), Register(0xb4)], resolved: None }
30 a8 b4 b4 
# 90ac7 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t5 <- inline_main_getchar_8_inline_getchar_queue_push_7_t6 Add inline_main_getchar_8_inline_getchar_queue_push_7_t7\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_push_7_t4 <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_t5] U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 90ac8 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t4 <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_t5] U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0xb4), Register(0xb1)], resolved: None }
05 b4 b1 
# inline_main_getchar_8_inline_getchar_queue_push_7_t3 U32 <- inline_main_getchar_8_inline_getchar_queue_push_7_t4 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }"] }
# 90acb Instruction { source: "Zero-pad for inline_main_getchar_8_inline_getchar_queue_push_7_t3 U32 <- inline_main_getchar_8_inline_getchar_queue_push_7_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: LoadImm32, args: [Register(0xb4), Constant32(0x00000000=0)], resolved: None }
20 b4 00 00 00 00 
# 90ad1 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t3 U32 <- inline_main_getchar_8_inline_getchar_queue_push_7_t4 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Copy8, args: [Register(0xb1), Register(0xb4)], resolved: None }
0b b1 b4 
# inline_main_getchar_8_inline_getchar_queue_push_7_t1 <- inline_main_getchar_8_inline_getchar_queue_push_7_t2 Add inline_main_getchar_8_inline_getchar_queue_push_7_t3
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })"] }
# 90ad4 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t1 <- inline_main_getchar_8_inline_getchar_queue_push_7_t2 Add inline_main_getchar_8_inline_getchar_queue_push_7_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90ad5 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t1 <- inline_main_getchar_8_inline_getchar_queue_push_7_t2 Add inline_main_getchar_8_inline_getchar_queue_push_7_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0xac), Register(0xb4), Register(0xac)], resolved: None }
30 ac b4 ac 
# 90ad9 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t1 <- inline_main_getchar_8_inline_getchar_queue_push_7_t2 Add inline_main_getchar_8_inline_getchar_queue_push_7_t3\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"last\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_push_7_t8 <- inline_main_getchar_8_inline_getchar_queue_push_7_n U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Ident(\"n\")", "Ident(\"n\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t8 <- inline_main_getchar_8_inline_getchar_queue_push_7_n U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\", \"Ident(\\\"n\\\")\", \"Ident(\\\"n\\\")\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# mem[inline_main_getchar_8_inline_getchar_queue_push_7_t1] <- inline_main_getchar_8_inline_getchar_queue_push_7_t8 U8
# 	SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }"] }
# 90ada Instruction { source: "mem[inline_main_getchar_8_inline_getchar_queue_push_7_t1] <- inline_main_getchar_8_inline_getchar_queue_push_7_t8 U8\n\tSourceContext { contexts: [\"Assign { target: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"last\\\")), var_type: None, value: Ident(\\\"n\\\") }\"] }", opcode: Store8, args: [Register(0x9c), Register(0xac)], resolved: None }
06 9c ac 
# inline_main_getchar_8_inline_getchar_queue_push_7_t10 <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 90add Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t10 <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa0)], resolved: None }
21 a8 a0 
# inline_main_getchar_8_inline_getchar_queue_push_7_t11 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 90ae0 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t11 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000104=260)], resolved: None }
20 ac 04 01 00 00 
# inline_main_getchar_8_inline_getchar_queue_push_7_t9 <- inline_main_getchar_8_inline_getchar_queue_push_7_t10 Add inline_main_getchar_8_inline_getchar_queue_push_7_t11
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 90ae6 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t9 <- inline_main_getchar_8_inline_getchar_queue_push_7_t10 Add inline_main_getchar_8_inline_getchar_queue_push_7_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90ae7 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t9 <- inline_main_getchar_8_inline_getchar_queue_push_7_t10 Add inline_main_getchar_8_inline_getchar_queue_push_7_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0xac), Register(0xac)], resolved: None }
30 a0 ac ac 
# 90aeb Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t9 <- inline_main_getchar_8_inline_getchar_queue_push_7_t10 Add inline_main_getchar_8_inline_getchar_queue_push_7_t11\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_push_7_t15 <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# 90aec Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t15 <- inline_main_getchar_8_inline_getchar_queue_push_7_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa0)], resolved: None }
21 a8 a0 
# inline_main_getchar_8_inline_getchar_queue_push_7_t16 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 90aef Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t16 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000104=260)], resolved: None }
20 a8 04 01 00 00 
# inline_main_getchar_8_inline_getchar_queue_push_7_t14 <- inline_main_getchar_8_inline_getchar_queue_push_7_t15 Add inline_main_getchar_8_inline_getchar_queue_push_7_t16
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 90af5 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t14 <- inline_main_getchar_8_inline_getchar_queue_push_7_t15 Add inline_main_getchar_8_inline_getchar_queue_push_7_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90af6 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t14 <- inline_main_getchar_8_inline_getchar_queue_push_7_t15 Add inline_main_getchar_8_inline_getchar_queue_push_7_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0xa8), Register(0xa0)], resolved: None }
30 a0 a8 a0 
# 90afa Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t14 <- inline_main_getchar_8_inline_getchar_queue_push_7_t15 Add inline_main_getchar_8_inline_getchar_queue_push_7_t16\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_push_7_t13 <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_t14] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 90afb Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t13 <- mem[inline_main_getchar_8_inline_getchar_queue_push_7_t14] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0xa0), Register(0x9c)], resolved: None }
05 a0 9c 
# inline_main_getchar_8_inline_getchar_queue_push_7_t17 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 90afe Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t17 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xa4), Constant8(0x01=1)], resolved: None }
04 a4 01 
# inline_main_getchar_8_inline_getchar_queue_push_7_t12 <- inline_main_getchar_8_inline_getchar_queue_push_7_t13 Add inline_main_getchar_8_inline_getchar_queue_push_7_t17
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))"] }
# 90b01 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_push_7_t12 <- inline_main_getchar_8_inline_getchar_queue_push_7_t13 Add inline_main_getchar_8_inline_getchar_queue_push_7_t17\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x9c), Register(0xa4), Register(0x9c)], resolved: None }
14 9c a4 9c 
# mem[inline_main_getchar_8_inline_getchar_queue_push_7_t9] <- inline_main_getchar_8_inline_getchar_queue_push_7_t12 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }"] }
# 90b05 Instruction { source: "mem[inline_main_getchar_8_inline_getchar_queue_push_7_t9] <- inline_main_getchar_8_inline_getchar_queue_push_7_t12 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"last\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x9c), Register(0xac)], resolved: None }
06 9c ac 
# goto inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push)], resolved: None }
# :inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push
# 	SourceContext { contexts: [] }
# inline_main_getchar_8_inline_getchar_queue_push_7_function_end_queue_push
# goto inline_main_getchar_8_getchar_if_end_3
# 	SourceContext { contexts: [] }
# 90b08 Instruction { source: "goto inline_main_getchar_8_getchar_if_end_3\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_getchar_if_end_3)], resolved: None }
70 22 0b 09 
# :inline_main_getchar_8_getchar_if_else_0_5
# 	SourceContext { contexts: [] }
# inline_main_getchar_8_getchar_if_else_0_5
# None <= call Keyboard_poll()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }", "Call(Call { function: \"Keyboard_poll\", parameters: [] })", "Call(Call { function: \"Keyboard_poll\", parameters: [] })"] }
# Registers used by this function: {156, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58}
# Registers to save: []
# 90b0c Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90b12 Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 1c 0b 09 00 
# 90b18 Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: JmpImm, args: [Label24(:Keyboard_poll)], resolved: None }
70 52 04 09 
# 90b1c Instruction { source: "PseudoCall(Label24(:Keyboard_poll))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# :inline_main_getchar_8_getchar_if_end_3
# 	SourceContext { contexts: [] }
# inline_main_getchar_8_getchar_if_end_3
# inline_main_getchar_8_t12 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 90b22 Instruction { source: "inline_main_getchar_8_t12 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0xa0), Constant32(0x000f105c=987228)], resolved: None }
20 a0 5c 10 0f 00 
# inline_main_getchar_8_t11 <- inline_main_getchar_8_t12 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_t11 <- inline_main_getchar_8_t12 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_s <- inline_main_getchar_8_t11 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_s <- inline_main_getchar_8_t11 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"ch\\\"), var_type: None, value: Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_pop\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_t2 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t2 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_t3 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 90b28 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t3 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000100=256)], resolved: None }
20 a8 00 01 00 00 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t1 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t2 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t3
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 90b2e Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t1 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t2 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90b2f Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t1 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t2 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0xa8), Register(0xa8)], resolved: None }
30 a0 a8 a8 
# 90b33 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t1 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t2 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t3\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t0 <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t1] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 90b34 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t0 <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t1] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0xa8), Register(0xa4)], resolved: None }
05 a8 a4 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t6 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t6 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_t7 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 90b37 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t7 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000104=260)], resolved: None }
20 ac 04 01 00 00 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t5 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t6 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t7
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 90b3d Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t5 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t6 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90b3e Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t5 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t6 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0xac), Register(0xac)], resolved: None }
30 a0 ac ac 
# 90b42 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t5 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t6 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t7\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t4 <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t5] U8
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")"] }
# 90b43 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t4 <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t5] U8\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"last\\\")\"] }", opcode: Load8, args: [Register(0xac), Register(0xb0)], resolved: None }
05 ac b0 
# if inline_main_getchar_8_inline_getchar_queue_pop_5_t0 == inline_main_getchar_8_inline_getchar_queue_pop_5_t4 then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_else_0_2'
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }"] }
# 90b46 Instruction { source: "if inline_main_getchar_8_inline_getchar_queue_pop_5_t0 == inline_main_getchar_8_inline_getchar_queue_pop_5_t4 then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: Cmp8, args: [Register(0xa4), Register(0xb0)], resolved: None }
15 a4 b0 
# 90b49 Instruction { source: "if inline_main_getchar_8_inline_getchar_queue_pop_5_t0 == inline_main_getchar_8_inline_getchar_queue_pop_5_t4 then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JzImm, args: [Label24(inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1)], resolved: None }
72 51 0b 09 
# 90b4d Instruction { source: "if inline_main_getchar_8_inline_getchar_queue_pop_5_t0 == inline_main_getchar_8_inline_getchar_queue_pop_5_t4 then 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1' else 'inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_else_0_2'\n\tSourceContext { contexts: [\"IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\", \"Comparison { op: Equals, left: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), right: PtrFieldDeref(\\\"s\\\", \\\"last\\\") }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_else_0_2)], resolved: None }
70 5c 0b 09 
# :inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1
# 	SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }"] }
# inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_true_0_1
# inline_main_getchar_8_inline_getchar_queue_pop_5_t8 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90b51 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t8 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0x9c), Constant8(0x00=0)], resolved: None }
04 9c 00 
# inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_t8 U8
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_t8 U8\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# goto inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Number(U8, 0)) }"] }
# 90b54 Instruction { source: "goto inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Number(U8, 0)) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop)], resolved: None }
70 ac 0b 09 
# goto inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# 90b58 Instruction { source: "goto inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0)], resolved: None }
70 5c 0b 09 
# :inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_else_0_2
# 	SourceContext { contexts: [] }
# inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_else_0_2
# :inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0
# 	SourceContext { contexts: [] }
# inline_main_getchar_8_inline_getchar_queue_pop_5_queue_pop_if_end_0
# inline_main_getchar_8_inline_getchar_queue_pop_5_t9 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t9 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") } }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_values <- inline_main_getchar_8_inline_getchar_queue_pop_5_t9 U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }", "AddressOf(PtrFieldDeref(\"s\", \"values\"))"] }
# 90b5c Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_values <- inline_main_getchar_8_inline_getchar_queue_pop_5_t9 U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"values\\\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\")) }\", \"AddressOf(PtrFieldDeref(\\\"s\\\", \\\"values\\\"))\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa8)], resolved: None }
21 a0 a8 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t11 <- inline_main_getchar_8_inline_getchar_queue_pop_5_values U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }", "Ident(\"values\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t11 <- inline_main_getchar_8_inline_getchar_queue_pop_5_values U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }\", \"Ident(\\\"values\\\")\"] }", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_t15 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t15 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_t16 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 90b5f Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t16 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000100=256)], resolved: None }
20 ac 00 01 00 00 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t14 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t15 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t16
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 90b65 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t14 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t15 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90b66 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t14 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t15 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0xac), Register(0xac)], resolved: None }
30 a0 ac ac 
# 90b6a Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t14 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t15 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t16\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t13 <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t14] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 90b6b Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t13 <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t14] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0xac), Register(0xb0)], resolved: None }
05 ac b0 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t12 U32 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t13 U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }"] }
# 90b6e Instruction { source: "Zero-pad for inline_main_getchar_8_inline_getchar_queue_pop_5_t12 U32 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000000=0)], resolved: None }
20 ac 00 00 00 00 
# 90b74 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t12 U32 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t13 U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\", \"Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }\"] }", opcode: Copy8, args: [Register(0xb0), Register(0xac)], resolved: None }
0b b0 ac 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t10 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t11 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t12
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })"] }
# 90b77 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t10 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t11 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90b78 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t10 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t11 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_1, args: [Register(0xa8), Register(0xac), Register(0xa8)], resolved: None }
30 a8 ac a8 
# 90b7c Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t10 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t11 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t12\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") }) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\\\"values\\\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\\\"s\\\", \\\"first\\\") })\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_pop_5_value <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t10] U8
# 	SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))"] }
# 90b7d Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_value <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t10] U8\n\tSourceContext { contexts: [\"Assign { target: Ident(\\\"value\\\"), var_type: Some(Number(U8)), value: Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\")) }\", \"Index(\\\"values\\\", PtrFieldDeref(\\\"s\\\", \\\"first\\\"))\"] }", opcode: Load8, args: [Register(0xa8), Register(0xb1)], resolved: None }
05 a8 b1 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t18 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t18 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_t19 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 90b80 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t19 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xa8), Constant32(0x00000100=256)], resolved: None }
20 a8 00 01 00 00 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t17 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t18 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t19
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 90b86 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t17 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t18 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90b87 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t17 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t18 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0xa8), Register(0xa8)], resolved: None }
30 a0 a8 a8 
# 90b8b Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t17 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t18 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t19\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t23 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t23 <- inline_main_getchar_8_inline_getchar_queue_pop_5_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_main_getchar_8_inline_getchar_queue_pop_5_t24 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 90b8c Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t24 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xac), Constant32(0x00000100=256)], resolved: None }
20 ac 00 01 00 00 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t22 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t23 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t24
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 90b92 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t22 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t23 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90b93 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t22 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t23 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0xa0), Register(0xac), Register(0xa0)], resolved: None }
30 a0 ac a0 
# 90b97 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t22 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t23 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t24\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t21 <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t22] U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")"] }
# 90b98 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t21 <- mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t22] U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\", \"PtrFieldDeref(\\\"s\\\", \\\"first\\\")\"] }", opcode: Load8, args: [Register(0xa0), Register(0x9c)], resolved: None }
05 a0 9c 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t25 <- 0n1/0x01u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Number(U8, 1)", "Number(U8, 1)"] }
# 90b9b Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t25 <- 0n1/0x01u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Number(U8, 1)\", \"Number(U8, 1)\"] }", opcode: LoadImm8, args: [Register(0xb0), Constant8(0x01=1)], resolved: None }
04 b0 01 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t20 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t21 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t25
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))"] }
# 90b9e Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t20 <- inline_main_getchar_8_inline_getchar_queue_pop_5_t21 Add inline_main_getchar_8_inline_getchar_queue_pop_5_t25\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\", \"Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1))\"] }", opcode: Add8NoCarryIn, args: [Register(0x9c), Register(0xb0), Register(0x9c)], resolved: None }
14 9c b0 9c 
# mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t17] <- inline_main_getchar_8_inline_getchar_queue_pop_5_t20 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }"] }
# 90ba2 Instruction { source: "mem[inline_main_getchar_8_inline_getchar_queue_pop_5_t17] <- inline_main_getchar_8_inline_getchar_queue_pop_5_t20 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\\\"s\\\", \\\"first\\\"), Number(U8, 1)) }\"] }", opcode: Store8, args: [Register(0x9c), Register(0xa8)], resolved: None }
06 9c a8 
# inline_main_getchar_8_inline_getchar_queue_pop_5_t26 <- inline_main_getchar_8_inline_getchar_queue_pop_5_value U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }", "Ident(\"value\")", "Ident(\"value\")"] }
# 90ba5 Instruction { source: "inline_main_getchar_8_inline_getchar_queue_pop_5_t26 <- inline_main_getchar_8_inline_getchar_queue_pop_5_value U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\", \"Ident(\\\"value\\\")\", \"Ident(\\\"value\\\")\"] }", opcode: Copy8, args: [Register(0xb1), Register(0x9c)], resolved: None }
0b b1 9c 
# inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_t26 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_ch <- inline_main_getchar_8_inline_getchar_queue_pop_5_t26 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# goto inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"value\")) }"] }
# 90ba8 Instruction { source: "goto inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"value\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop)], resolved: None }
70 ac 0b 09 
# :inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop
# 	SourceContext { contexts: [] }
# inline_main_getchar_8_inline_getchar_queue_pop_5_function_end_queue_pop
# goto inline_main_getchar_8_getchar_while_predicate_0
# 	SourceContext { contexts: [] }
# 90bac Instruction { source: "goto inline_main_getchar_8_getchar_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_getchar_while_predicate_0)], resolved: None }
70 8a 0a 09 
# :inline_main_getchar_8_getchar_while_end_2
# 	SourceContext { contexts: [] }
# inline_main_getchar_8_getchar_while_end_2
# inline_main_getchar_8_t13 <- inline_main_getchar_8_ch U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }", "Ident(\"ch\")", "Ident(\"ch\")"] }
# optimized away noop copy Instruction { source: "inline_main_getchar_8_t13 <- inline_main_getchar_8_ch U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\", \"Ident(\\\"ch\\\")\", \"Ident(\\\"ch\\\")\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# t4 <- inline_main_getchar_8_t13 U8
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# optimized away noop copy Instruction { source: "t4 <- inline_main_getchar_8_t13 U8\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# goto inline_main_getchar_8_function_end_getchar
# 	SourceContext { contexts: ["Return { value: Some(Ident(\"ch\")) }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_getchar_8_function_end_getchar\n\tSourceContext { contexts: [\"Return { value: Some(Ident(\\\"ch\\\")) }\"] }", opcode: JmpImm, args: [Label24(inline_main_getchar_8_function_end_getchar)], resolved: None }
# :inline_main_getchar_8_function_end_getchar
# 	SourceContext { contexts: [] }
# inline_main_getchar_8_function_end_getchar
# inline_main_putc_1_c <- t4 U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] }) }", "Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] })", "Call(Call { function: \"putc\", parameters: [Call(Call { function: \"getchar\", parameters: [] })] })"] }
# optimized away noop copy Instruction { source: "inline_main_putc_1_c <- t4 U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"putc\\\", parameters: [Call(Call { function: \\\"getchar\\\", parameters: [] })] }) }\", \"Call(Call { function: \\\"putc\\\", parameters: [Call(Call { function: \\\"getchar\\\", parameters: [] })] })\", \"Call(Call { function: \\\"putc\\\", parameters: [Call(Call { function: \\\"getchar\\\", parameters: [] })] })\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_main_putc_1_t1 <- inline_main_putc_1_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_1_t1 <- inline_main_putc_1_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"io_write0\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# None <= call io_write0(inline_main_putc_1_t1,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })"] }
# 90bb0 Instruction { source: "IoWrite0", opcode: Out0, args: [Register(0x9c)], resolved: None }
68 9c 
# inline_main_putc_1_t3 <- inline_main_putc_1_c U8
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Ident(\"c\")", "Ident(\"c\")"] }
# optimized away noop copy Instruction { source: "inline_main_putc_1_t3 <- inline_main_putc_1_c U8\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Ident(\\\"c\\\")\", \"Ident(\\\"c\\\")\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x9c)], resolved: None }
# None <= call lcd_putc(inline_main_putc_1_t3,)
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })", "Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })"] }
# 90bb2 Instruction { source: "Arg0[ch]=inline_main_putc_1_t3 None <= call lcd_putc(inline_main_putc_1_t3,)\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] }) }\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\", \"Call(Call { function: \\\"lcd_putc\\\", parameters: [Ident(\\\"c\\\")] })\"] }", opcode: Copy8, args: [Register(0x9c), Register(0x00)], resolved: None }
0b 9c 00 
# Registers used by this function: {156, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155}
# Registers to save: []
# 90bb5 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90bbb Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c c5 0b 09 00 
# 90bc1 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: JmpImm, args: [Label24(:lcd_putc)], resolved: None }
70 48 08 09 
# 90bc5 Instruction { source: "PseudoCall(Label24(:lcd_putc))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# goto inline_main_putc_1_function_end_putc
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_1_function_end_putc\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_main_putc_1_function_end_putc)], resolved: None }
# :inline_main_putc_1_function_end_putc
# 	SourceContext { contexts: [] }
# inline_main_putc_1_function_end_putc
# goto main_while_predicate_0
# 	SourceContext { contexts: [] }
# 90bcb Instruction { source: "goto main_while_predicate_0\n\tSourceContext { contexts: [] }", opcode: JmpImm, args: [Label24(main_while_predicate_0)], resolved: None }
70 76 0a 09 
# :main_while_end_2
# 	SourceContext { contexts: [] }
# main_while_end_2
# :function_end_main
# 	SourceContext { contexts: [] }
# function_end_main
# Unreachable
# 	SourceContext { contexts: [] }
# 90bcf Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
# :stdio_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_4_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_4_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_stdio_init_queue_init_4_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_stdio_init_queue_init_4_t0 (t0 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([188, 189, 190, 191])
# Var inline_stdio_init_queue_init_4_t1 (t1 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_stdio_init_queue_init_4_t2 (t2 Number(USIZE, 256)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_stdio_init_queue_init_4_t3 (t3 Number(U8, 0)) Reg(U8) Some([192])
# Var inline_stdio_init_queue_init_4_t4 (t4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_stdio_init_queue_init_4_t5 (t5 Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_stdio_init_queue_init_4_t6 (t6 Number(USIZE, 260)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_stdio_init_queue_init_4_t7 (t7 Number(U8, 0)) Reg(U8) Some([193])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (t0 Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })) Reg(U8) Some([194])
# Var t1 (t1 AddressOf(Ident("stdin"))) Reg(U32) Some([184, 185, 186, 187])
# Var t2 (static "stdin") Reg(U32) Some([184, 185, 186, 187])
# Var t3 (t3 Call(Call { function: "lcd_init", parameters: [] })) Reg(U8) Some([194])
# Var t4 (t4 Call(Call { function: "KeyBoard_init", parameters: [] })) Reg(U8) Some([194])
# t2 <- 0n987228/0x000f105cu32 
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# 90bd4 Instruction { source: "t2 <- 0n987228/0x000f105cu32 \n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: LoadImm32, args: [Register(0xb8), Constant32(0x000f105c=987228)], resolved: None }
20 b8 5c 10 0f 00 
# t1 <- t2 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))"] }
# optimized away noop copy Instruction { source: "t1 <- t2 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"AddressOf(Ident(\\\"stdin\\\"))\", \"AddressOf(Ident(\\\"stdin\\\"))\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_stdio_init_queue_init_4_s <- t1 U32
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_4_s <- t1 U32\n\tSourceContext { contexts: [\"VoidExpression { expression: Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] }) }\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\", \"Call(Call { function: \\\"queue_init\\\", parameters: [AddressOf(Ident(\\\"stdin\\\"))] })\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_stdio_init_queue_init_4_t1 <- inline_stdio_init_queue_init_4_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_4_t1 <- inline_stdio_init_queue_init_4_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_stdio_init_queue_init_4_t2 <- 0n256/0x00000100u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Number(USIZE, 256)", "Number(USIZE, 256)"] }
# 90bda Instruction { source: "inline_stdio_init_queue_init_4_t2 <- 0n256/0x00000100u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\", \"Number(USIZE, 256)\", \"Number(USIZE, 256)\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000100=256)], resolved: None }
20 bc 00 01 00 00 
# inline_stdio_init_queue_init_4_t0 <- inline_stdio_init_queue_init_4_t1 Add inline_stdio_init_queue_init_4_t2
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))"] }
# 90be0 Instruction { source: "inline_stdio_init_queue_init_4_t0 <- inline_stdio_init_queue_init_4_t1 Add inline_stdio_init_queue_init_4_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90be1 Instruction { source: "inline_stdio_init_queue_init_4_t0 <- inline_stdio_init_queue_init_4_t1 Add inline_stdio_init_queue_init_4_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_1, args: [Register(0xb8), Register(0xbc), Register(0xbc)], resolved: None }
30 b8 bc bc 
# 90be5 Instruction { source: "inline_stdio_init_queue_init_4_t0 <- inline_stdio_init_queue_init_4_t1 Add inline_stdio_init_queue_init_4_t2\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 256))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_stdio_init_queue_init_4_t3 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90be6 Instruction { source: "inline_stdio_init_queue_init_4_t3 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc0), Constant8(0x00=0)], resolved: None }
04 c0 00 
# mem[inline_stdio_init_queue_init_4_t0] <- inline_stdio_init_queue_init_4_t3 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }"] }
# 90be9 Instruction { source: "mem[inline_stdio_init_queue_init_4_t0] <- inline_stdio_init_queue_init_4_t3 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"first\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0xc0), Register(0xbc)], resolved: None }
06 c0 bc 
# inline_stdio_init_queue_init_4_t5 <- inline_stdio_init_queue_init_4_s U32
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")"] }
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_4_t5 <- inline_stdio_init_queue_init_4_s U32\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }\", \"Ident(\\\"s\\\")\"] }", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_stdio_init_queue_init_4_t6 <- 0n260/0x00000104u32 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Number(USIZE, 260)", "Number(USIZE, 260)"] }
# 90bec Instruction { source: "inline_stdio_init_queue_init_4_t6 <- 0n260/0x00000104u32 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\", \"Number(USIZE, 260)\", \"Number(USIZE, 260)\"] }", opcode: LoadImm32, args: [Register(0xbc), Constant32(0x00000104=260)], resolved: None }
20 bc 04 01 00 00 
# inline_stdio_init_queue_init_4_t4 <- inline_stdio_init_queue_init_4_t5 Add inline_stdio_init_queue_init_4_t6
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))"] }
# 90bf2 Instruction { source: "inline_stdio_init_queue_init_4_t4 <- inline_stdio_init_queue_init_4_t5 Add inline_stdio_init_queue_init_4_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: ClearCarry, args: [], resolved: None }
03 
# 90bf3 Instruction { source: "inline_stdio_init_queue_init_4_t4 <- inline_stdio_init_queue_init_4_t5 Add inline_stdio_init_queue_init_4_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_1, args: [Register(0xb8), Register(0xbc), Register(0xb8)], resolved: None }
30 b8 bc b8 
# 90bf7 Instruction { source: "inline_stdio_init_queue_init_4_t4 <- inline_stdio_init_queue_init_4_t5 Add inline_stdio_init_queue_init_4_t6\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260)) }\", \"Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\\\"Queue\\\"))), new_type: Number(USIZE), value: Ident(\\\"s\\\") }, Number(USIZE, 260))\"] }", opcode: AddCarry32_2, args: [], resolved: None }
31 
# inline_stdio_init_queue_init_4_t7 <- 0n0/0x00u8 
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Number(U8, 0)", "Number(U8, 0)"] }
# 90bf8 Instruction { source: "inline_stdio_init_queue_init_4_t7 <- 0n0/0x00u8 \n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\", \"Number(U8, 0)\", \"Number(U8, 0)\"] }", opcode: LoadImm8, args: [Register(0xc1), Constant8(0x00=0)], resolved: None }
04 c1 00 
# mem[inline_stdio_init_queue_init_4_t4] <- inline_stdio_init_queue_init_4_t7 U8
# 	SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }"] }
# 90bfb Instruction { source: "mem[inline_stdio_init_queue_init_4_t4] <- inline_stdio_init_queue_init_4_t7 U8\n\tSourceContext { contexts: [\"Assign { target: PtrFieldDeref(\\\"s\\\", \\\"last\\\"), var_type: None, value: Number(U8, 0) }\"] }", opcode: Store8, args: [Register(0xc1), Register(0xb8)], resolved: None }
06 c1 b8 
# goto inline_stdio_init_queue_init_4_function_end_queue_init
# 	SourceContext { contexts: ["Return { value: None }"] }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_stdio_init_queue_init_4_function_end_queue_init\n\tSourceContext { contexts: [\"Return { value: None }\"] }", opcode: JmpImm, args: [Label24(inline_stdio_init_queue_init_4_function_end_queue_init)], resolved: None }
# :inline_stdio_init_queue_init_4_function_end_queue_init
# 	SourceContext { contexts: [] }
# inline_stdio_init_queue_init_4_function_end_queue_init
# None <= call lcd_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"lcd_init\", parameters: [] }) }", "Call(Call { function: \"lcd_init\", parameters: [] })", "Call(Call { function: \"lcd_init\", parameters: [] })"] }
# Registers used by this function: {184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194}
# Registers used by callee tree: {60, 61, 62, 63, 64, 65, 66, 67, 69, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}
# Registers to save: []
# 90bfe Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90c04 Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 0e 0c 09 00 
# 90c0a Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: JmpImm, args: [Label24(:lcd_init)], resolved: None }
70 fd 06 09 
# 90c0e Instruction { source: "PseudoCall(Label24(:lcd_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# None <= call KeyBoard_init()
# 	SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"KeyBoard_init\", parameters: [] }) }", "Call(Call { function: \"KeyBoard_init\", parameters: [] })", "Call(Call { function: \"KeyBoard_init\", parameters: [] })"] }
# Registers used by this function: {184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27}
# Registers to save: []
# 90c14 Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0xfffffffc=4294967292)], resolved: None }
32 0c fc ff ff ff 
# 90c1a Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: StoreImm32, args: [Register(0x0c), PcOffset(0x0000000a)], resolved: None }
25 0c 24 0c 09 00 
# 90c20 Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: JmpImm, args: [Label24(:KeyBoard_init)], resolved: None }
70 27 04 09 
# 90c24 Instruction { source: "PseudoCall(Label24(:KeyBoard_init))", opcode: AddImm32IgnoreCarry, args: [Register(0x0c), Constant32(0x00000004=4)], resolved: None }
32 0c 04 00 00 00 
# return None
# 	SourceContext { contexts: ["Return { value: None }"] }
# 90c2a Instruction { source: "PseudoReturn", opcode: JmpMem, args: [Register(0x0c)], resolved: None }
75 0c 
# :function_end_stdio_init
# 	SourceContext { contexts: [] }
# function_end_stdio_init
# Unreachable
# 	SourceContext { contexts: [] }
# 90c2c Instruction { source: "Unreachable\n\tSourceContext { contexts: [] }", opcode: Halt, args: [Constant32(0x10000000=268435456)], resolved: None }
7e 00 00 00 10 
