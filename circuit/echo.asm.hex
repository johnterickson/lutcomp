v2.0 raw
#  line: 'loadimm8 r00 <- $01'
#   instruction: 'loadimm8 r00 <- $01'
#    loadimm8: 'loadimm8 r00 <- $01'
#     register: 'r00'
#      unsigned_hex_constant: '00'
#     constant8: '$01'
#      signed_hex_constant: '01'
#       unsigned_hex_constant: '01'
#  line: 'and8 r00 r00 -> r00'
#   instruction: 'and8 r00 r00 -> r00'
#    and8: 'and8 r00 r00 -> r00'
#     register: 'r00'
#      unsigned_hex_constant: '00'
#     register: 'r00'
#      unsigned_hex_constant: '00'
#     register: 'r00'
#      unsigned_hex_constant: '00'
#  line: 'loadimm8 r01 <- 'H''
#   instruction: 'loadimm8 r01 <- 'H''
#    loadimm8: 'loadimm8 r01 <- 'H''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: ''H''
#      char_constant: ''H''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'loadimm8 r01 <- 'i''
#   instruction: 'loadimm8 r01 <- 'i''
#    loadimm8: 'loadimm8 r01 <- 'i''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: ''i''
#      char_constant: ''i''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'loadimm8 r01 <- '!''
#   instruction: 'loadimm8 r01 <- '!''
#    loadimm8: 'loadimm8 r01 <- '!''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: ''!''
#      char_constant: ''!''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'loadimm8 r01 <- $0A'
#   instruction: 'loadimm8 r01 <- $0A'
#    loadimm8: 'loadimm8 r01 <- $0A'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: '$0A'
#      signed_hex_constant: '0A'
#       unsigned_hex_constant: '0A'
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: ':prompt'
#   label: ':prompt'
#  line: 'loadimm8 r01 <- '>''
#   instruction: 'loadimm8 r01 <- '>''
#    loadimm8: 'loadimm8 r01 <- '>''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: ''>''
#      char_constant: ''>''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'loadimm8 r01 <- ':''
#   instruction: 'loadimm8 r01 <- ':''
#    loadimm8: 'loadimm8 r01 <- ':''
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     constant8: '':''
#      char_constant: '':''
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: ':read'
#   label: ':read'
#  line: 'io_ready_to_read r02'
#   instruction: 'io_ready_to_read r02'
#    io_ready_to_read: 'io_ready_to_read r02'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#  line: 'andimm8 r02 <- $01'
#   instruction: 'andimm8 r02 <- $01'
#    andimm8: 'andimm8 r02 <- $01'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#     constant8: '$01'
#      signed_hex_constant: '01'
#       unsigned_hex_constant: '01'
#  line: 'jzimm :read'
#   instruction: 'jzimm :read'
#    jzimm: 'jzimm :read'
#     constant24: ':read'
#      label: ':read'
#  line: 'ttyin r01'
#   instruction: 'ttyin r01'
#    ttyin: 'ttyin r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'ttyout r01'
#   instruction: 'ttyout r01'
#    ttyout: 'ttyout r01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#  line: 'and8 r01 r01 -> r02'
#   instruction: 'and8 r01 r01 -> r02'
#    and8: 'and8 r01 r01 -> r02'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#  line: 'xorimm8 r02 <- 'q''
#   instruction: 'xorimm8 r02 <- 'q''
#    xorimm8: 'xorimm8 r02 <- 'q''
#     register: 'r02'
#      unsigned_hex_constant: '02'
#     constant8: ''q''
#      char_constant: ''q''
#  line: 'jzimm :halt'
#   instruction: 'jzimm :halt'
#    jzimm: 'jzimm :halt'
#     constant24: ':halt'
#      label: ':halt'
#  line: 'and8 r01 r01 -> r02'
#   instruction: 'and8 r01 r01 -> r02'
#    and8: 'and8 r01 r01 -> r02'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r01'
#      unsigned_hex_constant: '01'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#  line: 'xorimm8 r02 <- $0A'
#   instruction: 'xorimm8 r02 <- $0A'
#    xorimm8: 'xorimm8 r02 <- $0A'
#     register: 'r02'
#      unsigned_hex_constant: '02'
#     constant8: '$0A'
#      signed_hex_constant: '0A'
#       unsigned_hex_constant: '0A'
#  line: 'jzimm :prompt'
#   instruction: 'jzimm :prompt'
#    jzimm: 'jzimm :prompt'
#     constant24: ':prompt'
#      label: ':prompt'
#  line: 'jmpimm :read'
#   instruction: 'jmpimm :read'
#    jmpimm: 'jmpimm :read'
#     constant24: ':read'
#      label: ':read'
#  line: ':halt'
#   label: ':halt'
#  line: 'halt $00000000'
#   instruction: 'halt $00000000'
#    halt: 'halt $00000000'
#     constant32: '$00000000'
#      signed_hex_constant: '00000000'
#       unsigned_hex_constant: '00000000'
#  EOI: ''
# 00000 Instruction { source: "loadimm8 r00 <- $01", opcode: LoadImm8, args: [Register(0x00), Constant8(0x01=1)], resolved: None }
04 00 01 
# 00003 Instruction { source: "and8 r00 r00 -> r00", opcode: And8, args: [Register(0x00), Register(0x00), Register(0x00)], resolved: None }
1b 00 00 00 
# 00007 Instruction { source: "loadimm8 r01 <- 'H'", opcode: LoadImm8, args: [Register(0x01), Constant8(0x48=72)], resolved: None }
04 01 48 
# 0000a Instruction { source: "ttyout r01", opcode: Out0, args: [Register(0x01)], resolved: None }
68 01 
# 0000c Instruction { source: "loadimm8 r01 <- 'i'", opcode: LoadImm8, args: [Register(0x01), Constant8(0x69=105)], resolved: None }
04 01 69 
# 0000f Instruction { source: "ttyout r01", opcode: Out0, args: [Register(0x01)], resolved: None }
68 01 
# 00011 Instruction { source: "loadimm8 r01 <- '!'", opcode: LoadImm8, args: [Register(0x01), Constant8(0x21=33)], resolved: None }
04 01 21 
# 00014 Instruction { source: "ttyout r01", opcode: Out0, args: [Register(0x01)], resolved: None }
68 01 
# 00016 Instruction { source: "loadimm8 r01 <- $0A", opcode: LoadImm8, args: [Register(0x01), Constant8(0x0a=10)], resolved: None }
04 01 0a 
# 00019 Instruction { source: "ttyout r01", opcode: Out0, args: [Register(0x01)], resolved: None }
68 01 
# :prompt
# 0001b Instruction { source: "loadimm8 r01 <- '>'", opcode: LoadImm8, args: [Register(0x01), Constant8(0x3e=62)], resolved: None }
04 01 3e 
# 0001e Instruction { source: "ttyout r01", opcode: Out0, args: [Register(0x01)], resolved: None }
68 01 
# 00020 Instruction { source: "loadimm8 r01 <- ':'", opcode: LoadImm8, args: [Register(0x01), Constant8(0x3a=58)], resolved: None }
04 01 3a 
# 00023 Instruction { source: "ttyout r01", opcode: Out0, args: [Register(0x01)], resolved: None }
68 01 
# :read
# 00025 Instruction { source: "io_ready_to_read r02", opcode: IoReadyToRead, args: [Register(0x02)], resolved: None }
79 02 
# 00027 Instruction { source: "andimm8 r02 <- $01", opcode: AndImm8, args: [Register(0x02), Constant8(0x01=1)], resolved: None }
18 02 01 
# 0002a Instruction { source: "jzimm :read", opcode: JzImm, args: [Label24(:read)], resolved: None }
72 25 00 00 
# 0002e Instruction { source: "ttyin r01", opcode: In0, args: [Register(0x01)], resolved: None }
60 01 
# 00030 Instruction { source: "ttyout r01", opcode: Out0, args: [Register(0x01)], resolved: None }
68 01 
# 00032 Instruction { source: "and8 r01 r01 -> r02", opcode: And8, args: [Register(0x01), Register(0x01), Register(0x02)], resolved: None }
1b 01 01 02 
# 00036 Instruction { source: "xorimm8 r02 <- 'q'", opcode: XorImm8, args: [Register(0x02), Constant8(0x71=113)], resolved: None }
1a 02 71 
# 00039 Instruction { source: "jzimm :halt", opcode: JzImm, args: [Label24(:halt)], resolved: None }
72 4c 00 00 
# 0003d Instruction { source: "and8 r01 r01 -> r02", opcode: And8, args: [Register(0x01), Register(0x01), Register(0x02)], resolved: None }
1b 01 01 02 
# 00041 Instruction { source: "xorimm8 r02 <- $0A", opcode: XorImm8, args: [Register(0x02), Constant8(0x0a=10)], resolved: None }
1a 02 0a 
# 00044 Instruction { source: "jzimm :prompt", opcode: JzImm, args: [Label24(:prompt)], resolved: None }
72 1b 00 00 
# 00048 Instruction { source: "jmpimm :read", opcode: JmpImm, args: [Label24(:read)], resolved: None }
70 25 00 00 
# :halt
# 0004c Instruction { source: "halt $00000000", opcode: Halt, args: [Constant32(0x00000000=0)], resolved: None }
7e 00 00 00 00 
