v2.0 raw
# In IlFunctionId("KeyBoard_init"), optimizing round #0
# In IlFunctionId("KeyBoard_init"), in block from 0..=7, removing repetitive write at 4 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("KeyBoard_init"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #64 && #65: 'IlLabelId("Keyboard_poll_if_else_0_11")' and 'IlLabelId("Keyboard_poll_if_end_9")' to 'IlLabelId("Keyboard_poll_if_end_9")'
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #39 && #40: 'IlLabelId("Keyboard_poll_if_else_0_8")' and 'IlLabelId("Keyboard_poll_if_end_6")' to 'IlLabelId("Keyboard_poll_if_end_6")'
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #7 && #8: 'IlLabelId("Keyboard_poll_if_else_0_2")' and 'IlLabelId("Keyboard_poll_if_end_0")' to 'IlLabelId("Keyboard_poll_if_end_0")'
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #61: goto Keyboard_poll_if_end_9
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #37: goto Keyboard_poll_if_end_6
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #6: goto Keyboard_poll_if_end_0
# In IlFunctionId("Keyboard_poll"), optimizing round #3
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #58 && #59: 'IlLabelId("Keyboard_poll_if_end_12")' and 'IlLabelId("Keyboard_poll_if_end_9")' to 'IlLabelId("Keyboard_poll_if_end_9")'
# In IlFunctionId("Keyboard_poll"), optimizing round #4
# In IlFunctionId("RpnCalc_handle"), optimizing round #0
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #1
# In IlFunctionId("RpnCalc_handle"), optimizing round #2
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `stack` - which is also never modified. Replacing refs to latter with the former and deleting the copy: stack <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #3
# In IlFunctionId("RpnCalc_handle"), optimizing round #4
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `t7f48` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t7f48 <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #5
# In IlFunctionId("RpnCalc_handle"), optimizing round #6
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #254 && #255: 'IlLabelId("RpnCalc_handle_if_else_10_48")' and 'IlLabelId("RpnCalc_handle_if_end_23")' to 'IlLabelId("RpnCalc_handle_if_end_23")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #251 && #252: 'IlLabelId("RpnCalc_handle_if_else_0_51")' and 'IlLabelId("RpnCalc_handle_if_end_49")' to 'IlLabelId("RpnCalc_handle_if_end_49")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #84 && #85: 'IlLabelId("RpnCalc_handle_if_else_0_22")' and 'IlLabelId("RpnCalc_handle_if_end_20")' to 'IlLabelId("RpnCalc_handle_if_end_20")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #75 && #76: 'IlLabelId("RpnCalc_handle_if_else_0_19")' and 'IlLabelId("RpnCalc_handle_if_end_17")' to 'IlLabelId("RpnCalc_handle_if_end_17")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #66 && #67: 'IlLabelId("RpnCalc_handle_if_else_0_16")' and 'IlLabelId("RpnCalc_handle_if_end_14")' to 'IlLabelId("RpnCalc_handle_if_end_14")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #46 && #47: 'IlLabelId("RpnCalc_handle_if_else_0_13")' and 'IlLabelId("RpnCalc_handle_if_end_11")' to 'IlLabelId("RpnCalc_handle_if_end_11")'
# In IlFunctionId("RpnCalc_handle"), optimizing round #7
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #248: goto RpnCalc_handle_if_end_23
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #246: goto RpnCalc_handle_if_end_49
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #80: goto RpnCalc_handle_if_end_20
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #72: goto RpnCalc_handle_if_end_17
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #64: goto RpnCalc_handle_if_end_14
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #45: goto RpnCalc_handle_if_end_11
# In IlFunctionId("RpnCalc_handle"), optimizing round #8
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #242 && #243: 'IlLabelId("RpnCalc_handle_if_end_49")' and 'IlLabelId("RpnCalc_handle_if_end_23")' to 'IlLabelId("RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23")'
# In IlFunctionId("RpnCalc_handle"), optimizing round #9
# In IlFunctionId("RpnCalc_handle"), in block from 52..=63, removing repetitive write at 57 because it is the same as at 55: tf36 <- 0n82/0x52u8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #10
# In IlFunctionId("RpnCalc_init"), optimizing round #0
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #1
# In IlFunctionId("RpnCalc_init"), optimizing round #2
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `s` - which is also never modified. Replacing refs to latter with the former and deleting the copy: s <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #3
# In IlFunctionId("RpnCalc_init"), optimizing round #4
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb2e9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb2e9 <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #5
# In IlFunctionId("RpnCalc_init"), optimizing round #6
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb1ed` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb1ed <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #7
# In IlFunctionId("RpnCalc_init"), optimizing round #8
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #0
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #1
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #2
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `t4760` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4760 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #3
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #4
# In IlFunctionId("RpnCalc_push_pending"), merging duplicate labels at #19 && #20: 'IlLabelId("RpnCalc_push_pending_if_else_0_2")' and 'IlLabelId("RpnCalc_push_pending_if_end_0")' to 'IlLabelId("RpnCalc_push_pending_if_end_0")'
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #5
# In IlFunctionId("RpnCalc_push_pending"), removing no-op goto instruction #18: goto RpnCalc_push_pending_if_end_0
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #6
# In IlFunctionId("RpnCalc_run"), optimizing round #0
# In IlFunctionId("RpnCalc_run"), `calc` is never written to, but is copied to `td337` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td337 <- calc U32
# In IlFunctionId("RpnCalc_run"), optimizing round #1
# In IlFunctionId("RpnCalc_run"), optimizing round #2
# In IlFunctionId("RpnCalc_run"), merging duplicate labels at #18 && #19: 'IlLabelId("RpnCalc_run_while_end_2")' and 'IlLabelId("function_end_RpnCalc_run")' to 'IlLabelId("function_end_RpnCalc_run")'
# In IlFunctionId("RpnCalc_run"), merging duplicate labels at #15 && #16: 'IlLabelId("RpnCalc_run_if_else_0_5")' and 'IlLabelId("RpnCalc_run_if_end_3")' to 'IlLabelId("RpnCalc_run_if_end_3")'
# In IlFunctionId("RpnCalc_run"), optimizing round #3
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #14: goto RpnCalc_run_if_end_3
# In IlFunctionId("RpnCalc_run"), optimizing round #4
# In IlFunctionId("RpnCalc_run"), in block from 0..=3, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), optimizing round #5
# In IlFunctionId("add_U64"), optimizing round #0
# In IlFunctionId("add_U64"), `a` is never written to, but is copied to `t3203` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t3203 <- a U32
# In IlFunctionId("add_U64"), optimizing round #1
# In IlFunctionId("add_U64"), optimizing round #2
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `teec0` - which is also never modified. Replacing refs to latter with the former and deleting the copy: teec0 <- b U32
# In IlFunctionId("add_U64"), optimizing round #3
# In IlFunctionId("add_U64"), optimizing round #4
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `t24ae` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t24ae <- b U32
# In IlFunctionId("add_U64"), optimizing round #5
# In IlFunctionId("add_U64"), optimizing round #6
# In IlFunctionId("add_U64"), merging duplicate labels at #29 && #30: 'IlLabelId("add_U64_if_else_0_2")' and 'IlLabelId("add_U64_if_end_0")' to 'IlLabelId("add_U64_if_end_0")'
# In IlFunctionId("add_U64"), optimizing round #7
# In IlFunctionId("add_U64"), removing no-op goto instruction #28: goto add_U64_if_end_0
# In IlFunctionId("add_U64"), optimizing round #8
# In IlFunctionId("delay"), optimizing round #0
# In IlFunctionId("div16"), optimizing round #0
# In IlFunctionId("div16"), merging duplicate labels at #84 && #85: 'IlLabelId("div16_if_else_0_23")' and 'IlLabelId("div16_if_end_21")' to 'IlLabelId("div16_if_end_21")'
# In IlFunctionId("div16"), merging duplicate labels at #72 && #73: 'IlLabelId("div16_if_else_0_20")' and 'IlLabelId("div16_if_end_18")' to 'IlLabelId("div16_if_end_18")'
# In IlFunctionId("div16"), merging duplicate labels at #63 && #64: 'IlLabelId("div16_if_else_0_17")' and 'IlLabelId("div16_if_end_15")' to 'IlLabelId("div16_if_end_15")'
# In IlFunctionId("div16"), merging duplicate labels at #53 && #54: 'IlLabelId("div16_if_else_0_14")' and 'IlLabelId("div16_if_end_12")' to 'IlLabelId("div16_if_end_12")'
# In IlFunctionId("div16"), merging duplicate labels at #43 && #44: 'IlLabelId("div16_if_else_0_11")' and 'IlLabelId("div16_if_end_9")' to 'IlLabelId("div16_if_end_9")'
# In IlFunctionId("div16"), merging duplicate labels at #19 && #20: 'IlLabelId("div16_if_else_0_5")' and 'IlLabelId("div16_if_end_3")' to 'IlLabelId("div16_if_end_3")'
# In IlFunctionId("div16"), merging duplicate labels at #7 && #8: 'IlLabelId("div16_if_else_0_2")' and 'IlLabelId("div16_if_end_0")' to 'IlLabelId("div16_if_end_0")'
# In IlFunctionId("div16"), optimizing round #1
# In IlFunctionId("div16"), removing no-op goto instruction #77: goto div16_if_end_21
# In IlFunctionId("div16"), removing no-op goto instruction #66: goto div16_if_end_18
# In IlFunctionId("div16"), removing no-op goto instruction #58: goto div16_if_end_15
# In IlFunctionId("div16"), removing no-op goto instruction #49: goto div16_if_end_12
# In IlFunctionId("div16"), removing no-op goto instruction #40: goto div16_if_end_9
# In IlFunctionId("div16"), removing no-op goto instruction #17: goto div16_if_end_3
# In IlFunctionId("div16"), removing no-op goto instruction #6: goto div16_if_end_0
# In IlFunctionId("div16"), optimizing round #2
# In IlFunctionId("div32"), optimizing round #0
# In IlFunctionId("div32"), removing no-op il instruction: t4a94 <- te825 Add Number(0n0/0x00000000u32)
# In IlFunctionId("div32"), optimizing round #1
# In IlFunctionId("div32"), optimizing round #2
# In IlFunctionId("div32"), merging duplicate labels at #85 && #86: 'IlLabelId("div32_if_else_0_20")' and 'IlLabelId("div32_if_end_18")' to 'IlLabelId("div32_if_end_18")'
# In IlFunctionId("div32"), merging duplicate labels at #72 && #73: 'IlLabelId("div32_if_else_0_17")' and 'IlLabelId("div32_if_end_15")' to 'IlLabelId("div32_if_end_15")'
# In IlFunctionId("div32"), merging duplicate labels at #62 && #63: 'IlLabelId("div32_if_else_0_14")' and 'IlLabelId("div32_if_end_12")' to 'IlLabelId("div32_if_end_12")'
# In IlFunctionId("div32"), merging duplicate labels at #50 && #51: 'IlLabelId("div32_if_else_0_11")' and 'IlLabelId("div32_if_end_9")' to 'IlLabelId("div32_if_end_9")'
# In IlFunctionId("div32"), merging duplicate labels at #21 && #22: 'IlLabelId("div32_if_else_0_5")' and 'IlLabelId("div32_if_end_3")' to 'IlLabelId("div32_if_end_3")'
# In IlFunctionId("div32"), merging duplicate labels at #9 && #10: 'IlLabelId("div32_if_else_0_2")' and 'IlLabelId("div32_if_end_0")' to 'IlLabelId("div32_if_end_0")'
# In IlFunctionId("div32"), optimizing round #3
# In IlFunctionId("div32"), removing no-op goto instruction #79: goto div32_if_end_18
# In IlFunctionId("div32"), removing no-op goto instruction #67: goto div32_if_end_15
# In IlFunctionId("div32"), removing no-op goto instruction #58: goto div32_if_end_12
# In IlFunctionId("div32"), removing no-op goto instruction #47: goto div32_if_end_9
# In IlFunctionId("div32"), removing no-op goto instruction #19: goto div32_if_end_3
# In IlFunctionId("div32"), removing no-op goto instruction #8: goto div32_if_end_0
# In IlFunctionId("div32"), optimizing round #4
# In IlFunctionId("div32_by10"), optimizing round #0
# In IlFunctionId("div32_by10"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t1c61`.
# In IlFunctionId("div32_by10"), optimizing round #1
# In IlFunctionId("div32_by10"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("div32_by10"), optimizing round #2
# In IlFunctionId("div32_by10"), optimizing round #3
# In IlFunctionId("getchar"), optimizing round #0
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("getchar"), optimizing round #1
# In IlFunctionId("getchar"), merging duplicate labels at #23 && #24: 'IlLabelId("getchar_if_else_1_7")' and 'IlLabelId("getchar_if_end_3")' to 'IlLabelId("getchar_if_end_3")'
# In IlFunctionId("getchar"), optimizing round #2
# In IlFunctionId("getchar"), removing no-op goto instruction #22: goto getchar_if_end_3
# In IlFunctionId("getchar"), optimizing round #3
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), in block from 0..=21, removing repetitive write at 18 because it is the same as at 8: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_draw_char"), optimizing round #3
# In IlFunctionId("lcd_init"), optimizing round #0
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_init"), optimizing round #1
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 24 because it is the same as at 20: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 28 because it is the same as at 24: t385d <- 0n1/0x00000001u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 22 because it is the same as at 18: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 26 because it is the same as at 22: t3d69 <- 0n3/0x03u8 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 38 because it is the same as at 32: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 44 because it is the same as at 38: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 50 because it is the same as at 44: t9498 <- 0n2/0x00000002u32 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 34 because it is the same as at 30: t9f48 <- 0n2/0x02u8 
# In IlFunctionId("lcd_init"), in block from 17..=53, removing repetitive write at 46 because it is the same as at 40: ta97f <- 0n0/0x00u8 
# In IlFunctionId("lcd_init"), optimizing round #2
# In IlFunctionId("lcd_logical_to_physical"), optimizing round #0
# In IlFunctionId("lcd_putc"), optimizing round #0
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t9`.
# In IlFunctionId("lcd_putc"), optimizing round #1
# In IlFunctionId("lcd_putc"), merging duplicate labels at #53 && #54: 'IlLabelId("lcd_putc_if_else_0_8")' and 'IlLabelId("lcd_putc_if_end_6")' to 'IlLabelId("lcd_putc_if_end_6")'
# In IlFunctionId("lcd_putc"), optimizing round #2
# In IlFunctionId("lcd_putc"), removing no-op goto instruction #52: goto lcd_putc_if_end_6
# In IlFunctionId("lcd_putc"), optimizing round #3
# In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #21, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t3 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #22, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t4 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #36, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t6 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t7 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #41, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t8 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #4
# In IlFunctionId("lcd_putc"), optimizing round #5
# In IlFunctionId("lcd_putc"), in block from 14..=26, removing repetitive write at 21 because it is the same as at 15: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 14..=26, removing repetitive write at 22 because it is the same as at 21: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..=45, removing repetitive write at 36 because it is the same as at 30: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..=45, removing repetitive write at 40 because it is the same as at 36: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 29..=45, removing repetitive write at 41 because it is the same as at 40: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), optimizing round #0
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_scroll_up"), optimizing round #1
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #59 && #60: 'IlLabelId("lcd_scroll_up_if_else_0_11")' and 'IlLabelId("lcd_scroll_up_if_end_9")' to 'IlLabelId("lcd_scroll_up_if_end_9")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #37 && #38: 'IlLabelId("lcd_scroll_up_while_end_2")' and 'IlLabelId("lcd_scroll_up_while_predicate_6")' to 'IlLabelId("lcd_scroll_up_while_end_2")'
# In IlFunctionId("lcd_scroll_up"), merging duplicate labels at #32 && #33: 'IlLabelId("lcd_scroll_up_if_else_0_5")' and 'IlLabelId("lcd_scroll_up_if_end_3")' to 'IlLabelId("lcd_scroll_up_if_end_3")'
# In IlFunctionId("lcd_scroll_up"), optimizing round #2
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #56: goto lcd_scroll_up_if_end_9
# In IlFunctionId("lcd_scroll_up"), removing no-op goto instruction #31: goto lcd_scroll_up_if_end_3
# In IlFunctionId("lcd_scroll_up"), optimizing round #3
# In IlFunctionId("lcd_scroll_up"), in block from 46..=55, removing repetitive write at 53 because it is the same as at 50: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_scroll_up"), at #1, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #5
# In IlFunctionId("lcd_scroll_up"), optimizing round #6
# In IlFunctionId("lcd_scroll_up"), in block from 0..=6, removing repetitive write at 1 because it is the same as at 0: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #7
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `tca8`.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), in block from 0..=14, removing repetitive write at 11 because it is the same as at 5: tca8 <- 0n987664/0x000f1210u32 
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("mul16_32"), optimizing round #0
# In IlFunctionId("mul16_32"), in block from 0..=42, removing repetitive write at 14 because it is the same as at 12: ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul16_32"), in block from 0..=42, removing repetitive write at 36 because it is the same as at 14: ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul16_32"), optimizing round #1
# In IlFunctionId("mul32_32"), optimizing round #0
# In IlFunctionId("mul32_32"), in block from 0..=32, removing repetitive write at 26 because it is the same as at 24: ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_32"), optimizing round #1
# In IlFunctionId("mul32_64"), optimizing round #0
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t8956` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8956 <- c U32
# In IlFunctionId("mul32_64"), optimizing round #1
# In IlFunctionId("mul32_64"), optimizing round #2
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t2558` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t2558 <- c U32
# In IlFunctionId("mul32_64"), optimizing round #3
# In IlFunctionId("mul32_64"), optimizing round #4
# In IlFunctionId("mul32_by10"), optimizing round #0
# In IlFunctionId("mul8"), optimizing round #0
# In IlFunctionId("mul8"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8"), optimizing round #1
# In IlFunctionId("mul8"), optimizing round #2
# In IlFunctionId("mul8"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8"), optimizing round #3
# In IlFunctionId("mul8"), optimizing round #4
# In IlFunctionId("mul8_16"), optimizing round #0
# In IlFunctionId("mul8_16"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8_16"), optimizing round #1
# In IlFunctionId("mul8_16"), optimizing round #2
# In IlFunctionId("mul8_16"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8_16"), optimizing round #3
# In IlFunctionId("mul8_16"), optimizing round #4
# In IlFunctionId("print_dec32"), optimizing round #0
# In IlFunctionId("print_dec32"), merging duplicate labels at #8 && #9: 'IlLabelId("print_dec32_if_else_0_2")' and 'IlLabelId("print_dec32_if_end_0")' to 'IlLabelId("print_dec32_if_end_0")'
# In IlFunctionId("print_dec32"), optimizing round #1
# In IlFunctionId("print_dec32"), removing no-op goto instruction #7: goto print_dec32_if_end_0
# In IlFunctionId("print_dec32"), optimizing round #2
# In IlFunctionId("print_dec32_test"), optimizing round #0
# In IlFunctionId("print_dec32_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("print_dec32_test"), optimizing round #1
# In IlFunctionId("print_dec32_test"), optimizing round #2
# In IlFunctionId("print_dec8"), optimizing round #0
# In IlFunctionId("print_dec8"), merging duplicate labels at #13 && #14: 'IlLabelId("print_dec8_if_else_0_2")' and 'IlLabelId("print_dec8_if_end_0")' to 'IlLabelId("print_dec8_if_end_0")'
# In IlFunctionId("print_dec8"), optimizing round #1
# In IlFunctionId("print_dec8"), removing no-op goto instruction #12: goto print_dec8_if_end_0
# In IlFunctionId("print_dec8"), optimizing round #2
# In IlFunctionId("print_dec8_test"), optimizing round #0
# In IlFunctionId("print_dec8_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U8
# In IlFunctionId("print_dec8_test"), optimizing round #1
# In IlFunctionId("print_dec8_test"), optimizing round #2
# In IlFunctionId("print_digit"), optimizing round #0
# In IlFunctionId("println"), optimizing round #0
# In IlFunctionId("putc"), optimizing round #0
# In IlFunctionId("putc"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("putc"), optimizing round #1
# In IlFunctionId("putc"), merging duplicate labels at #10 && #11: 'IlLabelId("putc_if_else_0_2")' and 'IlLabelId("putc_if_end_0")' to 'IlLabelId("putc_if_end_0")'
# In IlFunctionId("putc"), optimizing round #2
# In IlFunctionId("putc"), removing no-op goto instruction #9: goto putc_if_end_0
# In IlFunctionId("putc"), optimizing round #3
# In IlFunctionId("queue_init"), optimizing round #0
# In IlFunctionId("queue_init"), in block from 0..=9, removing repetitive write at 6 because it is the same as at 2: ta97f <- 0n0/0x00u8 
# In IlFunctionId("queue_init"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #0
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #2
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), optimizing round #3
# In IlFunctionId("queue_pop"), optimizing round #4
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_pop"), optimizing round #5
# In IlFunctionId("queue_pop"), optimizing round #6
# In IlFunctionId("queue_pop"), merging duplicate labels at #11 && #12: 'IlLabelId("queue_pop_if_else_0_2")' and 'IlLabelId("queue_pop_if_end_0")' to 'IlLabelId("queue_pop_if_end_0")'
# In IlFunctionId("queue_pop"), optimizing round #7
# In IlFunctionId("queue_pop"), removing no-op goto instruction #10: goto queue_pop_if_end_0
# In IlFunctionId("queue_pop"), optimizing round #8
# In IlFunctionId("queue_push"), optimizing round #0
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), optimizing round #1
# In IlFunctionId("queue_push"), optimizing round #2
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), optimizing round #3
# In IlFunctionId("queue_push"), optimizing round #4
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), optimizing round #5
# In IlFunctionId("queue_push"), optimizing round #6
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# In IlFunctionId("queue_push"), optimizing round #7
# In IlFunctionId("queue_push"), optimizing round #8
# In IlFunctionId("readline"), optimizing round #0
# In IlFunctionId("readline"), in block from 0..=3, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("readline"), optimizing round #1
# In IlFunctionId("shiftright1"), optimizing round #0
# In IlFunctionId("shiftright3"), optimizing round #0
# In IlFunctionId("stack_get"), optimizing round #0
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_get"), optimizing round #1
# In IlFunctionId("stack_get"), optimizing round #2
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_get"), optimizing round #3
# In IlFunctionId("stack_get"), optimizing round #4
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_get"), optimizing round #5
# In IlFunctionId("stack_get"), optimizing round #6
# In IlFunctionId("stack_get"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stack_get"), optimizing round #7
# In IlFunctionId("stack_get"), optimizing round #8
# In IlFunctionId("stack_init"), optimizing round #0
# In IlFunctionId("stack_init"), `s` is never written to, but is copied to `t4bb9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4bb9 <- s U32
# In IlFunctionId("stack_init"), optimizing round #1
# In IlFunctionId("stack_init"), optimizing round #2
# In IlFunctionId("stack_pop"), optimizing round #0
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_pop"), optimizing round #1
# In IlFunctionId("stack_pop"), optimizing round #2
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_pop"), optimizing round #3
# In IlFunctionId("stack_pop"), optimizing round #4
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_pop"), optimizing round #5
# In IlFunctionId("stack_pop"), optimizing round #6
# In IlFunctionId("stack_push"), optimizing round #0
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_push"), optimizing round #1
# In IlFunctionId("stack_push"), optimizing round #2
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_push"), optimizing round #3
# In IlFunctionId("stack_push"), optimizing round #4
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), optimizing round #5
# In IlFunctionId("stack_push"), optimizing round #6
# In IlFunctionId("stack_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stack_push"), optimizing round #7
# In IlFunctionId("stack_push"), optimizing round #8
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), in block from 0..=11, removing repetitive write at 4 because it is the same as at 1: ta11a <- 0n1/0x01u8 
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("test_add_U64"), optimizing round #0
# In IlFunctionId("test_add_U64"), resolved the constant val `Number(0n987740/0x000f125cu32)` for var `tcc7b`.
# In IlFunctionId("test_add_U64"), optimizing round #1
# In IlFunctionId("test_add_U64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_add_U64"), optimizing round #2
# In IlFunctionId("test_add_U64"), optimizing round #3
# In IlFunctionId("test_add_U64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("test_add_U64"), optimizing round #4
# In IlFunctionId("test_add_U64"), optimizing round #5
# In IlFunctionId("test_add_U64"), in block from 0..=4, removing repetitive write at 2 because it is the same as at 0: tcc7b <- 0n987740/0x000f125cu32 
# In IlFunctionId("test_add_U64"), optimizing round #6
# In IlFunctionId("test_delay"), optimizing round #0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_delay"), optimizing round #1
# In IlFunctionId("test_delay"), optimizing round #2
# In IlFunctionId("test_echoline"), optimizing round #0
# In IlFunctionId("test_mul32_64"), optimizing round #0
# In IlFunctionId("test_mul32_64"), resolved the constant val `Number(0n987748/0x000f1264u32)` for var `tcc7b`.
# In IlFunctionId("test_mul32_64"), optimizing round #1
# In IlFunctionId("test_mul32_64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_mul32_64"), optimizing round #2
# In IlFunctionId("test_mul32_64"), optimizing round #3
# In IlFunctionId("test_mul32_64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("test_mul32_64"), optimizing round #4
# In IlFunctionId("test_mul32_64"), optimizing round #5
# In IlFunctionId("test_mul32_64"), in block from 0..=4, removing repetitive write at 2 because it is the same as at 0: tcc7b <- 0n987748/0x000f1264u32 
# In IlFunctionId("test_mul32_64"), optimizing round #6
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_s`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_t4d4f`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_Keyboard_poll_queue_push_37_tc1ff`.
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #3
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #4
# In IlFunctionId("Keyboard_poll"), optimizing round #5
# In IlFunctionId("Keyboard_poll"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Keyboard.j':(31,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("Keyboard_poll"), optimizing round #6
# In IlFunctionId("Keyboard_poll"), optimizing round #7
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #46: goto inline_Keyboard_poll_queue_push_37_function_end_queue_push
# In IlFunctionId("Keyboard_poll"), optimizing round #8
# In IlFunctionId("Keyboard_poll"), merging duplicate labels at #46 && #47: 'IlLabelId("inline_Keyboard_poll_queue_push_37_function_end_queue_push")' and 'IlLabelId("Keyboard_poll_if_end_6")' to 'IlLabelId("Keyboard_poll_if_end_6")'
# In IlFunctionId("Keyboard_poll"), optimizing round #9
# In IlFunctionId("Keyboard_poll"), in block from 32..=46, removing repetitive write at 41 because it is the same as at 36: inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("Keyboard_poll"), in block from 32..=46, removing repetitive write at 42 because it is the same as at 41: inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("Keyboard_poll"), optimizing round #10
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_tac13`.
# In IlFunctionId("RpnCalc_handle"), optimizing round #0
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), optimizing round #1
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_15_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #2
# In IlFunctionId("RpnCalc_handle"), optimizing round #3
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_16_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #4
# In IlFunctionId("RpnCalc_handle"), optimizing round #5
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_17_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #6
# In IlFunctionId("RpnCalc_handle"), optimizing round #7
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_18_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #8
# In IlFunctionId("RpnCalc_handle"), optimizing round #9
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_19_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #10
# In IlFunctionId("RpnCalc_handle"), optimizing round #11
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_20_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #12
# In IlFunctionId("RpnCalc_handle"), optimizing round #13
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_21_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #14
# In IlFunctionId("RpnCalc_handle"), optimizing round #15
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_22_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #16
# In IlFunctionId("RpnCalc_handle"), optimizing round #17
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_23_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #18
# In IlFunctionId("RpnCalc_handle"), optimizing round #19
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_24_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #20
# In IlFunctionId("RpnCalc_handle"), optimizing round #21
# In IlFunctionId("RpnCalc_handle"), var `t506b` is written to, but never read. Removing the instruction that writes to it: (t506b <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Number(0n58/0x3au8)", "Number(0n58/0x3au8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #22
# In IlFunctionId("RpnCalc_handle"), optimizing round #23
# In IlFunctionId("RpnCalc_handle"), var `t7ec4` is written to, but never read. Removing the instruction that writes to it: (t7ec4 <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Number(0n69/0x45u8)", "Number(0n69/0x45u8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #24
# In IlFunctionId("RpnCalc_handle"), optimizing round #25
# In IlFunctionId("RpnCalc_handle"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #26
# In IlFunctionId("RpnCalc_handle"), optimizing round #27
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #770: goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #731: goto inline_RpnCalc_handle_putc_24_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #717: goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #706: goto inline_RpnCalc_handle_putc_23_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #680: goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #675: goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #661: goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #650: goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #616: goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #605: goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #563: goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #544: goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #519: goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #500: goto inline_RpnCalc_handle_putc_22_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #476: goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #457: goto inline_RpnCalc_handle_putc_21_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #442: goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #428: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #382: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #326: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #270: goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #251: goto inline_RpnCalc_handle_putc_20_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #227: goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #208: goto inline_RpnCalc_handle_putc_19_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #185: goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #162: goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #137: goto inline_RpnCalc_handle_putc_18_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #124: goto inline_RpnCalc_handle_putc_17_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #112: goto inline_RpnCalc_handle_putc_16_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #100: goto inline_RpnCalc_handle_putc_15_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #80: goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #69: goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), optimizing round #28
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #700 && #701: 'IlLabelId("inline_RpnCalc_handle_putc_24_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_24_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_24_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #677 && #678: 'IlLabelId("inline_RpnCalc_handle_putc_23_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_23_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_23_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #635 && #636: 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending")' to 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #592 && #593: 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending")' to 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #481 && #482: 'IlLabelId("inline_RpnCalc_handle_putc_22_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_22_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_22_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #440 && #441: 'IlLabelId("inline_RpnCalc_handle_putc_21_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_21_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_21_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #240 && #241: 'IlLabelId("inline_RpnCalc_handle_putc_20_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_20_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_20_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #199 && #200: 'IlLabelId("inline_RpnCalc_handle_putc_19_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_19_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_19_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #178 && #179: 'IlLabelId("inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop")' and 'IlLabelId("RpnCalc_handle_if_end_20")' to 'IlLabelId("RpnCalc_handle_if_end_20")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #156 && #157: 'IlLabelId("inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop")' and 'IlLabelId("RpnCalc_handle_if_end_17")' to 'IlLabelId("RpnCalc_handle_if_end_17")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #131 && #132: 'IlLabelId("inline_RpnCalc_handle_putc_18_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_18_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_18_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #119 && #120: 'IlLabelId("inline_RpnCalc_handle_putc_17_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_17_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_17_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #108 && #109: 'IlLabelId("inline_RpnCalc_handle_putc_16_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_16_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_16_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #97 && #98: 'IlLabelId("inline_RpnCalc_handle_putc_15_putc_if_end_0")' and 'IlLabelId("inline_RpnCalc_handle_putc_15_function_end_putc")' to 'IlLabelId("inline_RpnCalc_handle_putc_15_putc_if_end_0")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #79 && #80: 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending")' and 'IlLabelId("RpnCalc_handle_if_end_11")' to 'IlLabelId("RpnCalc_handle_if_end_11")'
# In IlFunctionId("RpnCalc_handle"), merging duplicate labels at #78 && #79: 'IlLabelId("inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0")' and 'IlLabelId("RpnCalc_handle_if_end_11")' to 'IlLabelId("RpnCalc_handle_if_end_11")'
# In IlFunctionId("RpnCalc_handle"), optimizing round #29
# In IlFunctionId("RpnCalc_handle"), at #638, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #637, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #73, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #575, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #574, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #551, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #579, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #550, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #578, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #617, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #616, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #593, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #621, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #592, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #620, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #277, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #278, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #299, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #276, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #332, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #333, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #354, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #331, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #377, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #378, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #399, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #376, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #411, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #412, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #410, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #91, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #90, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #99, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #98, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #101, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #100, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #111, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #110, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #107, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #114, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #106, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# In IlFunctionId("RpnCalc_handle"), at #113, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #122, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #185, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #184, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #187, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #186, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #183, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #190, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #182, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #189, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #225, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #224, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #227, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #226, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #223, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #230, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #222, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #229, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #424, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #423, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #426, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #425, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #422, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #429, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #421, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #428, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #464, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #463, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #466, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #465, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #462, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #469, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #461, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #468, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #657, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #656, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #658, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #679, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #678, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #681, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'
# In IlFunctionId("RpnCalc_handle"), at #680, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #677, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #684, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #676, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #683, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #543, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# In IlFunctionId("RpnCalc_handle"), at #116, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #181, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #221, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #420, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #542, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #675, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'
# In IlFunctionId("RpnCalc_handle"), at #132, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'
# In IlFunctionId("RpnCalc_handle"), at #538, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
# In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #131, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #537, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #30
# In IlFunctionId("RpnCalc_handle"), optimizing round #31
# In IlFunctionId("RpnCalc_handle"), in block from 115..=122, removing repetitive write at 117 because it is the same as at 116: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 175..=187, removing repetitive write at 182 because it is the same as at 181: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 215..=227, removing repetitive write at 222 because it is the same as at 221: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 417..=426, removing repetitive write at 421 because it is the same as at 420: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 454..=466, removing repetitive write at 461 because it is the same as at 460: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 673..=681, removing repetitive write at 676 because it is the same as at 675: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #32
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff`.
# In IlFunctionId("RpnCalc_run"), optimizing round #0
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), optimizing round #1
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #2
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #3
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #4
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #5
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #6
# In IlFunctionId("RpnCalc_run"), optimizing round #7
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #8
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #9
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #10
# In IlFunctionId("RpnCalc_run"), optimizing round #11
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), optimizing round #12
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), optimizing round #13
# In IlFunctionId("RpnCalc_run"), optimizing round #14
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #68: goto inline_RpnCalc_run_getchar_39_function_end_getchar
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #62: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #28: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# In IlFunctionId("RpnCalc_run"), optimizing round #15
# In IlFunctionId("RpnCalc_run"), in block from 14..=28, removing repetitive write at 23 because it is the same as at 18: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), in block from 14..=28, removing repetitive write at 24 because it is the same as at 23: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), in block from 48..=61, removing repetitive write at 54 because it is the same as at 49: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 
# In IlFunctionId("RpnCalc_run"), in block from 48..=61, removing repetitive write at 55 because it is the same as at 54: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 
# In IlFunctionId("RpnCalc_run"), optimizing round #16
# In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
# In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
# In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
# In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
# In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
# In IlFunctionId("RpnCalc_run"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'
# In IlFunctionId("RpnCalc_run"), at #7, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
# In IlFunctionId("RpnCalc_run"), at #67, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
# In IlFunctionId("RpnCalc_run"), at #70, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
# In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #66, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #69, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), optimizing round #17
# In IlFunctionId("RpnCalc_run"), optimizing round #18
# In IlFunctionId("div32"), removing no-op goto instruction #285: goto inline_div32_shiftright1_45_function_end_shiftright1
# In IlFunctionId("div32"), removing no-op goto instruction #240: goto inline_div32_shiftright1_44_function_end_shiftright1
# In IlFunctionId("div32"), removing no-op goto instruction #185: goto inline_div32_div16_43_function_end_div16
# In IlFunctionId("div32"), removing no-op goto instruction #134: goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# In IlFunctionId("div32"), removing no-op goto instruction #88: goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# In IlFunctionId("div32"), optimizing round #0
# In IlFunctionId("div32"), at #136, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'
# In IlFunctionId("div32"), at #144, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'
# In IlFunctionId("div32"), at #135, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), at #143, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
# In IlFunctionId("div32"), at #292, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
# In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("div32"), at #291, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("div32"), optimizing round #1
# In IlFunctionId("div32"), optimizing round #2
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `inline_lcd_draw_char_lcd_logical_to_physical_3_i` - which is also never modified. Replacing refs to latter with the former and deleting the copy: inline_lcd_draw_char_lcd_logical_to_physical_3_i <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), removing no-op goto instruction #14: goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987728/0x000f1250u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987732/0x000f1254u32)` for var `inline_main_RpnCalc_init_51_t6e8e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_tac13`.
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 , Some('programs/app/rpn.j':(12,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("main"), optimizing round #3
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 , Some('/lutcomp/programs/lib/rpnlib.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), optimizing round #4
# In IlFunctionId("main"), optimizing round #5
# In IlFunctionId("main"), var `inline_main_putc_25_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_25_c <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("main"), optimizing round #6
# In IlFunctionId("main"), optimizing round #7
# In IlFunctionId("main"), var `inline_main_putc_26_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_26_c <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `."] })
# In IlFunctionId("main"), optimizing round #8
# In IlFunctionId("main"), optimizing round #9
# In IlFunctionId("main"), var `inline_main_putc_27_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_27_c <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `."] })
# In IlFunctionId("main"), optimizing round #10
# In IlFunctionId("main"), optimizing round #11
# In IlFunctionId("main"), var `inline_main_putc_28_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_28_c <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("main"), optimizing round #12
# In IlFunctionId("main"), optimizing round #13
# In IlFunctionId("main"), var `t25ee` is written to, but never read. Removing the instruction that writes to it: (t25ee <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Number(0n10/0x0au8)", "Number(0n10/0x0au8)"] })
# In IlFunctionId("main"), optimizing round #14
# In IlFunctionId("main"), optimizing round #15
# In IlFunctionId("main"), var `t6adf` is written to, but never read. Removing the instruction that writes to it: (t6adf <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Number(0n78/0x4eu8)", "Number(0n78/0x4eu8)"] })
# In IlFunctionId("main"), optimizing round #16
# In IlFunctionId("main"), optimizing round #17
# In IlFunctionId("main"), var `td749` is written to, but never read. Removing the instruction that writes to it: (td749 <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Number(0n80/0x50u8)", "Number(0n80/0x50u8)"] })
# In IlFunctionId("main"), optimizing round #18
# In IlFunctionId("main"), optimizing round #19
# In IlFunctionId("main"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("main"), optimizing round #20
# In IlFunctionId("main"), optimizing round #21
# In IlFunctionId("main"), removing no-op goto instruction #58: goto inline_main_putc_28_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #46: goto inline_main_putc_27_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #34: goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# In IlFunctionId("main"), removing no-op goto instruction #29: goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("main"), removing no-op goto instruction #23: goto inline_main_putc_26_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #11: goto inline_main_putc_25_function_end_putc
# In IlFunctionId("main"), optimizing round #22
# In IlFunctionId("main"), merging duplicate labels at #52 && #53: 'IlLabelId("inline_main_putc_28_putc_if_end_0")' and 'IlLabelId("inline_main_putc_28_function_end_putc")' to 'IlLabelId("inline_main_putc_28_putc_if_end_0")'
# In IlFunctionId("main"), merging duplicate labels at #41 && #42: 'IlLabelId("inline_main_putc_27_putc_if_end_0")' and 'IlLabelId("inline_main_putc_27_function_end_putc")' to 'IlLabelId("inline_main_putc_27_putc_if_end_0")'
# In IlFunctionId("main"), merging duplicate labels at #21 && #22: 'IlLabelId("inline_main_putc_26_putc_if_end_0")' and 'IlLabelId("inline_main_putc_26_function_end_putc")' to 'IlLabelId("inline_main_putc_26_putc_if_end_0")'
# In IlFunctionId("main"), merging duplicate labels at #10 && #11: 'IlLabelId("inline_main_putc_25_putc_if_end_0")' and 'IlLabelId("inline_main_putc_25_function_end_putc")' to 'IlLabelId("inline_main_putc_25_putc_if_end_0")'
# In IlFunctionId("main"), optimizing round #23
# In IlFunctionId("main"), at #28, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("main"), at #27, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  -> inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("main"), at #14, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #13, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'
# In IlFunctionId("main"), at #15, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #33, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #32, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #35, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'
# In IlFunctionId("main"), at #34, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #43, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #42, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #45, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'
# In IlFunctionId("main"), at #44, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #24
# In IlFunctionId("main"), optimizing round #25
# In IlFunctionId("mul32_64"), removing no-op goto instruction #306: goto inline_mul32_64_add_U64_1_function_end_add_U64
# In IlFunctionId("mul32_64"), removing no-op goto instruction #252: goto inline_mul32_64_mul16_32_11_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #206: goto inline_mul32_64_add_U64_0_function_end_add_U64
# In IlFunctionId("mul32_64"), removing no-op goto instruction #152: goto inline_mul32_64_mul16_32_10_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #103: goto inline_mul32_64_mul16_32_9_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #55: goto inline_mul32_64_mul16_32_8_function_end_mul16_32
# In IlFunctionId("mul32_64"), optimizing round #0
# In IlFunctionId("mul32_64"), merging duplicate labels at #300 && #301: 'IlLabelId("inline_mul32_64_add_U64_1_add_U64_if_end_0")' and 'IlLabelId("inline_mul32_64_add_U64_1_function_end_add_U64")' to 'IlLabelId("inline_mul32_64_add_U64_1_add_U64_if_end_0")'
# In IlFunctionId("mul32_64"), merging duplicate labels at #202 && #203: 'IlLabelId("inline_mul32_64_add_U64_0_add_U64_if_end_0")' and 'IlLabelId("inline_mul32_64_add_U64_0_function_end_add_U64")' to 'IlLabelId("inline_mul32_64_add_U64_0_add_U64_if_end_0")'
# In IlFunctionId("mul32_64"), optimizing round #1
# In IlFunctionId("mul32_64"), at #220, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #221, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #242, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #219, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #76, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #97, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #74, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), optimizing round #2
# In IlFunctionId("mul32_64"), optimizing round #3
# In IlFunctionId("print_dec32"), removing no-op goto instruction #96: goto inline_print_dec32_putc_29_function_end_putc
# In IlFunctionId("print_dec32"), removing no-op goto instruction #80: goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# In IlFunctionId("print_dec32"), removing no-op goto instruction #60: goto inline_print_dec32_div32_by10_47_function_end_div32_by10
# In IlFunctionId("print_dec32"), removing no-op goto instruction #57: goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# In IlFunctionId("print_dec32"), optimizing round #0
# In IlFunctionId("print_dec32"), merging duplicate labels at #92 && #93: 'IlLabelId("inline_print_dec32_putc_29_putc_if_end_0")' and 'IlLabelId("inline_print_dec32_putc_29_function_end_putc")' to 'IlLabelId("inline_print_dec32_putc_29_putc_if_end_0")'
# In IlFunctionId("print_dec32"), optimizing round #1
# In IlFunctionId("print_dec8"), removing no-op goto instruction #26: goto inline_print_dec8_putc_30_function_end_putc
# In IlFunctionId("print_dec8"), optimizing round #0
# In IlFunctionId("print_dec8"), merging duplicate labels at #25 && #26: 'IlLabelId("inline_print_dec8_putc_30_putc_if_end_0")' and 'IlLabelId("inline_print_dec8_putc_30_function_end_putc")' to 'IlLabelId("inline_print_dec8_putc_30_putc_if_end_0")'
# In IlFunctionId("print_dec8"), optimizing round #1
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_s`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_t4d4f`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_stdio_init_queue_init_35_tb702`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_stdio_init_queue_init_35_tc1ff`.
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_s` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("stdio_init"), optimizing round #3
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #4
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #5
# In IlFunctionId("stdio_init"), optimizing round #6
# In IlFunctionId("stdio_init"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("stdio_init"), optimizing round #7
# In IlFunctionId("stdio_init"), optimizing round #8
# In IlFunctionId("stdio_init"), removing no-op goto instruction #10: goto inline_stdio_init_queue_init_35_function_end_queue_init
# In IlFunctionId("stdio_init"), optimizing round #9
# IlFunctionId("KeyBoard_init")()
# 00: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 01: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 02: mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# 03: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# 04: mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# 05: return None # None
# 06: :function_end_KeyBoard_init # None
# 07: Unreachable # None

# IlFunctionId("Keyboard_poll")()
# 00: Some(t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 01: t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 02: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 03: if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 04: :Keyboard_poll_if_true_0_1 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 05: return None # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 06: :Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 07: Some(code) <= call io_read2() # Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# 08: tf68c <- code U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 09: t528d U32 <- tf68c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 10: index <- t528d Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# 11: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 12: t379c <- mem[td45b] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 13: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 14: if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 15: :Keyboard_poll_if_true_0_4 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 16: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 17: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 18: t674 <- td18e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 19: t23a <- t4c8b Add Var(t674) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 20: c <- mem[t23a] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 21: goto Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 22: :Keyboard_poll_if_else_0_5 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 23: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 24: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 25: tb62e <- t4c8b Add Var(td18e) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 26: c <- mem[tb62e] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 27: :Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 28: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 29: t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 30: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 31: if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 32: :Keyboard_poll_if_true_0_7 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 33: tac13 <- c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 34: inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 35: inline_Keyboard_poll_queue_push_37_n <- tac13 U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 36: inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 37: inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 38: inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 39: inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 40: mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 41: inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 42: inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 43: mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 44: :Keyboard_poll_if_end_6 # None
# 45: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 46: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 47: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 48: te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 49: ted94 <- t4c8b Add Var(te5cf) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 50: t2ca9 <- mem[ted94] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 51: if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 52: :Keyboard_poll_if_true_0_10 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 53: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 54: t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 55: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 56: if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 57: :Keyboard_poll_if_true_0_13 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 58: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 59: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 60: mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 61: goto Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 62: :Keyboard_poll_if_else_0_14 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 63: td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 64: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 65: mem[td45b] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 66: :Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 67: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 68: t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 69: td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 70: t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 71: t6cd9 <- t4c8b Add Var(t5e63) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 72: t7b09 <- mem[t6cd9] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 73: if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 74: :Keyboard_poll_if_true_0_16 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 75: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 76: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 77: mem[tdaa] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 78: goto Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 79: :Keyboard_poll_if_else_0_17 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 80: tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 81: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 82: mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 83: :Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 84: return None # None
# 85: :function_end_Keyboard_poll # None
# 86: Unreachable # None

# IlFunctionId("RpnCalc_handle")(c,ch,)
# 00: a <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# 01: b <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# 02: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 03: tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 04: if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 05: :RpnCalc_handle_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 06: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 07: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 08: :RpnCalc_handle_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 09: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 10: t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 11: if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 12: :RpnCalc_handle_if_true_1_3 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 13: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 14: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 15: :RpnCalc_handle_if_else_1_4 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 16: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 17: t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 18: if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 19: :RpnCalc_handle_if_true_2_5 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 20: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 21: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 22: :RpnCalc_handle_if_else_2_6 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 23: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 24: t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 25: if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 26: :RpnCalc_handle_if_true_3_7 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 27: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 28: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 29: :RpnCalc_handle_if_else_3_8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 30: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 31: tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 32: if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 33: :RpnCalc_handle_if_true_4_9 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 34: stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 35: goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 36: :RpnCalc_handle_if_else_4_10 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 37: stack_needed <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 38: :RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 39: t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 40: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 41: if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 42: :RpnCalc_handle_if_true_0_12 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 43: tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 44: inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 45: inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 46: inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 47: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 48: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 49: if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 50: :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 51: inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 52: inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 53: inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 54: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 55: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 56: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 57: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 58: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 59: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 60: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 61: mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 62: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 63: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 64: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 65: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 66: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 67: inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 68: mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 69: :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
# 70: inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 71: inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 72: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 73: mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 74: inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 75: inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 76: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 77: mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 78: :RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 79: tbf93 <- c Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# 80: stack_count_usize <- mem[tbf93] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# 81: stack_count <- stack_count_usize[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# 82: t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 83: t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 84: if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 85: :RpnCalc_handle_if_true_0_15 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 86: inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 87: None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 88: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 89: inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 90: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 91: if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 92: :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 93: inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 94: None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 95: :inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 96: inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 97: None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 98: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 99: inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 100: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 101: if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 102: :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 103: inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 104: None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 105: :inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 106: inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 107: None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 108: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 109: inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 110: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 111: if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 112: :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 113: inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 114: None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 115: :inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 116: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 117: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 118: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 119: inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 120: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 121: if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 122: :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 123: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 124: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 125: :inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 126: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 127: return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 128: :RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 129: t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 130: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 131: if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 132: :RpnCalc_handle_if_true_0_18 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 133: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 134: inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 135: inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 136: inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 137: inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 138: inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 139: inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 140: inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 141: mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 142: inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 143: inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 144: inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 145: inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 146: inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 147: inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 148: a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 149: :RpnCalc_handle_if_end_17 # None
# 150: t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 151: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 152: if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 153: :RpnCalc_handle_if_true_0_21 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 154: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 155: inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 156: inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 157: inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 158: inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 159: inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 160: inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 161: inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 162: mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
# 163: inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 164: inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 165: inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 166: inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 167: inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 168: inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 169: b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
# 170: :RpnCalc_handle_if_end_20 # None
# 171: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 172: tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 173: if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 174: :RpnCalc_handle_if_true_0_24 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 175: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 176: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 177: sum <- tace9 Add Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 178: t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 179: None <= call print_dec32(t670d,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 180: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 181: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 182: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 183: inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 184: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 185: if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 186: :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 187: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 188: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 189: :inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 190: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 191: t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 192: inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 193: inline_RpnCalc_handle_stack_push_54_n <- t670d U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 194: inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 195: inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 196: inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 197: inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 198: inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 199: mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 200: inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 201: inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 202: inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 203: inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 204: inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 205: inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 206: mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 207: :inline_RpnCalc_handle_stack_push_54_function_end_stack_push # None
# 208: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 209: :RpnCalc_handle_if_else_0_25 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 210: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 211: t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 212: if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 213: :RpnCalc_handle_if_true_1_26 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 214: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 215: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 216: diff <- tace9 Subtract Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 217: t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 218: None <= call print_dec32(t17ee,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 219: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 220: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 221: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 222: inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 223: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 224: if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 225: :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 226: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 227: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 228: :inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 229: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 230: t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 231: inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 232: inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 233: inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 234: inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 235: inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 236: inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 237: inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 238: mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 239: inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 240: inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 241: inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 242: inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 243: inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 244: inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 245: mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 246: :inline_RpnCalc_handle_stack_push_55_function_end_stack_push # None
# 247: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 248: :RpnCalc_handle_if_else_1_27 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 249: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 250: t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 251: if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 252: :RpnCalc_handle_if_true_2_28 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 253: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 254: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 255: inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 256: inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 257: inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
# 258: inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
# 259: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
# 260: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
# 261: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 262: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 263: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 264: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 265: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 266: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 267: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 268: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 269: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 270: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 271: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 272: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 273: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 274: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 275: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 276: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 277: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 278: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 279: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 280: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 281: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 282: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 283: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 284: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 285: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 286: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 287: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 288: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 289: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 290: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 291: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 292: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 293: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 294: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 295: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 296: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 297: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 298: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 299: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 300: inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 301: :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 # None
# 302: inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(32,5))
# 303: inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
# 304: inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
# 305: inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
# 306: inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
# 307: inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(36,5))
# 308: inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
# 309: inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
# 310: inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
# 311: inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
# 312: inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 313: inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 314: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 315: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 316: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 317: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 318: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 319: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 320: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 321: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 322: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 323: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 324: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 325: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 326: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 327: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 328: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 329: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 330: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 331: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 332: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 333: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 334: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 335: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 336: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 337: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 338: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 339: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 340: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 341: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 342: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 343: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 344: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 345: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 346: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 347: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 348: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 349: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 350: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 351: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 352: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 353: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 354: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 355: inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 356: :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 # None
# 357: inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 358: inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 359: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 360: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 361: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 362: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 363: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 364: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 365: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 366: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 367: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 368: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 369: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 370: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 371: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 372: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 373: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 374: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 375: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 376: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 377: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 378: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 379: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 380: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 381: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 382: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 383: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 384: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 385: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 386: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 387: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 388: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 389: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 390: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 391: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 392: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 393: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 394: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 395: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 396: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 397: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 398: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 399: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 400: inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 401: :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 # None
# 402: inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) # Some('/lutcomp/programs/lib/mul.j':(40,5))
# 403: inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
# 404: inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
# 405: inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
# 406: inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
# 407: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(43,5))
# 408: inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(43,5))
# 409: inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(44,5))
# 410: inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
# 411: inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
# 412: inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) # Some('/lutcomp/programs/lib/mul.j':(45,5))
# 413: product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
# 414: :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 # None
# 415: t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 416: None <= call print_dec32(t2754,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 417: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 418: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 419: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 420: inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 421: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 422: if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 423: :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 424: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 425: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 426: :inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 427: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 428: t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 429: inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 430: inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 431: inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 432: inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 433: inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 434: inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 435: inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 436: mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 437: inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 438: inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 439: inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 440: inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 441: inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 442: inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 443: mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 444: :inline_RpnCalc_handle_stack_push_56_function_end_stack_push # None
# 445: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 446: :RpnCalc_handle_if_else_2_29 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 447: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 448: t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 449: if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 450: :RpnCalc_handle_if_true_3_30 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 451: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 452: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 453: Some(quotient) <= call div32(tace9,t8792,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 454: t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 455: None <= call print_dec32(t1ba9,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 456: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 457: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 458: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 459: inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 460: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 461: if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 462: :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 463: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 464: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 465: :inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 466: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 467: t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 468: inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 469: inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 470: inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 471: inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 472: inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 473: inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 474: inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 475: mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 476: inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 477: inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 478: inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 479: inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 480: inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 481: inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 482: mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 483: :inline_RpnCalc_handle_stack_push_57_function_end_stack_push # None
# 484: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 485: :RpnCalc_handle_if_else_3_31 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 486: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 487: tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 488: if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 489: :RpnCalc_handle_if_true_4_32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 490: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 491: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 492: inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 493: inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 494: inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 495: inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 496: inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 497: inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 498: inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 499: mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 500: inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 501: inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 502: inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 503: inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 504: inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 505: inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 506: mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 507: :inline_RpnCalc_handle_stack_push_58_function_end_stack_push # None
# 508: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 509: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 510: inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 511: inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 512: inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 513: inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 514: inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 515: inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 516: inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 517: mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 518: inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 519: inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 520: inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 521: inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 522: inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 523: inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 524: mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 525: :inline_RpnCalc_handle_stack_push_59_function_end_stack_push # None
# 526: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 527: :RpnCalc_handle_if_else_4_33 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 528: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 529: tdf6e <- 0n113/0x71u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 530: if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 531: :RpnCalc_handle_if_true_5_34 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 532: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 533: return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 534: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 535: :RpnCalc_handle_if_else_5_35 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 536: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 537: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 538: if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 539: :RpnCalc_handle_if_true_6_36 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 540: tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 541: inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 542: inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 543: inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 544: inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 545: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 546: if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 547: :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 548: inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 549: inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 550: inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 551: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 552: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 553: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 554: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 555: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 556: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 557: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 558: mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 559: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 560: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 561: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 562: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 563: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 564: inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 565: mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 566: :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
# 567: inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 568: inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 569: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 570: mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 571: inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 572: inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 573: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 574: mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 575: :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 576: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 577: :RpnCalc_handle_if_else_6_37 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 578: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 579: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 580: if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 581: :RpnCalc_handle_if_true_7_38 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 582: tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 583: inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 584: inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 585: inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 586: inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 587: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 588: if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 589: :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 590: inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 591: inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 592: inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 593: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 594: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 595: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 596: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 597: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 598: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 599: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 600: mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
# 601: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 602: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 603: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 604: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 605: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 606: inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 607: mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
# 608: :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
# 609: inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 610: inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 611: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 612: mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 613: inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 614: inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 615: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 616: mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 617: :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 618: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 619: :RpnCalc_handle_if_else_7_39 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 620: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 621: t47ec <- 0n99/0x63u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 622: if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 623: :RpnCalc_handle_if_true_8_40 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 624: tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 625: inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 626: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# 627: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 628: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 629: mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 630: :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
# 631: inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 632: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 633: mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 634: :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init # None
# 635: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 636: :RpnCalc_handle_if_else_8_41 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 637: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 638: tcc42 <- 0n100/0x64u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 639: if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 640: :RpnCalc_handle_if_true_9_42 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 641: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 642: :RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 643: td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 644: t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 645: if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 646: :RpnCalc_handle_while_body_45 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 647: td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 648: None <= call print_dec8(td0f3,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 649: inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 650: None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 651: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 652: inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 653: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 654: if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 655: :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 656: inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 657: None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 658: :inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 659: tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 660: td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 661: t4376 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 662: inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 663: inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 664: inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
# 665: inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
# 666: inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
# 667: tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
# 668: :inline_RpnCalc_handle_stack_get_48_function_end_stack_get # None
# 669: None <= call print_dec32(tb336,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 670: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 671: None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 672: inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 673: inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 674: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 675: if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 676: :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 677: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 678: None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 679: :inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 680: td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 681: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 682: goto RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 683: :RpnCalc_handle_while_end_46 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 684: goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 685: :RpnCalc_handle_if_else_9_43 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 686: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 687: teed8 <- 0n57/0x39u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 688: if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 689: :RpnCalc_handle_if_true_10_47 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 690: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 691: tdcb0 <- 0n48/0x30u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 692: if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 693: :RpnCalc_handle_if_true_0_50 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 694: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 695: tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 696: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 697: mem[tfdb7] <- ta11a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 698: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 699: t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 700: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 701: t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 702: td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 703: inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 704: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 705: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 706: inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 707: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 708: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 709: inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 710: inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 711: inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 712: inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 713: inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 714: inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 715: inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 716: tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 717: :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 # None
# 718: mem[t6e8e] <- tadd U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 719: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 720: t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 721: tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 722: t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 723: td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 724: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 725: t9dae <- tdcd9 Subtract Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 726: tdc11 U32 <- t9dae U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 727: tbdb5 <- td60 Add Var(tdc11) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 728: mem[t6e8e] <- tbdb5 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 729: :RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 730: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# 731: return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# 732: :function_end_RpnCalc_handle # None
# 733: Unreachable # None

# IlFunctionId("RpnCalc_run")(calc,)
# 00: :RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 01: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 02: if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 03: :RpnCalc_run_while_body_1 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 04: inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(19,5))
# 05: :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 06: inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 07: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 08: if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 09: :inline_RpnCalc_run_getchar_39_getchar_while_body_1 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 10: Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 11: inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 12: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 13: if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 14: :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 15: inline_RpnCalc_run_getchar_39_tb816 <- ttyin # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 16: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 17: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 18: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 19: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 20: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 21: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 22: mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
# 23: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 24: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 25: mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
# 26: :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push # None
# 27: goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 28: :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 29: inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 30: inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 31: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 32: if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 33: :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 34: None <= call Keyboard_poll() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 35: :inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 36: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 37: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 38: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 39: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 40: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 41: if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 42: :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 43: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 44: inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 45: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 46: :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 47: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 48: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 49: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 50: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 51: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
# 52: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 53: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 54: mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
# 55: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 56: inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
# 57: :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # None
# 58: goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 59: :inline_RpnCalc_run_getchar_39_getchar_while_end_2 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 60: inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
# 61: ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
# 62: :inline_RpnCalc_run_getchar_39_function_end_getchar # None
# 63: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 64: Some(result) <= call RpnCalc_handle(calc,tdcd9,) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 65: t57fd <- result U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 66: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 67: if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 68: :RpnCalc_run_if_true_0_4 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 69: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 70: return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 71: :RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 72: goto RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 73: :function_end_RpnCalc_run # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 74: Unreachable # None

# IlFunctionId("delay")(x,)
# 00: :delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 01: tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 02: t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 03: if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 04: :delay_while_body_1 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 05: tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 06: x <- tad57 Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 07: goto delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 08: :delay_while_end_2 # Some('/lutcomp/programs/lib/delay.j':(2,5))
# 09: return None # None
# 10: :function_end_delay # None
# 11: Unreachable # None

# IlFunctionId("div32")(a,b,)
# 00: __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
# 01: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
# 02: tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
# 03: if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' # Some('/lutcomp/programs/lib/div.j':(67,5))
# 04: :div32_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(67,5))
# 05: inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(67,5))
# 06: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(67,5))
# 07: return Some(inline_div32_div16_43_t60ec) # Some('/lutcomp/programs/lib/div.j':(67,5))
# 08: :div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
# 09: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 10: t4917 <- 0n65536/0x00010000u32  # Some('/lutcomp/programs/lib/div.j':(71,5))
# 11: if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' # Some('/lutcomp/programs/lib/div.j':(71,5))
# 12: :div32_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 13: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 14: tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 15: inline_div32_div16_43_a <- t8792 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 16: inline_div32_div16_43_b <- tace9 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 17: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 18: inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 19: if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' # Some('/lutcomp/programs/lib/div.j':(21,5))
# 20: :inline_div32_div16_43_div16_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 21: inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(21,5))
# 22: te81f <- inline_div32_div16_43_t60ec U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 23: goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 24: :inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
# 25: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 26: inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/div.j':(25,5))
# 27: if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' # Some('/lutcomp/programs/lib/div.j':(25,5))
# 28: :inline_div32_div16_43_div16_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 29: inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 30: inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 31: inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) # Some('/lutcomp/programs/lib/div.j':(25,5))
# 32: inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 33: te81f <- inline_div32_div16_43_tb0ef U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 34: goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 35: :inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
# 36: inline_div32_div16_43_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(29,5))
# 37: inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  # Some('/lutcomp/programs/lib/div.j':(30,5))
# 38: :inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 39: inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 40: inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 41: if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 42: :inline_div32_div16_43_div16_while_body_7 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 43: inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 44: inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 45: inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 46: inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 47: inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 48: inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
# 49: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 50: inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 51: inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
# 52: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 53: inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 54: inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
# 55: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 56: inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 57: inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
# 58: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 59: inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 60: inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
# 61: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 62: inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 63: inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 64: inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 65: inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 66: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 67: inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 68: inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
# 69: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 70: inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 71: inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 72: inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 73: inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 74: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 75: inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 76: inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
# 77: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 78: inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 79: inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 80: inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 81: inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 82: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 83: inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 84: inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
# 85: inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 86: inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 87: inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 88: :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 # None
# 89: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 90: inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 91: inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 92: inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 93: inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 94: inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 95: inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 96: inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 97: inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 98: inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 99: inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 100: inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 101: inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 102: inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 103: inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 104: inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 105: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 106: inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 107: inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 108: inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 109: inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 110: inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 111: inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 112: inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 113: inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 114: inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 115: inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 116: inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 117: inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 118: inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 119: inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 120: inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 121: inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 122: inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 123: inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 124: inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 125: inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 126: inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 127: inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 128: inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 129: inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 130: inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 131: inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 132: inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 133: :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 # None
# 134: inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 135: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
# 136: if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 137: :inline_div32_div16_43_div16_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 138: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 139: inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 140: goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 141: :inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 142: inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 143: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
# 144: if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 145: :inline_div32_div16_43_div16_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 146: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 147: inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 148: goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 149: :inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 150: inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 151: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 152: if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 153: :inline_div32_div16_43_div16_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 154: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 155: inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 156: goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 157: :inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 158: inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 159: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 160: if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 161: :inline_div32_div16_43_div16_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 162: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 163: te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 164: goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 165: :inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 166: inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 167: inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 168: inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 169: inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 170: inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 171: if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' # Some('/lutcomp/programs/lib/div.j':(32,5))
# 172: :inline_div32_div16_43_div16_if_true_0_22 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 173: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 174: te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 175: goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 176: :inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 177: inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 178: inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
# 179: goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 180: :inline_div32_div16_43_div16_while_end_8 # Some('/lutcomp/programs/lib/div.j':(32,5))
# 181: inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
# 182: te81f <- inline_div32_div16_43_t1506 U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
# 183: :inline_div32_div16_43_function_end_div16 # None
# 184: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(71,5))
# 185: return Some(te81f) # Some('/lutcomp/programs/lib/div.j':(71,5))
# 186: :div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
# 187: lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(75,5))
# 188: hi <- 0xffffffffu32  # Some('/lutcomp/programs/lib/div.j':(76,5))
# 189: :div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 190: t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 191: t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 192: if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 193: :div32_while_body_7 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 194: t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 195: inline_div32_shiftright1_44_a <- t1506 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 196: inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 197: inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
# 198: inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 199: inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 200: inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
# 201: inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 202: inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 203: inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
# 204: inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 205: inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 206: inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
# 207: inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 208: inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 209: inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
# 210: inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 211: inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 212: inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 213: inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 214: inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 215: inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 216: inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 217: inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
# 218: inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 219: inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 220: inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 221: inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 222: inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 223: inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 224: inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 225: inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
# 226: inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 227: inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 228: inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 229: inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 230: inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 231: inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 232: inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 233: inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
# 234: inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 235: inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 236: t9599 <- inline_div32_shiftright1_44_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 237: :inline_div32_shiftright1_44_function_end_shiftright1 # None
# 238: t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 239: inline_div32_shiftright1_45_a <- t5508 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 240: inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 241: inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
# 242: inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
# 243: inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 244: inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
# 245: inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
# 246: inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 247: inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
# 248: inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
# 249: inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 250: inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
# 251: inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
# 252: inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 253: inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
# 254: inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
# 255: inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 256: inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 257: inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 258: inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
# 259: inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
# 260: inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 261: inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
# 262: inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
# 263: inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 264: inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 265: inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 266: inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
# 267: inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
# 268: inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 269: inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
# 270: inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
# 271: inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 272: inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 273: inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 274: inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
# 275: inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
# 276: inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 277: inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
# 278: inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
# 279: inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 280: t3803 <- inline_div32_shiftright1_45_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
# 281: :inline_div32_shiftright1_45_function_end_shiftright1 # None
# 282: mid <- t9599 Add Var(t3803) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 283: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 284: tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 285: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 286: tb608 <- te825 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 287: None <= call mul32_64(tfd7e,tace9,tb608,) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 288: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 289: t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 290: tb973 <- mem[t3f2a] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 291: inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(78,5))
# 292: if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 293: :div32_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 294: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 295: hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 296: goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 297: :div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 298: te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 299: x <- mem[te546] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 300: tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 301: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 302: if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 303: :div32_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 304: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 305: hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 306: goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 307: :div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 308: tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 309: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 310: if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 311: :div32_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 312: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 313: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 314: return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 315: :div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 316: t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 317: tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 318: r <- t8792 Subtract Var(tad57) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 319: taee0 <- r U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 320: tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 321: if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' # Some('/lutcomp/programs/lib/div.j':(78,5))
# 322: :div32_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 323: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 324: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 325: return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 326: :div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 327: tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 328: lo <- tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
# 329: goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 330: :div32_while_end_8 # Some('/lutcomp/programs/lib/div.j':(78,5))
# 331: t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(108,5))
# 332: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(108,5))
# 333: return Some(t1506) # Some('/lutcomp/programs/lib/div.j':(108,5))
# 334: :function_end_div32 # None
# 335: Unreachable # None

# IlFunctionId("io_read2")()
# 00: Unreachable # None
# 01: :function_end_io_read2 # None
# 02: Unreachable # None

# IlFunctionId("io_ready_to_read")()
# 00: Unreachable # None
# 01: :function_end_io_ready_to_read # None
# 02: Unreachable # None

# IlFunctionId("io_write0")(data,)
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_io_write0 # None
# 03: Unreachable # None

# IlFunctionId("io_write1")(data,)
# 00: Unreachable # None
# 01: return None # None
# 02: :function_end_io_write1 # None
# 03: Unreachable # None

# IlFunctionId("lcd_draw_char")(i,ch,)
# 00: inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(9,5))
# 01: inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(9,5))
# 02: inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 03: inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 04: inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 05: inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
# 06: inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 07: inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 08: inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 09: inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 10: inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 11: inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 12: inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 13: pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
# 14: :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical # None
# 15: t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 16: t1730 <- t136d ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 17: t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 18: None <= call io_write1(t2176,) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
# 19: t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 20: t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 21: None <= call io_write1(t791e,) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
# 22: t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(19,5))
# 23: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(19,5))
# 24: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 25: t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 26: t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 27: None <= call io_write1(t3e8f,) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
# 28: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 29: t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 30: tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 31: None <= call io_write1(tb5dc,) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
# 32: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(23,5))
# 33: return None # None
# 34: :function_end_lcd_draw_char # None
# 35: Unreachable # None

# IlFunctionId("lcd_init")()
# 00: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 01: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 02: mem[t0] <- ta97f U8 # Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 03: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(72,5))
# 04: :lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 05: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 06: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 07: if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 08: :lcd_init_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 09: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 10: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 11: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 12: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 13: mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 14: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 15: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 16: goto lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 17: :lcd_init_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 18: t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(78,5))
# 19: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(78,5))
# 20: t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(79,5))
# 21: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(79,5))
# 22: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(80,5))
# 23: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(81,5))
# 24: None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(82,5))
# 25: None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(83,5))
# 26: t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(85,5))
# 27: None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(85,5))
# 28: t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(86,5))
# 29: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(86,5))
# 30: None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(88,5))
# 31: t477 <- 0n8/0x08u8  # Some('/lutcomp/programs/lib/lcd.j':(89,5))
# 32: None <= call io_write1(t477,) # Some('/lutcomp/programs/lib/lcd.j':(89,5))
# 33: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(90,5))
# 34: ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(92,5))
# 35: None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(92,5))
# 36: tec13 <- 0n12/0x0cu8  # Some('/lutcomp/programs/lib/lcd.j':(93,5))
# 37: None <= call io_write1(tec13,) # Some('/lutcomp/programs/lib/lcd.j':(93,5))
# 38: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(94,5))
# 39: None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(96,5))
# 40: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/lcd.j':(97,5))
# 41: None <= call io_write1(ta11a,) # Some('/lutcomp/programs/lib/lcd.j':(97,5))
# 42: None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(98,5))
# 43: return None # None
# 44: :function_end_lcd_init # None
# 45: Unreachable # None

# IlFunctionId("lcd_putc")(ch,)
# 00: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 01: t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 02: if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 03: :lcd_putc_if_true_0_1 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 04: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 05: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 06: t78f0 <- t5dda Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 07: tf5a3 <- t78f0 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 08: next <- tf5a3 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 09: :lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 10: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 11: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 12: ta5ff <- next U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 13: if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 14: :lcd_putc_while_body_4 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 15: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 16: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 17: tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 18: t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 19: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 20: mem[t164d] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 21: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 22: tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 23: mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 24: goto lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 25: :lcd_putc_while_end_5 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 26: goto lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 27: :lcd_putc_if_else_0_2 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 28: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 29: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 30: tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 31: t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 32: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 33: mem[t164d] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 34: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 35: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 36: None <= call lcd_draw_char(t5dda,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 37: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 38: tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 39: mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 40: :lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 41: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 42: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 43: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 44: if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 45: :lcd_putc_if_true_0_7 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 46: None <= call lcd_scroll_up() # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 47: :lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 48: return None # None
# 49: :function_end_lcd_putc # None
# 50: Unreachable # None

# IlFunctionId("lcd_scroll_up")()
# 00: t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 01: t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 02: t81b5 <- t5dda Subtract Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 03: mem[t0] <- t81b5 U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
# 04: i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(29,5))
# 05: :lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 06: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 07: t9586 <- 0n60/0x3cu8  # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 08: if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 09: :lcd_scroll_up_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 10: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 11: tfd89 <- td0f3 Add Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 12: t760c U32 <- tfd89 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 13: t54b2 <- t760c Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 14: ch <- mem[t54b2] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 15: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 16: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 17: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 18: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 19: ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 20: if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 21: :lcd_scroll_up_if_true_0_4 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 22: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 23: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 24: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 25: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 26: mem[t9e70] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 27: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 28: tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 29: None <= call lcd_draw_char(td0f3,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 30: :lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 31: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 32: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 33: goto lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 34: :lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 35: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 36: td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 37: if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 38: :lcd_scroll_up_while_body_7 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 39: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 40: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 41: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 42: ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 43: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 44: if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 45: :lcd_scroll_up_if_true_0_10 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 46: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 47: t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 48: t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 49: tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 50: mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 51: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 52: None <= call lcd_draw_char(td0f3,tdf3b,) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 53: :lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 54: td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 55: i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 56: goto lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 57: :lcd_scroll_up_while_end_8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 58: return None # None
# 59: :function_end_lcd_scroll_up # None
# 60: Unreachable # None

# IlFunctionId("main")()
# 00: None <= call stdio_init() # Some('programs/app/rpn.j':(4,5))
# 01: inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 02: None <= call io_write0(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 03: inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 04: inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 05: inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 06: if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 07: :inline_main_putc_25_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 08: inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 09: None <= call lcd_putc(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 10: :inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 11: inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 12: None <= call io_write0(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 13: inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 14: inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 15: inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 16: if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 17: :inline_main_putc_26_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 18: inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 19: None <= call lcd_putc(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 20: :inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 21: tca8 <- 0n987664/0x000f1210u32  # Some('programs/app/rpn.j':(12,5))
# 22: inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 23: inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 24: mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
# 25: :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
# 26: inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 27: inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 28: mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# 29: :inline_main_RpnCalc_init_51_function_end_RpnCalc_init # None
# 30: inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 31: None <= call io_write0(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 32: inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 33: inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 34: inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 35: if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 36: :inline_main_putc_27_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 37: inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 38: None <= call lcd_putc(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 39: :inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 40: inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 41: None <= call io_write0(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 42: inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 43: inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 44: inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 45: if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 46: :inline_main_putc_28_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 47: inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 48: None <= call lcd_putc(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 49: :inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 50: Some(t2a99) <= call RpnCalc_run(tca8,) # Some('programs/app/rpn.j':(17,5))
# 51: return Some(t2a99) # Some('programs/app/rpn.j':(17,5))
# 52: :function_end_main # None
# 53: Unreachable # None

# IlFunctionId("mul32_64")(a,b,c,)
# 00: __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
# 01: a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(58,5))
# 02: t94df <- a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
# 03: a_hi[0x01..0x02] <- t94df U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
# 04: t3b02 <- a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
# 05: a_hi[0x00..0x01] <- t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
# 06: b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(62,5))
# 07: ta5f7 <- b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
# 08: b_hi[0x01..0x02] <- ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
# 09: t82cc <- b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
# 10: b_hi[0x00..0x01] <- t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
# 11: t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 12: tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 13: inline_mul32_64_mul16_32_8_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 14: inline_mul32_64_mul16_32_8_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 15: inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 16: inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 17: inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 18: inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 19: inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 20: inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 21: inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 22: inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 23: inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 24: inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 25: inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 26: inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 27: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 28: inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 29: inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 30: inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 31: inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 32: inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 33: inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 34: inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 35: inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 36: inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 37: inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 38: inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 39: inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 40: inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 41: inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 42: inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 43: inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 44: inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 45: inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 46: inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 47: inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 48: inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 49: inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 50: inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 51: inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 52: inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 53: inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 54: t720d <- inline_mul32_64_mul16_32_8_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 55: :inline_mul32_64_mul16_32_8_function_end_mul16_32 # None
# 56: mem[c] <- t720d U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
# 57: t1335 <- c Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 58: t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 59: t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 60: inline_mul32_64_mul16_32_9_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 61: inline_mul32_64_mul16_32_9_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 62: inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 63: inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 64: inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 65: inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 66: inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 67: inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 68: inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 69: inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 70: inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 71: inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 72: inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 73: inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 74: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 75: inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 76: inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 77: inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 78: inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 79: inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 80: inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 81: inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 82: inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 83: inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 84: inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 85: inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 86: inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 87: inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 88: inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 89: inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 90: inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 91: inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 92: inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 93: inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 94: inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 95: inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 96: inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 97: inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 98: inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 99: inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 100: inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 101: t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 102: :inline_mul32_64_mul16_32_9_function_end_mul16_32 # None
# 103: mem[t1335] <- t5a04 U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
# 104: temp_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(71,5))
# 105: temp_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(72,5))
# 106: t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
# 107: tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
# 108: inline_mul32_64_mul16_32_10_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
# 109: inline_mul32_64_mul16_32_10_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
# 110: inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 111: inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 112: inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 113: inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 114: inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 115: inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 116: inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 117: inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 118: inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 119: inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 120: inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 121: inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 122: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 123: inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 124: inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 125: inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 126: inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 127: inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 128: inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 129: inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 130: inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 131: inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 132: inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 133: inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 134: inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 135: inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 136: inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 137: inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 138: inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 139: inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 140: inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 141: inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 142: inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 143: inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 144: inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 145: inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 146: inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 147: inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 148: inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 149: temp <- inline_mul32_64_mul16_32_10_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 150: :inline_mul32_64_mul16_32_10_function_end_mul16_32 # None
# 151: t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
# 152: temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
# 153: t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
# 154: temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
# 155: t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
# 156: temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
# 157: t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
# 158: temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
# 159: te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
# 160: t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
# 161: mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
# 162: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
# 163: t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(81,5))
# 164: t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
# 165: mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
# 166: tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 167: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 168: t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 169: tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 170: tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 171: inline_mul32_64_add_U64_0_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 172: inline_mul32_64_add_U64_0_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 173: inline_mul32_64_add_U64_0_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
# 174: inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
# 175: inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
# 176: inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 177: inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 178: inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 179: inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 180: inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 181: inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 182: inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 183: mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 184: inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 185: inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 186: inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 187: inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 188: inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 189: mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 190: inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 191: inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 192: inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 193: if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 194: :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 195: inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 196: inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 197: inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 198: inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 199: inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 200: inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 201: mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 202: :inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 203: t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
# 204: t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
# 205: inline_mul32_64_mul16_32_11_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
# 206: inline_mul32_64_mul16_32_11_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
# 207: inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 208: inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 209: inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
# 210: inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 211: inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 212: inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 213: inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 214: inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
# 215: inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 216: inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
# 217: inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 218: inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
# 219: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 220: inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
# 221: inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
# 222: inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 223: inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 224: inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
# 225: inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 226: inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 227: inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 228: inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
# 229: inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 230: inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 231: inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 232: inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
# 233: inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 234: inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 235: inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
# 236: inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 237: inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
# 238: inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 239: inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
# 240: inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 241: inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
# 242: inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
# 243: inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 244: inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 245: inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 246: temp <- inline_mul32_64_mul16_32_11_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
# 247: :inline_mul32_64_mul16_32_11_function_end_mul16_32 # None
# 248: t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
# 249: temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
# 250: t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
# 251: temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
# 252: t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
# 253: temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
# 254: t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
# 255: temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
# 256: te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
# 257: t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
# 258: mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
# 259: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
# 260: t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(91,5))
# 261: t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
# 262: mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
# 263: tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 264: te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 265: t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 266: tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 267: tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 268: inline_mul32_64_add_U64_1_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 269: inline_mul32_64_add_U64_1_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 270: inline_mul32_64_add_U64_1_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
# 271: inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
# 272: inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
# 273: inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 274: inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 275: inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 276: inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 277: inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 278: inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 279: inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 280: mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
# 281: inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 282: inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 283: inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 284: inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 285: inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 286: mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
# 287: inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 288: inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 289: inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 290: if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 291: :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 292: inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 293: inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 294: inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 295: inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 296: inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 297: inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 298: mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 299: :inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
# 300: __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # None
# 301: return None # None
# 302: :function_end_mul32_64 # None
# 303: Unreachable # None

# IlFunctionId("print_dec32")(a,)
# 00: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 01: t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 02: if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 03: :print_dec32_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 04: t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 05: None <= call print_dec8(t3404,) # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 06: return None # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 07: :print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 08: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# 09: inline_print_dec32_div32_by10_47_a <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# 10: inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  # Some('/lutcomp/programs/lib/div.j':(130,5))
# 11: inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  # Some('/lutcomp/programs/lib/div.j':(130,5))
# 12: None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) # Some('/lutcomp/programs/lib/div.j':(130,5))
# 13: inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  # Some('/lutcomp/programs/lib/div.j':(131,5))
# 14: inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
# 15: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
# 16: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
# 17: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(112,5))
# 18: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
# 19: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
# 20: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(113,5))
# 21: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
# 22: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
# 23: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(114,5))
# 24: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
# 25: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
# 26: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(115,5))
# 27: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
# 28: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
# 29: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(117,5))
# 30: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
# 31: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
# 32: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
# 33: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(118,5))
# 34: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) # Some('/lutcomp/programs/lib/div.j':(118,5))
# 35: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
# 36: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
# 37: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(119,5))
# 38: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
# 39: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
# 40: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
# 41: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(120,5))
# 42: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) # Some('/lutcomp/programs/lib/div.j':(120,5))
# 43: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
# 44: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
# 45: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(121,5))
# 46: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
# 47: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
# 48: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
# 49: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(122,5))
# 50: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) # Some('/lutcomp/programs/lib/div.j':(122,5))
# 51: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
# 52: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
# 53: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(123,5))
# 54: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
# 55: inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
# 56: inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
# 57: :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 # None
# 58: b <- inline_print_dec32_div32_by10_47_t45ae U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
# 59: :inline_print_dec32_div32_by10_47_function_end_div32_by10 # None
# 60: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# 61: None <= call print_dec32(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# 62: t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# 63: tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# 64: inline_print_dec32_mul32_by10_14_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# 65: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 66: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 67: inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
# 68: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 69: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 70: inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
# 71: inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 72: inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 73: inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
# 74: inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 75: inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 76: inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 77: t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
# 78: :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 # None
# 79: a <- t8792 Subtract Var(t86e2) # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# 80: t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# 81: t6f38 <- t3404 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# 82: inline_print_dec32_putc_29_c <- t6f38 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# 83: inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 84: None <= call io_write0(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 85: inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 86: inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 87: inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 88: if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 89: :inline_print_dec32_putc_29_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 90: inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 91: None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 92: :inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 93: return None # None
# 94: :function_end_print_dec32 # None
# 95: Unreachable # None

# IlFunctionId("print_dec8")(a,)
# 00: t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 01: t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 02: if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 03: :print_dec8_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 04: t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 05: b <- t8792 Divide Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 06: tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 07: None <= call print_dec8(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 08: t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 09: tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 10: tf5e0 <- tace9 Multiply Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 11: a <- t8792 Subtract Var(tf5e0) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 12: :print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 13: t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# 14: t5673 <- t8792 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# 15: inline_print_dec8_putc_30_c <- t5673 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# 16: inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 17: None <= call io_write0(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
# 18: inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 19: inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 20: inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 21: if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 22: :inline_print_dec8_putc_30_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 23: inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 24: None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 25: :inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 26: return None # None
# 27: :function_end_print_dec8 # None
# 28: Unreachable # None

# IlFunctionId("stdio_init")()
# 00: t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 01: ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 02: mem[t0] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(11,5))
# 03: t1 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
# 04: mem[t1] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(12,5))
# 05: inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 06: inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 07: mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
# 08: inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
# 09: mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
# 10: :inline_stdio_init_queue_init_35_function_end_queue_init # None
# 11: None <= call lcd_init() # Some('/lutcomp/programs/lib/stdio.j':(14,5))
# 12: None <= call KeyBoard_init() # Some('/lutcomp/programs/lib/stdio.j':(15,5))
# 13: return None # None
# 14: :function_end_stdio_init # None
# 15: Unreachable # None


# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 0000d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 00 00 00 

# 00013 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 69 20 00 

# 00017 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 0001d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([16]) Number(0n0/0x00u8)
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987140/0x000f1004u32)
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 00427 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 14 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0042d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 00430 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 00433 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 14 04 10 0f 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 00439 Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# return None None
# Return { value: None }
# 0043c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 0043e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(U32) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35]) Number(0n987392/0x000f1100u32)
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([36])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987652/0x000f1204u32)
# Var inline_Keyboard_poll_queue_push_37_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([24])
# Var t23a (t23a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }) Reg(U32) Some([48, 49, 50, 51])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) Reg(U32) Some([28, 29, 30, 31])
# Var t5ea1 (t5ea1 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))) Reg(U8) Some([24])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([52])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([24]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([36]) Number(0n0/0x00u8)
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb62e (tb62e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([48, 49, 50, 51])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987140/0x000f1004u32)
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 00443 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 

# t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# 00445 AndImm8 [Register(0x18), Constant8(0x04=4)]
#       t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
18 18 04 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00448 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# 0044b Cmp8 [Register(0x18), Register(0x24)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
15 18 24 

# 0044e JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
72 56 04 00 

# 00452 JmpImm [Label24(Keyboard_poll_if_end_0)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_end_0' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
70 58 04 00 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 00456 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 00458 In2 [Register(0x18)]
#       IoRead2
62 18 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\")) }\nArithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# 0045a LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
20 30 00 00 00 00 

# 00460 Copy8 [Register(0x18), Register(0x30)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
0b 18 30 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# 00463 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
20 00 04 00 00 00 

# 00469 Mul8_16 [Register(0x30), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
11 30 00 1c 

# 0046d LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1e 00 

# 00470 LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1f 00 

# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 00473 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# 00479 Load8 [Register(0x20), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
05 20 18 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0047c LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# 0047f Cmp8 [Register(0x18), Register(0x24)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
15 18 24 

# 00482 JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
72 a2 04 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00486 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# 0048c Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
21 1c 20 

# 0048f AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 00495 ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
03 

# 00496 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
30 30 20 30 

# 0049a AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 0049b Load8 [Register(0x30), Register(0x18)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
05 30 18 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 0049e JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 b1 04 00 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004a2 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 004a8 ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 004a9 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 30 1c 30 

# 004ad AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 004ae Load8 [Register(0x30), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 30 18 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 004b1 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 004b7 Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 004ba LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 004bd Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 004c0 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 c8 04 00 

# 004c4 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_end_6' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
70 f6 04 00 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# 004c8 LoadImm32 [Register(0x20), Constant32(0x000f1100=987392)]
#       inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
20 20 00 11 0f 00 

# inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 004ce LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 004d4 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 004d7 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 28 00 00 00 00 

# 004dd Copy8 [Register(0x24), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 24 28 

# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 004e0 ClearCarry []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 004e1 AddCarry32_1 [Register(0x20), Register(0x28), Register(0x20)]
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 20 28 20 

# 004e5 AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 004e6 Store8 [Register(0x18), Register(0x20)]
#       mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 20 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 004e9 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 004ec LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 004ef Add8NoCarryIn [Register(0x24), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 24 00 18 

# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 004f3 Store8 [Register(0x18), Register(0x2c)]
#       mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 18 2c 

# :Keyboard_poll_if_end_6 None
# Keyboard_poll_if_end_6
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Number(0n0/0x00u8)
# 004f6 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004f9 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# 004ff Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
21 1c 20 

# 00502 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 00508 ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
03 

# 00509 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
30 30 20 30 

# 0050d AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 0050e Load8 [Register(0x30), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
05 30 18 

# if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# 00511 Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
15 24 18 

# 00514 JzImm [Label24(Keyboard_poll_if_end_9)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
72 47 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_end_9' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 00518 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 0051e Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00521 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 00524 Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 00527 JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 3b 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 0052b LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00531 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 00534 Store8 [Register(0x24), Register(0x20)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 00537 JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 47 05 00 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 0053b LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 00541 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# 00544 Store8 [Register(0x18), Register(0x20)]
#       mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Number(0n0/0x00u8)
# 00547 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0054a LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# 00550 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
32 1c 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 00556 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
03 

# 00557 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
30 30 1c 30 

# 0055b AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 0055c Load8 [Register(0x30), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
05 30 18 

# if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# 0055f Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
15 24 18 

# 00562 JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
72 76 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 00566 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 0056c LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# 0056f Store8 [Register(0x18), Register(0x20)]
#       mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 00572 JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 82 05 00 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 00576 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0057c LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 0057f Store8 [Register(0x24), Register(0x20)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 00582 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 00584 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var a (Local a Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([64, 65, 66, 67])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([68])
# Var diff (Local diff Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([72, 73, 74, 75]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([89]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_15_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_15_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n69/0x45u8)
# Var inline_RpnCalc_handle_putc_16_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n82/0x52u8)
# Var inline_RpnCalc_handle_putc_17_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_19_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_20_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_21_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_23_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n58/0x3au8)
# Var inline_RpnCalc_handle_putc_24_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var product (Local product Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var quotient (Local quotient Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([108])
# Var stack_count_usize (Local stack_count_usize Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([109])
# Var sum (Local sum Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var t13c5 (t13c5 Number(0n47/0x2fu8)) Reg(U8) Some([88]) Number(0n47/0x2fu8)
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([56, 57, 58, 59])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([56, 57, 58, 59])
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([56, 57, 58, 59])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([60, 61, 62, 63])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([88])
# Var t47ec (t47ec Number(0n99/0x63u8)) Reg(U8) Some([69]) Number(0n99/0x63u8)
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([110])
# Var t622 (t622 Number(0n42/0x2au8)) Reg(U8) Some([88]) Number(0n42/0x2au8)
# Var t670d (t670d Ident("sum")) Reg(U32) Some([56, 57, 58, 59])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t8f63 (t8f63 Number(0n45/0x2du8)) Reg(U8) Some([88]) Number(0n45/0x2du8)
# Var t9dae (t9dae Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))) Reg(U8) Some([69])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([110]) Number(0n1/0x01u8)
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([56, 57, 58, 59])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })) Reg(U32) Some([60, 61, 62, 63])
# Var tbdb5 (tbdb5 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })) Reg(U32) Some([56, 57, 58, 59])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var tc333 (tc333 Number(0n43/0x2bu8)) Reg(U8) Some([88]) Number(0n43/0x2bu8)
# Var tcc42 (tcc42 Number(0n100/0x64u8)) Reg(U8) Some([69]) Number(0n100/0x64u8)
# Var tcdcd (tcdcd Number(0n115/0x73u8)) Reg(U8) Some([88]) Number(0n115/0x73u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([69])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var tdc11 (tdc11 Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tdcb0 (tdcb0 Number(0n48/0x30u8)) Reg(U8) Some([69]) Number(0n48/0x30u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([68])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([69]) Number(0n32/0x20u8)
# Var tdf6e (tdf6e Number(0n113/0x71u8)) Reg(U8) Some([69]) Number(0n113/0x71u8)
# Var teed8 (teed8 Number(0n57/0x39u8)) Reg(U8) Some([69]) Number(0n57/0x39u8)
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# 00589 Copy32 [Register(0x00), Register(0x40)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [64, 65, 66, 67].
21 00 40 

# 0058c Copy8 [Register(0x04), Register(0x44)]
#       Save function parameter 'ch' registers [4] to locals [68].
0b 04 44 

# a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0058f LoadImm8 [Register(0x38), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 38 00 

# b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 00592 LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 3c 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 00595 LoadImm8 [Register(0x58), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 58 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 00598 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 58 

# 0059b JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 a3 05 00 

# 0059f JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 aa 05 00 

# :RpnCalc_handle_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005a3 LoadImm8 [Register(0x6d), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 6d 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005a6 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 06 00 

# :RpnCalc_handle_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 005aa LoadImm8 [Register(0x58), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 58 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 005ad Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 58 

# 005b0 JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 b8 05 00 

# 005b4 JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 bf 05 00 

# :RpnCalc_handle_if_true_1_3 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005b8 LoadImm8 [Register(0x6d), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 6d 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005bb JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 06 00 

# :RpnCalc_handle_if_else_1_4 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 005bf LoadImm8 [Register(0x58), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 58 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 005c2 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 58 

# 005c5 JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 cd 05 00 

# 005c9 JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 d4 05 00 

# :RpnCalc_handle_if_true_2_5 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005cd LoadImm8 [Register(0x6d), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 6d 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005d0 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 06 00 

# :RpnCalc_handle_if_else_2_6 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 005d4 LoadImm8 [Register(0x58), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 58 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 005d7 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 58 

# 005da JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 e2 05 00 

# 005de JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 e9 05 00 

# :RpnCalc_handle_if_true_3_7 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005e2 LoadImm8 [Register(0x6d), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 6d 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005e5 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 06 00 

# :RpnCalc_handle_if_else_3_8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 005e9 LoadImm8 [Register(0x58), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 58 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 005ec Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 58 

# 005ef JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 f7 05 00 

# 005f3 JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 fe 05 00 

# :RpnCalc_handle_if_true_4_9 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 005f7 LoadImm8 [Register(0x6d), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 6d 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005fa JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 01 06 00 

# :RpnCalc_handle_if_else_4_10 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 005fe LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 6d 00 

# :RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 00601 Copy8 [Register(0x6d), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 6d 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 00604 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'
# 00607 Cmp8 [Register(0x58), Register(0x59)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'
15 58 59 

# 0060a JcImm [Label24(RpnCalc_handle_if_end_11)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'
71 ac 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_end_11'\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 0060e Copy32 [Register(0x40), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 00611 Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 00614 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 48 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 0061a Load8 [Register(0x48), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 48 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0061d LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 00620 Cmp8 [Register(0x58), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 58 59 

# 00623 JzImm [Label24(RpnCalc_handle_if_end_11)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 ac 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'RpnCalc_handle_if_end_11' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 00627 Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 0062a Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 0062d AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 00633 Load32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 50 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 00636 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00639 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 0063c AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 00642 Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 00645 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0064b Mul8_16 [Register(0x50), Register(0x00), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 50 00 50 

# 0064f LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 52 00 

# 00652 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 53 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 00655 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00656 AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 4c 50 50 

# 0065a AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0065b Store32_1 [Register(0x48), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 48 50 

# 0065e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 0065f Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00662 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 00665 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 0066b Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0066e Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 00671 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 00677 Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 0067a Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 50 48 

# 0067d AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 00683 Store32_1 [Register(0x48), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 54 

# 00686 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 00687 Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 0068a Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 0068d AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 00693 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #73, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 00699 Store32_1 [Register(0x48), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #73, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 50 

# 0069c Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #73, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 0069d Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 006a0 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 48 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 006a6 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 006a9 Store8 [Register(0x59), Register(0x48)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 59 48 

# :RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# RpnCalc_handle_if_end_11
# tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
# 006ac Copy32 [Register(0x40), Register(0x48)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
21 40 48 

# 006af AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
32 48 40 00 00 00 

# stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 006b5 Load32 [Register(0x48), Register(0x48)]
#       stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 48 48 

# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
# Index("stack_count_usize", Number(0n0/0x00u8))
# 006b8 Copy8 [Register(0x48), Register(0x6c)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
#       Index("stack_count_usize", Number(0n0/0x00u8))
0b 48 6c 

# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 006bb Copy8 [Register(0x6d), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 6d 58 

# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 006be Copy8 [Register(0x6c), Register(0x6e)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 6c 6e 

# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 006c1 Cmp8 [Register(0x58), Register(0x6e)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 58 6e 

# 006c4 JcImm [Label24(RpnCalc_handle_if_end_14)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 a0 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_end_14' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 006c8 LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 006cb Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 006cd LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 006d3 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #90, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 006d6 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #90, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #91, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'
# 006d9 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #91, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'
15 45 59 

# 006dc JzImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #91, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'
72 fc 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #91, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_15_putc_if_true_0_1
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 006e0 LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 006e3 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 006e6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 006ec StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c f6 06 00 00 

# 006f2 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 006f6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_end_0
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 006fc LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 006ff Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #98, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 00701 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #98, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #99, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 00707 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #99, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #100, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 0070a LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #100, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #101, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'
# 0070d Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #101, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'
15 45 59 

# 00710 JzImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #101, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'
72 30 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #101, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_16_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 00714 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00717 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 0071a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00720 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 2a 07 00 00 

# 00726 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 0072a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_end_0
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# # In IlFunctionId("RpnCalc_handle"), at #106, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# 00730 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #106, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #107, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,)
# 00733 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 00735 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 0073b Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #110, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 0073e LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #110, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #111, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'
# 00741 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #111, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'
15 45 59 

# 00744 JzImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #111, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'
72 64 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #111, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_17_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# # In IlFunctionId("RpnCalc_handle"), at #113, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# 00748 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #113, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #114, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
# 0074b Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #114, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 0074e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00754 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 5e 07 00 00 

# 0075a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 0075e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_end_0
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #116, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 00764 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #116, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00767 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 00769 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 0076f Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 00772 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #122, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'
# 00775 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #122, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'
15 45 59 

# 00778 JzImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #122, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'
72 98 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #122, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_18_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 0077c LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0077f Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 00782 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00788 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 92 07 00 00 

# 0078e JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 00792 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_end_0
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 00798 LoadImm8 [Register(0x6e), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 6e 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 0079b Copy8 [Register(0x6e), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 6e 00 

# 0079e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 007a0 Copy8 [Register(0x6d), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 6d 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #131, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 007a3 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #131, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #132, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'
# 007a6 Cmp8 [Register(0x58), Register(0x59)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #132, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'
15 58 59 

# 007a9 JcImm [Label24(RpnCalc_handle_if_end_17)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #132, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'
71 f4 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #132, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_end_17'\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 007ad Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 38 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 007b0 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 007b3 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 007b9 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 007bc AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 007c2 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 007c5 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 007cb Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 007ce Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 007cf Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 007d2 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 007d8 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 007db LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 007e1 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 007e5 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 007e8 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 007eb ClearCarry []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 007ec AddCarry32_1 [Register(0x38), Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 48 38 

# 007f0 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 007f1 Load32 [Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 38 38 

# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :RpnCalc_handle_if_end_17 None
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Ident("stack_needed")
# 007f4 Copy8 [Register(0x6d), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Ident("stack_needed")
0b 6d 58 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 007f7 LoadImm8 [Register(0x6e), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 6e 01 

# if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# 007fa Cmp8 [Register(0x58), Register(0x6e)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
15 58 6e 

# 007fd JcImm [Label24(RpnCalc_handle_if_end_20)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
71 48 08 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_end_20' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 00801 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 3c 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00804 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 00807 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0080d Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 00810 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 00816 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 00819 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 0081f Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 00822 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00823 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 00826 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 0082c Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 0082f LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 00835 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 00839 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 0083c LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 0083f ClearCarry []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00840 AddCarry32_1 [Register(0x3c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 48 3c 

# 00844 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 00845 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 

# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# :RpnCalc_handle_if_end_20 None
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(U32)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 00848 LoadImm8 [Register(0x58), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 58 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 0084b Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 58 

# 0084e JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 56 08 00 

# 00852 JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 c4 09 00 

# :RpnCalc_handle_if_true_0_24 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 00856 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 00859 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 0085c ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 0085d AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 5c 48 5c 

# 00861 AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 00862 Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 5c 38 

# None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 00865 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
# 00868 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6e 

# 0086a Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6d 

# 0086c Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6c 

# 0086e Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6b 

# 00870 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6a 

# 00872 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 69 

# 00874 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 68 

# 00876 Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 67 

# 00878 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 66 

# 0087a Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 65 

# 0087c Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 64 

# 0087e Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 60 

# 00880 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5f 

# 00882 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5e 

# 00884 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5d 

# 00886 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5c 

# 00888 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 59 

# 0088a Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 58 

# 0088c Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 57 

# 0088e Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 56 

# 00890 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 55 

# 00892 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 54 

# 00894 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 53 

# 00896 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 52 

# 00898 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 51 

# 0089a Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 50 

# 0089c Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4f 

# 0089e Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4e 

# 008a0 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4d 

# 008a2 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4c 

# 008a4 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4b 

# 008a6 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4a 

# 008a8 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 49 

# 008aa Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 48 

# 008ac Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 45 

# 008ae Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 44 

# 008b0 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 43 

# 008b2 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 42 

# 008b4 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 41 

# 008b6 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 40 

# 008b8 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3f 

# 008ba Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3e 

# 008bc Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3d 

# 008be Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3c 

# 008c0 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3b 

# 008c2 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3a 

# 008c4 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 39 

# 008c6 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 38 

# 008c8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 008ce StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c d8 08 00 00 

# 008d4 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 27 26 00 

# 008d8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 008de Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 38 

# 008e0 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 39 

# 008e2 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3a 

# 008e4 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3b 

# 008e6 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3c 

# 008e8 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3d 

# 008ea Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3e 

# 008ec Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3f 

# 008ee Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 40 

# 008f0 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 41 

# 008f2 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 42 

# 008f4 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 43 

# 008f6 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 44 

# 008f8 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 45 

# 008fa Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 48 

# 008fc Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 49 

# 008fe Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4a 

# 00900 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4b 

# 00902 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4c 

# 00904 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4d 

# 00906 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4e 

# 00908 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4f 

# 0090a Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 50 

# 0090c Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 51 

# 0090e Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 52 

# 00910 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 53 

# 00912 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 54 

# 00914 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 55 

# 00916 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 56 

# 00918 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 57 

# 0091a Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 58 

# 0091c Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 59 

# 0091e Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5c 

# 00920 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5d 

# 00922 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5e 

# 00924 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5f 

# 00926 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 60 

# 00928 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 64 

# 0092a Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 65 

# 0092c Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 66 

# 0092e Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 67 

# 00930 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 68 

# 00932 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 69 

# 00934 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6a 

# 00936 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6b 

# 00938 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6c 

# 0093a Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6d 

# 0093c Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6e 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #181, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 0093e LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #181, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #183, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 00941 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #184, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 00943 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #184, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #185, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 00949 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #185, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #186, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 0094c LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #186, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #187, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'
# 0094f Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #187, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'
15 45 59 

# 00952 JzImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #187, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'
72 72 09 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #187, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_19_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #189, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 00956 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #189, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #190, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 00959 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #190, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 0095c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00962 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 6c 09 00 00 

# 00968 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 0096c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 00972 Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 5c 38 

# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 00975 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00978 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 0097b AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 00981 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 00984 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0098a Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 0098e LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 00991 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 00994 ClearCarry []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00995 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 00999 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0099a Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 0099d Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0099e Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 009a1 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 009a7 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 009aa AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 009b0 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 009b3 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 009b6 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 009bc Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 009bf Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 009c0 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_0_25 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 009c4 LoadImm8 [Register(0x58), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 58 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 009c7 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 58 

# 009ca JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 d2 09 00 

# 009ce JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 4b 0b 00 

# :RpnCalc_handle_if_true_1_26 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 009d2 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 009d5 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 009d8 Copy32 [Register(0x48), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 48 00 

# 009db Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 

# 009dd Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 

# 009df Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 

# 009e1 Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 

# 009e3 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 

# 009e9 ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 

# 009ea AddCarry32_1 [Register(0x5c), Register(0x00), Register(0x38)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 5c 00 38 

# 009ee AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 

# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 009ef Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
# 009f2 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6e 

# 009f4 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6d 

# 009f6 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6c 

# 009f8 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6b 

# 009fa Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6a 

# 009fc Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 69 

# 009fe Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 68 

# 00a00 Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 67 

# 00a02 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 66 

# 00a04 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 65 

# 00a06 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 64 

# 00a08 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 60 

# 00a0a Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5f 

# 00a0c Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5e 

# 00a0e Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5d 

# 00a10 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5c 

# 00a12 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 59 

# 00a14 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 58 

# 00a16 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 57 

# 00a18 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 56 

# 00a1a Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 55 

# 00a1c Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 54 

# 00a1e Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 53 

# 00a20 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 52 

# 00a22 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 51 

# 00a24 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 50 

# 00a26 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4f 

# 00a28 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4e 

# 00a2a Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4d 

# 00a2c Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4c 

# 00a2e Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4b 

# 00a30 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4a 

# 00a32 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 49 

# 00a34 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 48 

# 00a36 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 45 

# 00a38 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 44 

# 00a3a Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 43 

# 00a3c Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 42 

# 00a3e Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 41 

# 00a40 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 40 

# 00a42 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3f 

# 00a44 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3e 

# 00a46 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3d 

# 00a48 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3c 

# 00a4a Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3b 

# 00a4c Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3a 

# 00a4e Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 39 

# 00a50 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 38 

# 00a52 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00a58 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 62 0a 00 00 

# 00a5e JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 27 26 00 

# 00a62 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00a68 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 38 

# 00a6a Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 39 

# 00a6c Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3a 

# 00a6e Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3b 

# 00a70 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3c 

# 00a72 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3d 

# 00a74 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3e 

# 00a76 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3f 

# 00a78 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 40 

# 00a7a Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 41 

# 00a7c Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 42 

# 00a7e Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 43 

# 00a80 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 44 

# 00a82 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 45 

# 00a84 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 48 

# 00a86 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 49 

# 00a88 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4a 

# 00a8a Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4b 

# 00a8c Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4c 

# 00a8e Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4d 

# 00a90 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4e 

# 00a92 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4f 

# 00a94 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 50 

# 00a96 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 51 

# 00a98 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 52 

# 00a9a Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 53 

# 00a9c Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 54 

# 00a9e Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 55 

# 00aa0 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 56 

# 00aa2 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 57 

# 00aa4 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 58 

# 00aa6 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 59 

# 00aa8 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5c 

# 00aaa Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5d 

# 00aac Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5e 

# 00aae Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5f 

# 00ab0 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 60 

# 00ab2 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 64 

# 00ab4 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 65 

# 00ab6 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 66 

# 00ab8 Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 67 

# 00aba Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 68 

# 00abc Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 69 

# 00abe Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6a 

# 00ac0 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6b 

# 00ac2 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6c 

# 00ac4 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6d 

# 00ac6 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6e 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #221, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 00ac8 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #221, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #223, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 00acb Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #224, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 00acd LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #224, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #225, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 00ad3 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #225, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #226, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 00ad6 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #226, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #227, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'
# 00ad9 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #227, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'
15 60 59 

# 00adc JzImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #227, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'
72 fc 0a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #227, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_20_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #229, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 00ae0 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #229, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #230, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 00ae3 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #230, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 00ae6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00aec StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c f6 0a 00 00 

# 00af2 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 00af6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 00afc Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00aff Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00b02 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 00b08 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 00b0b LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 00b11 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 00b15 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 00b18 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 00b1b ClearCarry []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00b1c AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 00b20 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00b21 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 00b24 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00b25 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00b28 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00b2e Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00b31 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 00b37 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 00b3a Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 00b3d AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 00b43 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 00b46 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00b47 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_1_27 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 00b4b LoadImm8 [Register(0x58), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 58 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 00b4e Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 58 

# 00b51 JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 59 0b 00 

# 00b55 JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 ef 0e 00 

# :RpnCalc_handle_if_true_2_28 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 00b59 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 00b5c Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 00b5f Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 5c 38 

# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 00b62 Copy32 [Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 48 5c 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 00b65 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 00b68 Copy32 [Register(0x5c), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 5c 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00b6b Mul8_16 [Register(0x3c), Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 48 4c 

# 00b6f LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 00b72 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00b75 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00b78 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 00b7e Copy8 [Register(0x60), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00b81 Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00b84 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 00b8a Copy8 [Register(0x58), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 58 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00b8d Mul8_16 [Register(0x64), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 64 54 54 

# 00b91 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 00b94 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 00b97 Copy8 [Register(0x55), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 00b9a Copy8 [Register(0x59), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 59 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 00b9d Copy8 [Register(0x54), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 00ba0 Copy8 [Register(0x59), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 59 56 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #276, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 00ba3 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #276, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #277, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00ba6 Copy8 [Register(0x59), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #277, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #278, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00ba9 Copy8 [Register(0x59), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #278, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00bac ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00bad AddCarry32_1 [Register(0x4c), Register(0x54), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 54 4c 

# 00bb1 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00bb2 Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00bb5 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 00bbb Copy8 [Register(0x58), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 58 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00bbe Mul8_16 [Register(0x3c), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 54 54 

# 00bc2 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 00bc5 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00bc8 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00bcb LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 00bd1 Copy8 [Register(0x60), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 00bd4 Mul8_16 [Register(0x64), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 64 48 3c 

# 00bd8 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 00bdb LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00bde Copy32 [Register(0x54), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00be1 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00be2 AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 3c 54 

# 00be6 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 00be7 Copy8 [Register(0x56), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 00bea Copy8 [Register(0x60), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 00bed Copy8 [Register(0x55), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 00bf0 Copy8 [Register(0x60), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 00bf3 Copy8 [Register(0x54), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 00bf6 Copy8 [Register(0x60), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #299, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00bf9 Copy8 [Register(0x59), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #299, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00bfc Copy32 [Register(0x54), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00bff ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00c00 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 48 3c 

# 00c04 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00c05 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 4c 

# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 00c08 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 00c0e Copy8 [Register(0x3b), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 3b 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 00c11 Copy8 [Register(0x45), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 45 3d 

# inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 00c14 Copy8 [Register(0x3a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 3a 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 00c17 Copy8 [Register(0x45), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 45 3c 

# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 00c1a LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 48 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 00c20 Copy8 [Register(0x5f), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 5f 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 00c23 Copy8 [Register(0x44), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 44 49 

# inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 00c26 Copy8 [Register(0x5e), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 5e 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 00c29 Copy8 [Register(0x44), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 44 48 

# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00c2c Mul8_16 [Register(0x3c), Register(0x5c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 5c 54 

# 00c30 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 56 00 

# 00c33 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00c36 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00c39 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 00c3f Copy8 [Register(0x60), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00c42 Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00c45 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 00c4b Copy8 [Register(0x44), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00c4e Mul8_16 [Register(0x68), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 68 64 64 

# 00c52 LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 66 00 

# 00c55 LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 67 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 00c58 Copy8 [Register(0x65), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 65 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 00c5b Copy8 [Register(0x59), Register(0x67)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 59 67 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 00c5e Copy8 [Register(0x64), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 64 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 00c61 Copy8 [Register(0x59), Register(0x66)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 59 66 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #331, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 00c64 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #331, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #332, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00c67 Copy8 [Register(0x59), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #332, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 65 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #333, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00c6a Copy8 [Register(0x59), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #333, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00c6d ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00c6e AddCarry32_1 [Register(0x54), Register(0x64), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 54 64 54 

# 00c72 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00c73 Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00c76 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 00c7c Copy8 [Register(0x44), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00c7f Mul8_16 [Register(0x3c), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 64 64 

# 00c83 LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 66 00 

# 00c86 LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 67 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00c89 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00c8c LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 68 00 00 00 00 

# 00c92 Copy8 [Register(0x60), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 00c95 Mul8_16 [Register(0x68), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 68 5c 3c 

# 00c99 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 00c9c LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00c9f Copy32 [Register(0x64), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 64 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00ca2 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00ca3 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 5c 3c 64 

# 00ca7 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 00ca8 Copy8 [Register(0x66), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 66 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 00cab Copy8 [Register(0x60), Register(0x67)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 67 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 00cae Copy8 [Register(0x65), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 65 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 00cb1 Copy8 [Register(0x60), Register(0x66)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 66 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 00cb4 Copy8 [Register(0x64), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 64 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 00cb7 Copy8 [Register(0x60), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 65 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #354, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00cba Copy8 [Register(0x59), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #354, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00cbd Copy32 [Register(0x64), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 64 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00cc0 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00cc1 AddCarry32_1 [Register(0x54), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 54 5c 3c 

# 00cc5 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00cc6 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 64 

# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 00cc9 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00ccc Mul8_16 [Register(0x38), Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 5c 

# 00cd0 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5e 00 

# 00cd3 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00cd6 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00cd9 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 00cdf Copy8 [Register(0x45), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00ce2 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00ce5 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 00ceb Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00cee Mul8_16 [Register(0x54), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 54 48 48 

# 00cf2 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 00cf5 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 00cf8 Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 00cfb Copy8 [Register(0x58), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 58 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 00cfe Copy8 [Register(0x48), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 48 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 00d01 Copy8 [Register(0x58), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 58 4a 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #376, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 00d04 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #376, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #377, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00d07 Copy8 [Register(0x59), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #377, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #378, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00d0a Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #378, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00d0d ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00d0e AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 5c 48 5c 

# 00d12 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 00d13 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 00d16 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 00d1c Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 00d1f Mul8_16 [Register(0x38), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 48 48 

# 00d23 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 00d26 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 00d29 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 00d2c LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 00d32 Copy8 [Register(0x45), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 00d35 Mul8_16 [Register(0x54), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 54 3c 38 

# 00d39 LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 00d3c LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00d3f Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00d42 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00d43 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 48 

# 00d47 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 00d48 Copy8 [Register(0x4a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4a 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 00d4b Copy8 [Register(0x45), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 45 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 00d4e Copy8 [Register(0x49), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 49 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 00d51 Copy8 [Register(0x45), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 00d54 Copy8 [Register(0x48), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 48 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 00d57 Copy8 [Register(0x45), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #399, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00d5a Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #399, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00d5d Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00d60 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00d61 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 5c 3c 38 

# 00d65 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 00d66 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 

# 00d67 AddCarry32_1 [Register(0x64), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 64 38 38 

# 00d6b AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 

# inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 00d6c Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 00d6f Copy8 [Register(0x45), Register(0x3b)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 3b 

# inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 00d72 Copy8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 38 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 00d75 Copy8 [Register(0x45), Register(0x3a)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 3a 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #410, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 00d78 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #410, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #411, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00d7b Copy8 [Register(0x59), Register(0x39)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #411, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 39 

# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #412, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 00d7e Copy8 [Register(0x59), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #412, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 38 

# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 00d81 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 4c 3c 

# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00d84 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00d85 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 38 

# 00d89 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00d8a Copy32 [Register(0x38), Register(0x5c)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 38 5c 

# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 None
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 00d8d Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 5c 38 

# None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 00d90 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
# 00d93 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6e 

# 00d95 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6d 

# 00d97 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6c 

# 00d99 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6b 

# 00d9b Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6a 

# 00d9d Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 69 

# 00d9f Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 68 

# 00da1 Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 67 

# 00da3 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 66 

# 00da5 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 65 

# 00da7 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 64 

# 00da9 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 60 

# 00dab Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5f 

# 00dad Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5e 

# 00daf Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5d 

# 00db1 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5c 

# 00db3 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 59 

# 00db5 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 58 

# 00db7 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 57 

# 00db9 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 56 

# 00dbb Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 55 

# 00dbd Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 54 

# 00dbf Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 53 

# 00dc1 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 52 

# 00dc3 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 51 

# 00dc5 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 50 

# 00dc7 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4f 

# 00dc9 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4e 

# 00dcb Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4d 

# 00dcd Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4c 

# 00dcf Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4b 

# 00dd1 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4a 

# 00dd3 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 49 

# 00dd5 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 48 

# 00dd7 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 45 

# 00dd9 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 44 

# 00ddb Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 43 

# 00ddd Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 42 

# 00ddf Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 41 

# 00de1 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 40 

# 00de3 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3f 

# 00de5 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3e 

# 00de7 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3d 

# 00de9 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3c 

# 00deb Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3b 

# 00ded Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3a 

# 00def Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 39 

# 00df1 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 38 

# 00df3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00df9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 03 0e 00 00 

# 00dff JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 27 26 00 

# 00e03 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00e09 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 38 

# 00e0b Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 39 

# 00e0d Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3a 

# 00e0f Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3b 

# 00e11 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3c 

# 00e13 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3d 

# 00e15 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3e 

# 00e17 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3f 

# 00e19 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 40 

# 00e1b Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 41 

# 00e1d Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 42 

# 00e1f Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 43 

# 00e21 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 44 

# 00e23 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 45 

# 00e25 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 48 

# 00e27 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 49 

# 00e29 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4a 

# 00e2b Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4b 

# 00e2d Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4c 

# 00e2f Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4d 

# 00e31 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4e 

# 00e33 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4f 

# 00e35 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 50 

# 00e37 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 51 

# 00e39 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 52 

# 00e3b Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 53 

# 00e3d Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 54 

# 00e3f Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 55 

# 00e41 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 56 

# 00e43 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 57 

# 00e45 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 58 

# 00e47 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 59 

# 00e49 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5c 

# 00e4b Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5d 

# 00e4d Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5e 

# 00e4f Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5f 

# 00e51 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 60 

# 00e53 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 64 

# 00e55 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 65 

# 00e57 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 66 

# 00e59 Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 67 

# 00e5b Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 68 

# 00e5d Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 69 

# 00e5f Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6a 

# 00e61 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6b 

# 00e63 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6c 

# 00e65 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6d 

# 00e67 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6e 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #420, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 00e69 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #420, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #422, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 00e6c Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #423, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 00e6e LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #423, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #424, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 00e74 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #424, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #425, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 00e77 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #425, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #426, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'
# 00e7a Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #426, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'
15 45 59 

# 00e7d JzImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #426, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'
72 9d 0e 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #426, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_21_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #428, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 00e81 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #428, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #429, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 00e84 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #429, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 00e87 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00e8d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 97 0e 00 00 

# 00e93 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 00e97 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 00e9d Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 5c 38 

# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 00ea0 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00ea3 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00ea6 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 00eac Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 00eaf LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 00eb5 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 00eb9 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 00ebc LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 00ebf ClearCarry []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 00ec0 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 00ec4 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00ec5 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 00ec8 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00ec9 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00ecc AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 00ed2 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 00ed5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 00edb Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 00ede Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 00ee1 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 00ee7 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 00eea Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00eeb JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_2_29 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 00eef LoadImm8 [Register(0x58), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 58 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 00ef2 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 58 

# 00ef5 JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 fd 0e 00 

# 00ef9 JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 44 11 00 

# :RpnCalc_handle_if_true_3_30 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 00efd Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 00f00 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 00f03 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 5c 00 

# 00f06 Copy32 [Register(0x48), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 48 04 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
# 00f09 Push8 [Register(0x6e)]
#       Saving reg0x6e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6e 

# 00f0b Push8 [Register(0x6d)]
#       Saving reg0x6d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6d 

# 00f0d Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6c 

# 00f0f Push8 [Register(0x6b)]
#       Saving reg0x6b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6b 

# 00f11 Push8 [Register(0x6a)]
#       Saving reg0x6a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6a 

# 00f13 Push8 [Register(0x69)]
#       Saving reg0x69 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 69 

# 00f15 Push8 [Register(0x68)]
#       Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 68 

# 00f17 Push8 [Register(0x67)]
#       Saving reg0x67 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 67 

# 00f19 Push8 [Register(0x66)]
#       Saving reg0x66 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 66 

# 00f1b Push8 [Register(0x65)]
#       Saving reg0x65 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 65 

# 00f1d Push8 [Register(0x64)]
#       Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 64 

# 00f1f Push8 [Register(0x60)]
#       Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 60 

# 00f21 Push8 [Register(0x5f)]
#       Saving reg0x5f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5f 

# 00f23 Push8 [Register(0x5e)]
#       Saving reg0x5e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5e 

# 00f25 Push8 [Register(0x5d)]
#       Saving reg0x5d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5d 

# 00f27 Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5c 

# 00f29 Push8 [Register(0x59)]
#       Saving reg0x59 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 59 

# 00f2b Push8 [Register(0x58)]
#       Saving reg0x58 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 58 

# 00f2d Push8 [Register(0x57)]
#       Saving reg0x57 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 57 

# 00f2f Push8 [Register(0x56)]
#       Saving reg0x56 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 56 

# 00f31 Push8 [Register(0x55)]
#       Saving reg0x55 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 55 

# 00f33 Push8 [Register(0x54)]
#       Saving reg0x54 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 54 

# 00f35 Push8 [Register(0x53)]
#       Saving reg0x53 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 53 

# 00f37 Push8 [Register(0x52)]
#       Saving reg0x52 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 52 

# 00f39 Push8 [Register(0x51)]
#       Saving reg0x51 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 51 

# 00f3b Push8 [Register(0x50)]
#       Saving reg0x50 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 50 

# 00f3d Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4f 

# 00f3f Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4e 

# 00f41 Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4d 

# 00f43 Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4c 

# 00f45 Push8 [Register(0x4b)]
#       Saving reg0x4b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4b 

# 00f47 Push8 [Register(0x4a)]
#       Saving reg0x4a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4a 

# 00f49 Push8 [Register(0x49)]
#       Saving reg0x49 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 49 

# 00f4b Push8 [Register(0x48)]
#       Saving reg0x48 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 48 

# 00f4d Push8 [Register(0x45)]
#       Saving reg0x45 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 45 

# 00f4f Push8 [Register(0x44)]
#       Saving reg0x44 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 44 

# 00f51 Push8 [Register(0x43)]
#       Saving reg0x43 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 43 

# 00f53 Push8 [Register(0x42)]
#       Saving reg0x42 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 42 

# 00f55 Push8 [Register(0x41)]
#       Saving reg0x41 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 41 

# 00f57 Push8 [Register(0x40)]
#       Saving reg0x40 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 40 

# 00f59 Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3f 

# 00f5b Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3e 

# 00f5d Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3d 

# 00f5f Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3c 

# 00f61 Push8 [Register(0x3b)]
#       Saving reg0x3b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3b 

# 00f63 Push8 [Register(0x3a)]
#       Saving reg0x3a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3a 

# 00f65 Push8 [Register(0x39)]
#       Saving reg0x39 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 39 

# 00f67 Push8 [Register(0x38)]
#       Saving reg0x38 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 38 

# 00f69 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 

# 00f6f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c 79 0f 00 00 

# 00f75 JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 8f 17 00 

# 00f79 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 

# 00f7f Pop8 [Register(0x38)]
#       Restoring reg0x38 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 38 

# 00f81 Pop8 [Register(0x39)]
#       Restoring reg0x39 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 39 

# 00f83 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3a 

# 00f85 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3b 

# 00f87 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3c 

# 00f89 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3d 

# 00f8b Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3e 

# 00f8d Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3f 

# 00f8f Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 40 

# 00f91 Pop8 [Register(0x41)]
#       Restoring reg0x41 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 41 

# 00f93 Pop8 [Register(0x42)]
#       Restoring reg0x42 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 42 

# 00f95 Pop8 [Register(0x43)]
#       Restoring reg0x43 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 43 

# 00f97 Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 44 

# 00f99 Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 45 

# 00f9b Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 48 

# 00f9d Pop8 [Register(0x49)]
#       Restoring reg0x49 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 49 

# 00f9f Pop8 [Register(0x4a)]
#       Restoring reg0x4a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4a 

# 00fa1 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4b 

# 00fa3 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4c 

# 00fa5 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4d 

# 00fa7 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4e 

# 00fa9 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4f 

# 00fab Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 50 

# 00fad Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 51 

# 00faf Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 52 

# 00fb1 Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 53 

# 00fb3 Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 54 

# 00fb5 Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 55 

# 00fb7 Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 56 

# 00fb9 Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 57 

# 00fbb Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 58 

# 00fbd Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 59 

# 00fbf Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5c 

# 00fc1 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5d 

# 00fc3 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5e 

# 00fc5 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5f 

# 00fc7 Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 60 

# 00fc9 Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 64 

# 00fcb Pop8 [Register(0x65)]
#       Restoring reg0x65 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 65 

# 00fcd Pop8 [Register(0x66)]
#       Restoring reg0x66 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 66 

# 00fcf Pop8 [Register(0x67)]
#       Restoring reg0x67 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 67 

# 00fd1 Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 68 

# 00fd3 Pop8 [Register(0x69)]
#       Restoring reg0x69 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 69 

# 00fd5 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6a 

# 00fd7 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6b 

# 00fd9 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6c 

# 00fdb Pop8 [Register(0x6d)]
#       Restoring reg0x6d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6d 

# 00fdd Pop8 [Register(0x6e)]
#       Restoring reg0x6e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6e 

# 00fdf Copy32 [Register(0x00), Register(0x5c)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 5c 

# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 00fe2 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 00fe5 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
# 00fe8 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6e 

# 00fea Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6d 

# 00fec Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6c 

# 00fee Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6b 

# 00ff0 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6a 

# 00ff2 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 69 

# 00ff4 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 68 

# 00ff6 Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 67 

# 00ff8 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 66 

# 00ffa Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 65 

# 00ffc Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 64 

# 00ffe Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 60 

# 01000 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5f 

# 01002 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5e 

# 01004 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5d 

# 01006 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5c 

# 01008 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 59 

# 0100a Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 58 

# 0100c Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 57 

# 0100e Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 56 

# 01010 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 55 

# 01012 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 54 

# 01014 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 53 

# 01016 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 52 

# 01018 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 51 

# 0101a Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 50 

# 0101c Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4f 

# 0101e Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4e 

# 01020 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4d 

# 01022 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4c 

# 01024 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4b 

# 01026 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4a 

# 01028 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 49 

# 0102a Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 48 

# 0102c Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 45 

# 0102e Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 44 

# 01030 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 43 

# 01032 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 42 

# 01034 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 41 

# 01036 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 40 

# 01038 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3f 

# 0103a Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3e 

# 0103c Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3d 

# 0103e Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3c 

# 01040 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3b 

# 01042 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3a 

# 01044 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 39 

# 01046 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 38 

# 01048 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 0104e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 58 10 00 00 

# 01054 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 27 26 00 

# 01058 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 0105e Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 38 

# 01060 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 39 

# 01062 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3a 

# 01064 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3b 

# 01066 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3c 

# 01068 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3d 

# 0106a Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3e 

# 0106c Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3f 

# 0106e Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 40 

# 01070 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 41 

# 01072 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 42 

# 01074 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 43 

# 01076 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 44 

# 01078 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 45 

# 0107a Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 48 

# 0107c Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 49 

# 0107e Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4a 

# 01080 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4b 

# 01082 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4c 

# 01084 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4d 

# 01086 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4e 

# 01088 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4f 

# 0108a Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 50 

# 0108c Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 51 

# 0108e Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 52 

# 01090 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 53 

# 01092 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 54 

# 01094 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 55 

# 01096 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 56 

# 01098 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 57 

# 0109a Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 58 

# 0109c Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 59 

# 0109e Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5c 

# 010a0 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5d 

# 010a2 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5e 

# 010a4 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5f 

# 010a6 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 60 

# 010a8 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 64 

# 010aa Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 65 

# 010ac Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 66 

# 010ae Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 67 

# 010b0 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 68 

# 010b2 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 69 

# 010b4 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6a 

# 010b6 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6b 

# 010b8 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6c 

# 010ba Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6d 

# 010bc Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6e 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 010be LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #462, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 010c1 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #463, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 010c3 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #463, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #464, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 010c9 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #464, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #465, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 010cc LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #465, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #466, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'
# 010cf Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #466, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'
15 45 59 

# 010d2 JzImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #466, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'
72 f2 10 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #466, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_22_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #468, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 010d6 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #468, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #469, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 010d9 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #469, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 010dc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 010e2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ec 10 00 00 

# 010e8 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 010ec AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 010f2 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 010f5 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 010f8 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 010fb AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 01101 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 01104 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0110a Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 0110e LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 01111 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 01114 ClearCarry []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 01115 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 01119 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0111a Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 0111d Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0111e Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 01121 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01127 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 0112a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 01130 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 01133 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 01136 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 0113c Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 0113f Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01140 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_3_31 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 01144 LoadImm8 [Register(0x58), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 58 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 01147 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 58 

# 0114a JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 52 11 00 

# 0114e JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 f8 11 00 

# :RpnCalc_handle_if_true_4_32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 01152 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 01155 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 40 5c 

# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 01158 Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 48 38 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0115b Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 0115e AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 01164 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 01167 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0116d Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 01171 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 01174 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 01177 ClearCarry []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 01178 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 5c 48 48 

# 0117c AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0117d Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 48 

# 01180 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01181 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 01184 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0118a Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 0118d AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 01193 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 01196 Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 48 38 

# 01199 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 0119f Store32_1 [Register(0x38), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 4c 

# 011a2 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 011a3 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 3c 5c 

# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 011a6 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 011a9 Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 5c 38 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 011ac Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 011af AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 011b5 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 011b8 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 011be Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 011c2 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 011c5 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 011c8 ClearCarry []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 011c9 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 011cd AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 011ce Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 011d1 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 011d2 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 011d5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 011db Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 011de AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 011e4 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 011e7 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 011ea AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 011f0 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 011f3 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 011f4 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_4_33 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Number(0n113/0x71u8)
# 011f8 LoadImm8 [Register(0x45), Constant8(0x71=113)]
#       tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
#       Number(0n113/0x71u8)
04 45 71 

# if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# 011fb Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
15 44 45 

# 011fe JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
72 06 12 00 

# 01202 JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
70 12 12 00 

# :RpnCalc_handle_if_true_5_34 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #537, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 01206 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #537, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("RpnCalc_handle"), at #538, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
# 01209 Copy8 [Register(0x59), Register(0x00)]
#       return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("RpnCalc_handle"), at #538, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
0b 59 00 

# 0120c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0120e JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_5_35 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #542, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 01212 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #542, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# # In IlFunctionId("RpnCalc_handle"), at #543, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# 01215 Cmp8 [Register(0x44), Register(0x60)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #543, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
15 44 60 

# 01218 JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #543, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
72 20 12 00 

# 0121c JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #543, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
70 bc 12 00 

# :RpnCalc_handle_if_true_6_36 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 01220 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 01223 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 01226 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 0122c Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #550, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 0122f LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #550, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #551, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'
# 01232 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #551, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'
15 60 59 

# 01235 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #551, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'
72 b8 12 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #551, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 01239 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 0123c AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 01242 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 3c 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 01245 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01248 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 0124b AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 01251 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 01254 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 0125a Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 0125e LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 01261 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 01264 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 01265 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 01269 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0126a Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 0126d Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 0126e Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01271 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 01274 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 0127a Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0127d Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 01280 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 01286 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 01289 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 0128c AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 01292 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 01295 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 01296 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 01299 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #574, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 0129f LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #574, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #575, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 012a5 Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #575, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 3c 

# 012a8 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #575, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 012a9 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 012ac AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #578, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 012b2 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #578, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #579, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 012b5 Store8 [Register(0x59), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #579, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
06 59 3c 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 012b8 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_6_37 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 012bc LoadImm8 [Register(0x45), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 45 20 

# if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# 012bf Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
15 44 45 

# 012c2 JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
72 ca 12 00 

# 012c6 JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
70 66 13 00 

# :RpnCalc_handle_if_true_7_38 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 012ca Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 012cd Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 012d0 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 012d6 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #592, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 012d9 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #592, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #593, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'
# 012dc Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #593, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'
15 60 59 

# 012df JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #593, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'
72 62 13 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #593, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 012e3 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 012e6 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 012ec Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 3c 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 012ef Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 012f2 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 012f5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 012fb Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 012fe LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 01304 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 01308 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 0130b LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 0130e ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 0130f AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 01313 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 01314 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 01317 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 01318 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 0131b Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 0131e AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 01324 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01327 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 0132a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 01330 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 01333 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 01336 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 0133c Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 0133f Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 01340 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 01343 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #616, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 01349 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #616, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #617, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 0134f Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #617, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 3c 

# 01352 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #617, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 01353 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 01356 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #620, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 0135c LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #620, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #621, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 0135f Store8 [Register(0x59), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #621, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
06 59 3c 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01362 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_7_39 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Number(0n99/0x63u8)
# 01366 LoadImm8 [Register(0x45), Constant8(0x63=99)]
#       t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
#       Number(0n99/0x63u8)
04 45 63 

# if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# 01369 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
15 44 45 

# 0136c JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
72 74 13 00 

# 01370 JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
70 9e 13 00 

# :RpnCalc_handle_if_true_8_40 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 01374 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 01377 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 3c 

# 0137a AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 3c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 01380 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 01386 Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 48 3c 

# 01389 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 0138a AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 38 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #637, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 01390 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #637, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #638, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 01396 Store32_1 [Register(0x48), Register(0x38)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #638, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 38 

# 01399 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #638, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0139a JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_8_41 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Number(0n100/0x64u8)
# 0139e LoadImm8 [Register(0x45), Constant8(0x64=100)]
#       tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
#       Number(0n100/0x64u8)
04 45 64 

# if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# 013a1 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
15 44 45 

# 013a4 JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
72 ac 13 00 

# 013a8 JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
70 47 15 00 

# :RpnCalc_handle_if_true_9_42 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 013ac LoadImm8 [Register(0x45), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 45 00 

# :RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 013af Copy8 [Register(0x6c), Register(0x6e)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 6c 6e 

# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 013b2 Cmp8 [Register(0x6e), Register(0x45)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 6e 45 

# 013b5 JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 43 15 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 013b9 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 013bc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 013c2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c cc 13 00 00 

# 013c8 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 16 28 00 

# 013cc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 013d2 LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 013d5 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #656, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 013d7 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #656, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #657, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 013dd Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #657, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #658, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 013e0 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #658, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'
# 013e3 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'
15 60 59 

# 013e6 JzImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'
72 06 14 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #659, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_23_putc_if_true_0_1
# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 013ea LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 013ed Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 013f0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 013f6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 00 14 00 00 

# 013fc JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 01400 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_end_0
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# 01406 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
20 3c 00 00 00 00 

# 0140c Copy8 [Register(0x45), Register(0x3c)]
#       t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
0b 45 3c 

# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# 0140f Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
21 40 5c 

# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
# 01412 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 01418 Mul8_16 [Register(0x3c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
11 3c 00 3c 

# 0141c LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3e 00 

# 0141f LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3f 00 

# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# 01422 ClearCarry []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
03 

# 01423 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
30 5c 3c 3c 

# 01427 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 01428 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 3c 3c 

# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# :inline_RpnCalc_handle_stack_get_48_function_end_stack_get None
# inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# 0142b Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
21 3c 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
# 0142e Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6e 

# 01430 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6d 

# 01432 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6c 

# 01434 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6b 

# 01436 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 6a 

# 01438 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 69 

# 0143a Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 68 

# 0143c Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 67 

# 0143e Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 66 

# 01440 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 65 

# 01442 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 64 

# 01444 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 60 

# 01446 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5f 

# 01448 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5e 

# 0144a Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5d 

# 0144c Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5c 

# 0144e Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 59 

# 01450 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 58 

# 01452 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 57 

# 01454 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 56 

# 01456 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 55 

# 01458 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 54 

# 0145a Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 53 

# 0145c Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 52 

# 0145e Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 51 

# 01460 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 50 

# 01462 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4f 

# 01464 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4e 

# 01466 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4d 

# 01468 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4c 

# 0146a Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4b 

# 0146c Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4a 

# 0146e Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 49 

# 01470 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 48 

# 01472 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 45 

# 01474 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 44 

# 01476 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 43 

# 01478 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 42 

# 0147a Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 41 

# 0147c Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 40 

# 0147e Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3f 

# 01480 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3e 

# 01482 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3d 

# 01484 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3c 

# 01486 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3b 

# 01488 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3a 

# 0148a Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 39 

# 0148c Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 38 

# 0148e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 01494 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 9e 14 00 00 

# 0149a JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 27 26 00 

# 0149e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 014a4 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 38 

# 014a6 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 39 

# 014a8 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3a 

# 014aa Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3b 

# 014ac Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3c 

# 014ae Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3d 

# 014b0 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3e 

# 014b2 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3f 

# 014b4 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 40 

# 014b6 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 41 

# 014b8 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 42 

# 014ba Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 43 

# 014bc Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 44 

# 014be Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 45 

# 014c0 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 48 

# 014c2 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 49 

# 014c4 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4a 

# 014c6 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4b 

# 014c8 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4c 

# 014ca Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4d 

# 014cc Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4e 

# 014ce Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4f 

# 014d0 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 50 

# 014d2 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 51 

# 014d4 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 52 

# 014d6 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 53 

# 014d8 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 54 

# 014da Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 55 

# 014dc Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 56 

# 014de Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 57 

# 014e0 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 58 

# 014e2 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 59 

# 014e4 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5c 

# 014e6 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5d 

# 014e8 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5e 

# 014ea Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5f 

# 014ec Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 60 

# 014ee Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 64 

# 014f0 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 65 

# 014f2 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 66 

# 014f4 Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 67 

# 014f6 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 68 

# 014f8 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 69 

# 014fa Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6a 

# 014fc Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6b 

# 014fe Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6c 

# 01500 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6d 

# 01502 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 6e 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #675, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 01504 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #675, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #677, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 01507 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #678, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 01509 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #678, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #679, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 0150f Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #679, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #680, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 01512 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #680, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #681, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'
# 01515 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #681, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'
15 60 59 

# 01518 JzImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_end_0)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #681, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'
72 38 15 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #681, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_24_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #683, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 0151c LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #683, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #684, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 0151f Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #684, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 01522 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01528 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 32 15 00 00 

# 0152e JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 01532 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_end_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 01538 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 0153b Add8NoCarryIn [Register(0x45), Register(0x00), Register(0x45)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 45 00 45 

# goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0153f JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 af 13 00 

# :RpnCalc_handle_while_end_46 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01543 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 e1 15 00 

# :RpnCalc_handle_if_else_9_43 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Number(0n57/0x39u8)
# 01547 LoadImm8 [Register(0x45), Constant8(0x39=57)]
#       teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
#       Number(0n57/0x39u8)
04 45 39 

# if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# 0154a Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
15 44 45 

# 0154d JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
71 55 15 00 

# 01551 JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
70 e1 15 00 

# :RpnCalc_handle_if_true_10_47 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Number(0n48/0x30u8)
# 01555 LoadImm8 [Register(0x45), Constant8(0x30=48)]
#       tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
#       Number(0n48/0x30u8)
04 45 30 

# if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# 01558 Cmp8 [Register(0x45), Register(0x44)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
15 45 44 

# 0155b JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
71 63 15 00 

# 0155f JmpImm [Label24(RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
70 e1 15 00 

# :RpnCalc_handle_if_true_0_50 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 01563 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 01566 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 38 48 00 00 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 0156c LoadImm8 [Register(0x6e), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 6e 01 

# mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# 0156f Store8 [Register(0x6e), Register(0x38)]
#       mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
06 6e 38 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 01572 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 01575 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 01578 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 0157e Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 01581 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 01584 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 0158a Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 48 3c 

# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 0158d Copy32 [Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 3c 38 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 01590 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 01591 AddCarry32_1 [Register(0x38), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 38 

# 01595 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 01596 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 01597 AddCarry32_1 [Register(0x38), Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 3c 

# 0159b AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 0159c ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 0159d AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 3c 3c 3c 

# 015a1 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 015a2 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 015a3 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 3c 38 38 

# 015a7 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 None
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 015a8 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 38 48 

# 015ab Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 015ac Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 015af Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 015b2 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 015b8 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 015bb Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 015be AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# 015c4 Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
22 48 3c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) })\nCast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# 015c7 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
04 00 d0 

# 015ca Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x45)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
14 44 00 45 

# tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# 015ce LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
20 38 00 00 00 00 

# 015d4 Copy8 [Register(0x45), Register(0x38)]
#       tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
0b 45 38 

# tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# 015d7 ClearCarry []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
03 

# 015d8 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
30 3c 38 38 

# 015dc AddCarry32_2 []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
31 

# mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# 015dd Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
23 38 48 

# 015e0 Store32_2 []
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
24 

# :RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49_MERGED_RpnCalc_handle_if_end_23
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 015e1 LoadImm8 [Register(0x6e), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 6e 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 015e4 Copy8 [Register(0x6e), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 6e 00 

# 015e7 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 015e9 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([112, 113, 114, 115])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([116])
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([116])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([120, 121, 122, 123]) Number(0n987392/0x000f1100u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([116])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([124]) Number(0n0/0x00u8)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([120, 121, 122, 123])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([132])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([136, 137, 138, 139]) Number(0n987648/0x000f1200u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([128, 129, 130, 131]) Number(0n987652/0x000f1204u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([116])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([132])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([120, 121, 122, 123])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([140])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([116])
# Var inline_RpnCalc_run_getchar_39_t0 (static "keyboard_enable" addr) Reg(U32) Some([120, 121, 122, 123]) Number(0n987144/0x000f1008u32)
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([116])
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([116])
# Var inline_RpnCalc_run_getchar_39_te3c4 (te3c4 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))) Reg(U8) Some([116])
# Var inline_RpnCalc_run_getchar_39_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([116])
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([116])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([116])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([116])
# 015ee Copy32 [Register(0x00), Register(0x70)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [112, 113, 114, 115].
21 00 70 

# :RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 015f1 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 7c 00 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
# 015f4 Cmp8 [Register(0x7c), Register(0x7c)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
15 7c 7c 

# 015f7 JzImm [Label24(RpnCalc_run_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
72 ff 15 00 

# 015fb JmpImm [Label24(function_end_RpnCalc_run)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'function_end_RpnCalc_run'
70 60 17 00 

# :RpnCalc_run_while_body_1 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 015ff LoadImm8 [Register(0x74), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 74 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #7, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 01602 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #7, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 7c 00 

# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
# 01605 Cmp8 [Register(0x74), Register(0x7c)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
15 74 7c 

# 01608 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
72 10 16 00 

# 0160c JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
70 db 16 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 01610 IoReadyToRead [Register(0x74)]
#       ReadyToRead
79 74 

# inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# 01612 AndImm8 [Register(0x74), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
18 74 01 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 01615 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 7c 00 

# if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
# 01618 Cmp8 [Register(0x74), Register(0x7c)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
15 74 7c 

# 0161b JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
72 56 16 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_run\"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 0161f In0 [Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# # In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
# 01621 LoadImm32 [Register(0x78), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
#       # In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
20 78 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# 01627 Copy8 [Register(0x7c), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
0b 7c 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# # In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
# 0162a LoadImm32 [Register(0x80), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
#       # In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
20 80 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# # In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# 01630 Load8 [Register(0x80), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
05 80 8c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 01633 LoadImm32 [Register(0x88), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 88 00 00 00 00 

# 01639 Copy8 [Register(0x8c), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 8c 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
# 0163c ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
03 

# 0163d AddCarry32_1 [Register(0x78), Register(0x88), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
30 78 88 78 

# 01641 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
31 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 01642 Store8 [Register(0x84), Register(0x78)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 84 78 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# # In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# 01645 Load8 [Register(0x80), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
05 80 8c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 01648 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 0164b Add8NoCarryIn [Register(0x8c), Register(0x00), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 8c 00 74 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# # In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
# 0164f Store8 [Register(0x74), Register(0x80)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
06 74 80 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 01652 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 7f 16 00 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 01656 LoadImm32 [Register(0x78), Constant32(0x000f1008=987144)]
#       inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
20 78 08 10 0f 00 

# inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 0165c Load8 [Register(0x78), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
05 78 74 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 0165f LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 7c 00 

# if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'
# 01662 Cmp8 [Register(0x74), Register(0x7c)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'
15 74 7c 

# 01665 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'
72 7f 16 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_run\"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_end_3'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_1_6)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52}
# Registers to save: []
# 01669 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 0166f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c 79 16 00 00 

# 01675 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 43 04 00 

# 01679 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# :inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# 0167f LoadImm32 [Register(0x78), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
20 78 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 01685 LoadImm32 [Register(0x88), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 88 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 0168b Load8 [Register(0x88), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 88 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# 0168e LoadImm32 [Register(0x80), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
20 80 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 01694 Load8 [Register(0x80), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 80 7c 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 01697 Cmp8 [Register(0x84), Register(0x7c)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 84 7c 

# 0169a JzImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 a2 16 00 

# 0169e JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 ac 16 00 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 016a2 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 7c 00 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 016a5 Copy8 [Register(0x7c), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 7c 74 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 016a8 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 d7 16 00 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 016ac LoadImm32 [Register(0x88), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 88 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 016b2 Load8 [Register(0x88), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 88 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 016b5 LoadImm32 [Register(0x80), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 80 00 00 00 00 

# 016bb Copy8 [Register(0x84), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 84 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# 016be ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
03 

# 016bf AddCarry32_1 [Register(0x78), Register(0x80), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
30 78 80 78 

# 016c3 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
31 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 016c4 Load8 [Register(0x78), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 78 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# 016c7 Load8 [Register(0x88), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
05 88 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 016ca LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 016cd Add8NoCarryIn [Register(0x84), Register(0x00), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 84 00 74 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# 016d1 Store8 [Register(0x74), Register(0x88)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
06 74 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 016d4 Copy8 [Register(0x7c), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 7c 74 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x74), Register(0x74)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 016d7 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 02 16 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x74), Register(0x74)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x74), Register(0x74)], resolved: None }
# :inline_RpnCalc_run_getchar_39_function_end_getchar None
# inline_RpnCalc_run_getchar_39_function_end_getchar
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x74), Register(0x74)], resolved: None }
# Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 016db Copy32 [Register(0x70), Register(0x00)]
#       Arg0[c]=calc Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 70 00 

# 016de Copy8 [Register(0x74), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 74 04 

# Registers used by this function: {112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [112, 113, 114, 115, 116, 120, 121, 122, 124, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140]
# 016e1 Push8 [Register(0x8c)]
#       Saving reg0x8c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8c 

# 016e3 Push8 [Register(0x8b)]
#       Saving reg0x8b before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8b 

# 016e5 Push8 [Register(0x8a)]
#       Saving reg0x8a before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8a 

# 016e7 Push8 [Register(0x89)]
#       Saving reg0x89 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 89 

# 016e9 Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 

# 016eb Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 

# 016ed Push8 [Register(0x83)]
#       Saving reg0x83 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 83 

# 016ef Push8 [Register(0x82)]
#       Saving reg0x82 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 82 

# 016f1 Push8 [Register(0x81)]
#       Saving reg0x81 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 81 

# 016f3 Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 

# 016f5 Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 

# 016f7 Push8 [Register(0x7a)]
#       Saving reg0x7a before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7a 

# 016f9 Push8 [Register(0x79)]
#       Saving reg0x79 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 79 

# 016fb Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 

# 016fd Push8 [Register(0x74)]
#       Saving reg0x74 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 74 

# 016ff Push8 [Register(0x73)]
#       Saving reg0x73 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 73 

# 01701 Push8 [Register(0x72)]
#       Saving reg0x72 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 72 

# 01703 Push8 [Register(0x71)]
#       Saving reg0x71 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 71 

# 01705 Push8 [Register(0x70)]
#       Saving reg0x70 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 70 

# 01707 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 

# 0170d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c 17 17 00 00 

# 01713 JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 89 05 00 

# 01717 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 

# 0171d Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 70 

# 0171f Pop8 [Register(0x71)]
#       Restoring reg0x71 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 71 

# 01721 Pop8 [Register(0x72)]
#       Restoring reg0x72 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 72 

# 01723 Pop8 [Register(0x73)]
#       Restoring reg0x73 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 73 

# 01725 Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 74 

# 01727 Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 

# 01729 Pop8 [Register(0x79)]
#       Restoring reg0x79 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 79 

# 0172b Pop8 [Register(0x7a)]
#       Restoring reg0x7a after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7a 

# 0172d Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 

# 0172f Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 

# 01731 Pop8 [Register(0x81)]
#       Restoring reg0x81 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 81 

# 01733 Pop8 [Register(0x82)]
#       Restoring reg0x82 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 82 

# 01735 Pop8 [Register(0x83)]
#       Restoring reg0x83 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 83 

# 01737 Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 

# 01739 Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 

# 0173b Pop8 [Register(0x89)]
#       Restoring reg0x89 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 89 

# 0173d Pop8 [Register(0x8a)]
#       Restoring reg0x8a after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8a 

# 0173f Pop8 [Register(0x8b)]
#       Restoring reg0x8b after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8b 

# 01741 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8c 

# 01743 Copy8 [Register(0x00), Register(0x74)]
#       Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 74 

# t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #66, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 01746 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #66, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 7c 00 

# if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #67, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
# 01749 Cmp8 [Register(0x74), Register(0x7c)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #67, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
15 74 7c 

# 0174c JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #67, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
72 54 17 00 

# 01750 JmpImm [Label24(RpnCalc_run_if_end_3)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #67, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_end_3'
70 5c 17 00 

# :RpnCalc_run_if_true_0_4 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #69, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 01754 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #69, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 7c 00 

# return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("RpnCalc_run"), at #70, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
# 01757 Copy8 [Register(0x7c), Register(0x00)]
#       return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("RpnCalc_run"), at #70, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
0b 7c 00 

# 0175a JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 0175c JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 f1 15 00 

# :function_end_RpnCalc_run Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# function_end_RpnCalc_run
# Unreachable None
# 01760 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([144, 145, 146, 147]) Number(0n0/0x00000000u32)
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([148, 149, 150, 151])
# Var x (Arg0 x Number(U32)) Reg(U32) Some([148, 149, 150, 151])
# 01765 Copy32 [Register(0x00), Register(0x94)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [148, 149, 150, 151].
21 00 94 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 01768 LoadImm32 [Register(0x90), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 90 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# 0176e Cmp8 [Register(0x97), Register(0x93)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
15 97 93 

# 01771 Cmp8IfZero [Register(0x96), Register(0x92)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 96 92 

# 01774 Cmp8IfZero [Register(0x95), Register(0x91)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 95 91 

# 01777 Cmp8IfZero [Register(0x94), Register(0x90)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 94 90 

# 0177a JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
72 88 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }\nArithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# 0177e AddImm32IgnoreCarry [Register(0x94), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
32 94 ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 01784 JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 68 17 00 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 01788 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 0178a Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_a (Arg0 a Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_b (Arg1 b Number(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([180])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([180])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([180])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([181])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([180])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([181])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([182]) Number(0n0/0x00u8)
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([180])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([189])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([189])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([180])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_div16_43_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_r (Local r Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([200])
# Var inline_div32_div16_43_t4299 (t4299 Index("x", Number(0n3/0x03u8))) Reg(U8) Some([180])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t5be0 (t5be0 Index("b", Number(0n0/0x00u8))) Reg(U8) Some([201])
# Var inline_div32_div16_43_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([164, 165, 166, 167]) Number(0n0/0x00000000u32)
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([160, 161, 162, 163]) Number(0n256/0x00000100u32)
# Var inline_div32_div16_43_ta670 (ta670 Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))) Reg(U8) Some([200])
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_tb0ef (tb0ef Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_tcd34 (tcd34 Index("x", Number(0n2/0x02u8))) Reg(U8) Some([180])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_x (Local x Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_shiftright1_44_a (Arg0 a Number(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_shiftright1_44_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([180])
# Var inline_div32_shiftright1_44_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_44_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_shiftright1_44_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_44_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([180])
# Var inline_div32_shiftright1_44_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_44_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_a (Arg0 a Number(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_shiftright1_45_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([180])
# Var inline_div32_shiftright1_45_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_45_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_shiftright1_45_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([189])
# Var inline_div32_shiftright1_45_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([180])
# Var inline_div32_shiftright1_45_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([188])
# Var inline_div32_shiftright1_45_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([188])
# Var lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var r (Local r Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([164, 165, 166, 167])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([164, 165, 166, 167])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([164, 165, 166, 167])
# Var t4917 (t4917 Number(0n65536/0x00010000u32)) Reg(U32) Some([160, 161, 162, 163]) Number(0n65536/0x00010000u32)
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([160, 161, 162, 163])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([152, 153, 154, 155])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([204, 205, 206, 207])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([156, 157, 158, 159])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([164, 165, 166, 167])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([164, 165, 166, 167])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([164, 165, 166, 167])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([172, 173, 174, 175])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([208, 209, 210, 211])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([152, 153, 154, 155])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([208, 209, 210, 211])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([168, 169, 170, 171])
# Var x (Local x Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# 0178f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 01795 Copy32 [Register(0x00), Register(0x98)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [152, 153, 154, 155].
21 00 98 

# 01798 Copy32 [Register(0x04), Register(0x9c)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [156, 157, 158, 159].
21 04 9c 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 0179b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 017a1 Cmp8 [Register(0x9f), Register(0x9b)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9f 9b 

# 017a4 Cmp8IfZero [Register(0x9e), Register(0x9a)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9e 9a 

# 017a7 Cmp8IfZero [Register(0x9d), Register(0x99)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9d 99 

# 017aa Cmp8IfZero [Register(0x9c), Register(0x98)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9c 98 

# 017ad JcImm [Label24(div32_if_end_0)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 c8 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_end_0' Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# div32_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# 017b1 LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
20 a4 00 00 00 00 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 017b7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
32 0c 08 00 00 00 

# return Some(inline_div32_div16_43_t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# # In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
# 017bd Copy32 [Register(0xa4), Register(0x00)]
#       return Some(inline_div32_div16_43_t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       # In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
21 a4 00 

# 017c0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 017c6 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Number(0n65536/0x00010000u32)
# 017c8 LoadImm32 [Register(0xa0), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
#       Number(0n65536/0x00010000u32)
20 a0 00 00 01 00 

# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# 017ce Cmp8 [Register(0xa3), Register(0x9b)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
15 a3 9b 

# 017d1 Cmp8IfZero [Register(0xa2), Register(0x9a)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 a2 9a 

# 017d4 Cmp8IfZero [Register(0xa1), Register(0x99)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 a1 99 

# 017d7 Cmp8IfZero [Register(0xa0), Register(0x98)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 a0 98 

# 017da JcImm [Label24(div32_if_end_3)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
71 61 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_end_3' Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 017de Cmp8 [Register(0x9f), Register(0x9b)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9f 9b 

# 017e1 Cmp8IfZero [Register(0x9e), Register(0x9a)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9e 9a 

# 017e4 Cmp8IfZero [Register(0x9d), Register(0x99)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9d 99 

# 017e7 Cmp8IfZero [Register(0x9c), Register(0x98)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9c 98 

# 017ea JcImm [Label24(inline_div32_div16_43_div16_if_end_0)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 fb 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_end_0' Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# 017ee LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
20 a4 00 00 00 00 

# te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 017f4 Copy32 [Register(0xa4), Register(0x98)]
#       te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
21 a4 98 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 017f7 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
70 50 1a 00 

# :inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 017fb LoadImm32 [Register(0xa0), Constant32(0x00000100=256)]
#       inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 a0 00 01 00 00 

# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 01801 Cmp8 [Register(0xa3), Register(0x9b)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 a3 9b 

# 01804 Cmp8IfZero [Register(0xa2), Register(0x9a)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 a2 9a 

# 01807 Cmp8IfZero [Register(0xa1), Register(0x99)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 a1 99 

# 0180a Cmp8IfZero [Register(0xa0), Register(0x98)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 a0 98 

# 0180d JcImm [Label24(inline_div32_div16_43_div16_if_end_3)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 28 18 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_end_3' Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("a", Number(0n0/0x00u8))
# 01811 Copy8 [Register(0x98), Register(0xc8)]
#       inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("a", Number(0n0/0x00u8))
0b 98 c8 

# inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("b", Number(0n0/0x00u8))
# 01814 Copy8 [Register(0x9c), Register(0xc9)]
#       inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("b", Number(0n0/0x00u8))
0b 9c c9 

# inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# 01817 Divide8 [Register(0xc8), Register(0xc9), Register(0xc8)]
#       inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
17 c8 c9 c8 

# inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# 0181b LoadImm32 [Register(0x98), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
20 98 00 00 00 00 

# 01821 Copy8 [Register(0xc8), Register(0x98)]
#       inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
0b c8 98 

# te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# 01824 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
70 50 1a 00 

# :inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 01828 LoadImm32 [Register(0xc0), Constant32(0x00000000=0)]
#       inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 c0 00 00 00 00 

# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
# Number(0n65535/0x0000ffffu32)
# 0182e LoadImm32 [Register(0xa0), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
#       Number(0n65535/0x0000ffffu32)
20 a0 ff ff 00 00 

# :inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 01834 Copy32 [Register(0xc0), Register(0xa4)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 c0 a4 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 01837 Cmp8 [Register(0xa3), Register(0xa7)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 a3 a7 

# 0183a Cmp8IfZero [Register(0xa2), Register(0xa6)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a2 a6 

# 0183d Cmp8IfZero [Register(0xa1), Register(0xa5)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a1 a5 

# 01840 Cmp8IfZero [Register(0xa0), Register(0xa4)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a0 a4 

# 01843 JcImm [Label24(inline_div32_div16_43_div16_while_end_8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 4a 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 01847 Copy32 [Register(0xc0), Register(0xa4)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 c0 a4 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 0184a ClearCarry []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 

# 0184b AddCarry32_1 [Register(0xa4), Register(0xa0), Register(0xa4)]
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 a4 a0 a4 

# 0184f AddCarry32_2 []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 

# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 01850 Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 01853 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 01856 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xbc), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 bc bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 0185b Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b bc a4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 0185e Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 01861 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 01864 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b4 bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 01869 Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b bc a5 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 0186c Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 0186f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 01872 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xbd), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 bd bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 01877 Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b bc a6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 0187a Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 0187d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 01880 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b4 bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 01885 Copy8 [Register(0xbc), Register(0xa7)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b bc a7 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 01888 Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 0188b AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 0188e Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b bc a4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 01891 Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 01894 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 01897 Copy8 [Register(0xb4), Register(0xbd)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b4 bd 

# 0189a AndImm8 [Register(0xbd), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 bd 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 0189d Or8 [Register(0xbc), Register(0xbd), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c bc bd bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 018a1 Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b bc a4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 018a4 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 018a7 Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b4 bc 

# 018aa AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 018ad Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b bc a5 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 018b0 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 018b3 Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 018b6 Copy8 [Register(0xbd), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b bd bc 

# 018b9 AndImm8 [Register(0xbc), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 bc 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 018bc Or8 [Register(0xb4), Register(0xbc), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b4 bc bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 018c0 Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b bc a5 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 018c3 Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 018c6 Copy8 [Register(0xbd), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b bd bc 

# 018c9 AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 018cc Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b bc a6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 018cf Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 018d2 Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 018d5 Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b4 bc 

# 018d8 AndImm8 [Register(0xbc), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 bc 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 018db Or8 [Register(0xbd), Register(0xbc), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c bd bc bc 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 018df Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b bc a6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 018e2 Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 018e5 Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b4 bc 

# 018e8 AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 018eb Copy8 [Register(0xbc), Register(0xa7)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b bc a7 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 018ee Copy32 [Register(0xa4), Register(0xc4)]
#       inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a4 c4 

# :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 None
# inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 018f1 Copy32 [Register(0xc4), Register(0xa4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 c4 a4 

# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 018f4 Copy32 [Register(0x9c), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 9c a8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 018f7 Mul8_16 [Register(0xa4), Register(0xa8), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 a4 a8 ac 

# 018fb LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 ae 00 

# 018fe LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 01901 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 01904 LoadImm32 [Register(0xb8), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 b8 00 00 00 00 

# 0190a Copy8 [Register(0xb4), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b4 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 0190d Copy8 [Register(0xa9), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b a9 bc 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 01910 LoadImm32 [Register(0xb0), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 b0 00 00 00 00 

# 01916 Copy8 [Register(0xbc), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b bc b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 01919 Mul8_16 [Register(0xb8), Register(0xb0), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 b8 b0 b0 

# 0191d LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 b2 00 

# 01920 LoadImm8 [Register(0xb3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 b3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 01923 Copy8 [Register(0xb1), Register(0xb5)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b b1 b5 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 01926 Copy8 [Register(0xb5), Register(0xb3)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b b5 b3 

# inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 01929 Copy8 [Register(0xb0), Register(0xb5)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b b0 b5 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 0192c Copy8 [Register(0xb5), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b b5 b2 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0192f LoadImm8 [Register(0xb6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b6 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 01932 Copy8 [Register(0xb6), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b6 b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 01935 Copy8 [Register(0xb6), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b6 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 01938 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 01939 AddCarry32_1 [Register(0xac), Register(0xb0), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 ac b0 ac 

# 0193d AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 0193e Copy8 [Register(0xa9), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b a9 bc 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 01941 LoadImm32 [Register(0xb0), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 b0 00 00 00 00 

# 01947 Copy8 [Register(0xbc), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b bc b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 0194a Mul8_16 [Register(0xa4), Register(0xb0), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 a4 b0 b0 

# 0194e LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 b2 00 

# 01951 LoadImm8 [Register(0xb3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 b3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 01954 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 01957 LoadImm32 [Register(0xb8), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 b8 00 00 00 00 

# 0195d Copy8 [Register(0xb4), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b4 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 01960 Mul8_16 [Register(0xb8), Register(0xa8), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 b8 a8 a4 

# 01964 LoadImm8 [Register(0xa6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 a6 00 

# 01967 LoadImm8 [Register(0xa7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 a7 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 0196a Copy32 [Register(0xb0), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 b0 a8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 0196d ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 0196e AddCarry32_1 [Register(0xa8), Register(0xa4), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 a8 a4 b0 

# 01972 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 01973 Copy8 [Register(0xb2), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b b2 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 01976 Copy8 [Register(0xb4), Register(0xb3)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b b4 b3 

# inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 01979 Copy8 [Register(0xb1), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b b1 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 0197c Copy8 [Register(0xb4), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b b4 b2 

# inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 0197f Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 01982 Copy8 [Register(0xb4), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b b4 b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 01985 Copy8 [Register(0xb6), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b6 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 01988 Copy32 [Register(0xb0), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 b0 a8 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 0198b ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 0198c AddCarry32_1 [Register(0xac), Register(0xa8), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 ac a8 a4 

# 01990 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 None
# inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n2/0x02u8))
# 01991 Copy8 [Register(0xa6), Register(0xb4)]
#       inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n2/0x02u8))
0b a6 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("div32"), at #135, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# 01994 LoadImm8 [Register(0xb6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("div32"), at #135, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
04 b6 00 

# if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("div32"), at #136, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'
# 01997 Cmp8 [Register(0xb4), Register(0xb6)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #136, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'
15 b4 b6 

# 0199a JcImm [Label24(inline_div32_div16_43_div16_if_end_9)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #136, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'
71 ae 19 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"div32\"), at #136, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_end_9'\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 0199e Copy32 [Register(0xc4), Register(0xa4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c4 a4 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 019a1 Copy32 [Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a4 a0 

# 019a4 AddImm32IgnoreCarry [Register(0xa0), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a0 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 019aa JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 34 18 00 

# :inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n3/0x03u8))
# 019ae Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("div32"), at #143, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# 019b1 LoadImm8 [Register(0xb6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("div32"), at #143, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
04 b6 00 

# if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("div32"), at #144, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'
# 019b4 Cmp8 [Register(0xb4), Register(0xb6)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #144, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'
15 b4 b6 

# 019b7 JcImm [Label24(inline_div32_div16_43_div16_if_end_12)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #144, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'
71 cb 19 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"div32\"), at #144, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_end_12'\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 019bb Copy32 [Register(0xc4), Register(0xa4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c4 a4 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 019be Copy32 [Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a4 a0 

# 019c1 AddImm32IgnoreCarry [Register(0xa0), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a0 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 019c7 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 34 18 00 

# :inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 019cb Cmp8 [Register(0xa7), Register(0x9b)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a7 9b 

# 019ce Cmp8IfZero [Register(0xa6), Register(0x9a)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a6 9a 

# 019d1 Cmp8IfZero [Register(0xa5), Register(0x99)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a5 99 

# 019d4 Cmp8IfZero [Register(0xa4), Register(0x98)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a4 98 

# 019d7 JcImm [Label24(inline_div32_div16_43_div16_if_end_15)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 eb 19 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_end_15' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 019db Copy32 [Register(0xc4), Register(0xa4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c4 a4 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 019de Copy32 [Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a4 a0 

# 019e1 AddImm32IgnoreCarry [Register(0xa0), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a0 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 019e7 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 34 18 00 

# :inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 019eb Cmp8 [Register(0xa7), Register(0x9b)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a7 9b 

# 019ee Cmp8IfZero [Register(0xa6), Register(0x9a)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a6 9a 

# 019f1 Cmp8IfZero [Register(0xa5), Register(0x99)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a5 99 

# 019f4 Cmp8IfZero [Register(0xa4), Register(0x98)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a4 98 

# 019f7 JzImm [Label24(inline_div32_div16_43_div16_if_true_0_19)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 ff 19 00 

# 019fb JmpImm [Label24(inline_div32_div16_43_div16_if_end_18)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_end_18' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 09 1a 00 

# :inline_div32_div16_43_div16_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 019ff Copy32 [Register(0xc4), Register(0xa4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c4 a4 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01a02 Copy32 [Register(0xa4), Register(0x98)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a4 98 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01a05 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 50 1a 00 

# :inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 01a09 Copy32 [Register(0xa4), Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a4 00 

# 01a0c Invert8 [Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 01a0e Invert8 [Register(0x01)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 01a10 Invert8 [Register(0x02)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 01a12 Invert8 [Register(0x03)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 01a14 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 01a1a ClearCarry []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 01a1b AddCarry32_1 [Register(0x98), Register(0x00), Register(0xa4)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 98 00 a4 

# 01a1f AddCarry32_2 []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 01a20 Cmp8 [Register(0x9f), Register(0xa7)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9f a7 

# 01a23 Cmp8IfZero [Register(0x9e), Register(0xa6)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9e a6 

# 01a26 Cmp8IfZero [Register(0x9d), Register(0xa5)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9d a5 

# 01a29 Cmp8IfZero [Register(0x9c), Register(0xa4)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9c a4 

# 01a2c JcImm [Label24(inline_div32_div16_43_div16_if_end_21)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 3a 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_end_21' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 01a30 Copy32 [Register(0xc4), Register(0xa4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c4 a4 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01a33 Copy32 [Register(0xa4), Register(0x98)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a4 98 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01a36 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 50 1a 00 

# :inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 01a3a Copy32 [Register(0xc4), Register(0xa4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c4 a4 

# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 01a3d Copy32 [Register(0xa4), Register(0xc0)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a4 c0 

# 01a40 AddImm32IgnoreCarry [Register(0xc0), Constant32(0x00000001=1)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 c0 01 00 00 00 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01a46 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
70 34 18 00 

# :inline_div32_div16_43_div16_while_end_8 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 01a4a Copy32 [Register(0xc0), Register(0xa4)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 c0 a4 

# te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 01a4d Copy32 [Register(0xa4), Register(0x98)]
#       te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 a4 98 

# :inline_div32_div16_43_function_end_div16 None
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 01a50 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 

# return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 01a56 Copy32 [Register(0x98), Register(0x00)]
#       return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 98 00 

# 01a59 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01a5f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 01a61 LoadImm32 [Register(0xb0), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 b0 00 00 00 00 

# hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
# Number(0xffffffffu32)
# 01a67 LoadImm32 [Register(0xa0), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
#       Number(0xffffffffu32)
20 a0 ff ff ff ff 

# :div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 01a6d Copy32 [Register(0xb0), Register(0xa4)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 b0 a4 

# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 01a70 Cmp8 [Register(0xa3), Register(0xa7)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 a3 a7 

# 01a73 Cmp8IfZero [Register(0xa2), Register(0xa6)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a2 a6 

# 01a76 Cmp8IfZero [Register(0xa1), Register(0xa5)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a1 a5 

# 01a79 Cmp8IfZero [Register(0xa0), Register(0xa4)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 a0 a4 

# 01a7c JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 af 1c 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 01a80 Copy32 [Register(0xb0), Register(0xa4)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 b0 a4 

# inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 01a83 Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 01a86 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 01a89 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xbc), Register(0xbc)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 bc bc 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 01a8e Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b bc a4 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 01a91 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 01a94 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 01a97 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b4 bc 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 01a9c Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b bc a5 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 01a9f Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 01aa2 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 01aa5 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xbd), Register(0xbc)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 bd bc 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 01aaa Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b bc a6 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 01aad Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 01ab0 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 01ab3 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b4 bc 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 01ab8 Copy8 [Register(0xbc), Register(0xa7)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b bc a7 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 01abb Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 01abe AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 01ac1 Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b bc a4 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 01ac4 Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 01ac7 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 01aca Copy8 [Register(0xb4), Register(0xbd)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b4 bd 

# 01acd AndImm8 [Register(0xbd), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 bd 80 

# inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 01ad0 Or8 [Register(0xbc), Register(0xbd), Register(0xbc)]
#       inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c bc bd bc 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 01ad4 Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b bc a4 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 01ad7 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 01ada Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b4 bc 

# 01add AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 01ae0 Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b bc a5 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 01ae3 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 01ae6 Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 01ae9 Copy8 [Register(0xbd), Register(0xbc)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b bd bc 

# 01aec AndImm8 [Register(0xbc), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 bc 80 

# inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 01aef Or8 [Register(0xb4), Register(0xbc), Register(0xbc)]
#       inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b4 bc bc 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 01af3 Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b bc a5 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 01af6 Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 01af9 Copy8 [Register(0xbd), Register(0xbc)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b bd bc 

# 01afc AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 01aff Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b bc a6 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 01b02 Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 01b05 Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 01b08 Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b4 bc 

# 01b0b AndImm8 [Register(0xbc), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 bc 80 

# inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 01b0e Or8 [Register(0xbd), Register(0xbc), Register(0xbc)]
#       inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c bd bc bc 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 01b12 Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b bc a6 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 01b15 Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 01b18 Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b4 bc 

# 01b1b AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 01b1e Copy8 [Register(0xbc), Register(0xa7)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b bc a7 

# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 01b21 Copy32 [Register(0xa4), Register(0xcc)]
#       t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a4 cc 

# :inline_div32_shiftright1_44_function_end_shiftright1 None
# inline_div32_shiftright1_44_function_end_shiftright1
# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 01b24 Copy32 [Register(0xa0), Register(0xa4)]
#       inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 a0 a4 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 01b27 Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 01b2a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 01b2d Shift8 [Constant8(0x04=4), Register(0x00), Register(0xbc), Register(0xbc)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 bc bc 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 01b32 Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b bc a4 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 01b35 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 01b38 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 01b3b Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b4 bc 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 01b40 Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b bc a5 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 01b43 Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 01b46 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 01b49 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xbd), Register(0xbc)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 bd bc 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 01b4e Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b bc a6 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 01b51 Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 01b54 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 01b57 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b4 bc 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 01b5c Copy8 [Register(0xbc), Register(0xa7)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b bc a7 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 01b5f Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 01b62 AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 01b65 Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b bc a4 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 01b68 Copy8 [Register(0xa4), Register(0xbc)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a4 bc 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 01b6b Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 01b6e Copy8 [Register(0xb4), Register(0xbd)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b4 bd 

# 01b71 AndImm8 [Register(0xbd), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 bd 80 

# inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 01b74 Or8 [Register(0xbc), Register(0xbd), Register(0xbc)]
#       inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c bc bd bc 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 01b78 Copy8 [Register(0xbc), Register(0xa4)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b bc a4 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 01b7b Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 01b7e Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b4 bc 

# 01b81 AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 01b84 Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b bc a5 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 01b87 Copy8 [Register(0xa5), Register(0xb4)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a5 b4 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 01b8a Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 01b8d Copy8 [Register(0xbd), Register(0xbc)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b bd bc 

# 01b90 AndImm8 [Register(0xbc), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 bc 80 

# inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 01b93 Or8 [Register(0xb4), Register(0xbc), Register(0xbc)]
#       inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b4 bc bc 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 01b97 Copy8 [Register(0xbc), Register(0xa5)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b bc a5 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 01b9a Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 01b9d Copy8 [Register(0xbd), Register(0xbc)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b bd bc 

# 01ba0 AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 01ba3 Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b bc a6 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 01ba6 Copy8 [Register(0xa6), Register(0xbd)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a6 bd 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 01ba9 Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 01bac Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b4 bc 

# 01baf AndImm8 [Register(0xbc), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 bc 80 

# inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 01bb2 Or8 [Register(0xbd), Register(0xbc), Register(0xbc)]
#       inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c bd bc bc 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 01bb6 Copy8 [Register(0xbc), Register(0xa6)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b bc a6 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 01bb9 Copy8 [Register(0xa7), Register(0xb4)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a7 b4 

# inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 01bbc Copy8 [Register(0xb4), Register(0xbc)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b4 bc 

# 01bbf AndImm8 [Register(0xbc), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 bc 7f 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 01bc2 Copy8 [Register(0xbc), Register(0xa7)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b bc a7 

# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# :inline_div32_shiftright1_45_function_end_shiftright1 None
# inline_div32_shiftright1_45_function_end_shiftright1
# mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 01bc5 ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 

# 01bc6 AddCarry32_1 [Register(0xcc), Register(0xa4), Register(0xa8)]
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 cc a4 a8 

# 01bca AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 

# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 01bcb Copy32 [Register(0x0c), Register(0xd0)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c d0 

# tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# 01bce Copy32 [Register(0xd0), Register(0xa4)]
#       tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
21 d0 a4 

# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 01bd1 Copy32 [Register(0xa8), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a8 00 

# 01bd4 Copy32 [Register(0x9c), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 9c 04 

# 01bd7 Copy32 [Register(0xa4), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a4 08 

# Registers used by this function: {152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}
# Registers to save: []
# 01bda AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 01be0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c ea 1b 00 00 

# 01be6 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 c7 21 00 

# 01bea AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 01bf0 Copy32 [Register(0x0c), Register(0xd0)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c d0 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 01bf3 Copy32 [Register(0xd0), Register(0xa4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 d0 a4 

# 01bf6 AddImm32IgnoreCarry [Register(0xa4), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 a4 04 00 00 00 

# tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# 01bfc Load32 [Register(0xa4), Register(0xac)]
#       tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
22 a4 ac 

# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("div32"), at #291, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# 01bff LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("div32"), at #291, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
20 a4 00 00 00 00 

# if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# # In IlFunctionId("div32"), at #292, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
# 01c05 Cmp8 [Register(0xaf), Register(0xa7)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #292, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
15 af a7 

# 01c08 Cmp8IfZero [Register(0xae), Register(0xa6)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #292, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
16 ae a6 

# 01c0b Cmp8IfZero [Register(0xad), Register(0xa5)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #292, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
16 ad a5 

# 01c0e Cmp8IfZero [Register(0xac), Register(0xa4)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #292, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
16 ac a4 

# 01c11 JcImm [Label24(div32_if_end_9)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #292, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'
71 22 1c 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }\n# In IlFunctionId(\"div32\"), at #292, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_end_9' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_end_9'\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 01c15 Copy32 [Register(0xa8), Register(0xa0)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a8 a0 

# 01c18 AddImm32IgnoreCarry [Register(0xa0), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a0 ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 01c1e JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 6d 1a 00 

# :div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 01c22 Copy32 [Register(0x0c), Register(0xd0)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c d0 

# x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 01c25 Load32 [Register(0xd0), Register(0xa4)]
#       x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 d0 a4 

# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 01c28 Cmp8 [Register(0xa7), Register(0x9b)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a7 9b 

# 01c2b Cmp8IfZero [Register(0xa6), Register(0x9a)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a6 9a 

# 01c2e Cmp8IfZero [Register(0xa5), Register(0x99)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a5 99 

# 01c31 Cmp8IfZero [Register(0xa4), Register(0x98)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a4 98 

# 01c34 JcImm [Label24(div32_if_end_12)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 45 1c 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_end_12' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 01c38 Copy32 [Register(0xa8), Register(0xa0)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a8 a0 

# 01c3b AddImm32IgnoreCarry [Register(0xa0), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 a0 ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 01c41 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 6d 1a 00 

# :div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 01c45 Cmp8 [Register(0xa7), Register(0x9b)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a7 9b 

# 01c48 Cmp8IfZero [Register(0xa6), Register(0x9a)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a6 9a 

# 01c4b Cmp8IfZero [Register(0xa5), Register(0x99)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a5 99 

# 01c4e Cmp8IfZero [Register(0xa4), Register(0x98)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a4 98 

# 01c51 JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 59 1c 00 

# 01c55 JmpImm [Label24(div32_if_end_15)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_end_15' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 6a 1c 00 

# :div32_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01c59 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01c5f Copy32 [Register(0xa8), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a8 00 

# 01c62 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01c68 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 01c6a Copy32 [Register(0xa4), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a4 00 

# 01c6d Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 01c6f Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 01c71 Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 01c73 Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 01c75 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 01c7b ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 01c7c AddCarry32_1 [Register(0x98), Register(0x00), Register(0xa4)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 98 00 a4 

# 01c80 AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 01c81 Cmp8 [Register(0x9f), Register(0xa7)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9f a7 

# 01c84 Cmp8IfZero [Register(0x9e), Register(0xa6)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9e a6 

# 01c87 Cmp8IfZero [Register(0x9d), Register(0xa5)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9d a5 

# 01c8a Cmp8IfZero [Register(0x9c), Register(0xa4)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9c a4 

# 01c8d JcImm [Label24(div32_if_end_18)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 a2 1c 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_end_18' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01c91 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01c97 Copy32 [Register(0xa8), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a8 00 

# 01c9a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01ca0 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 01ca2 Copy32 [Register(0xa8), Register(0xb0)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a8 b0 

# 01ca5 AddImm32IgnoreCarry [Register(0xb0), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 b0 01 00 00 00 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01cab JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
70 6d 1a 00 

# :div32_while_end_8 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 01caf Copy32 [Register(0xb0), Register(0xa4)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 b0 a4 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 01cb2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 

# return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 01cb8 Copy32 [Register(0xa4), Register(0x00)]
#       return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 a4 00 

# 01cbb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01cc1 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_div32 None
# function_end_div32
# Unreachable None
# 01cc3 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([214])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([216])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([216])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) Reg(U32) Some([220, 221, 222, 223])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }) Reg(U32) Some([220, 221, 222, 223])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }) Reg(U32) Some([224, 225, 226, 227])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([216])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 (tf14 Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) Reg(U8) Some([228])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([215])
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([215])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([215])
# Var t1730 (t1730 Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))) Reg(U8) Some([216])
# Var t2176 (t2176 Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))) Reg(U8) Some([216])
# Var t3e8f (t3e8f Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))) Reg(U8) Some([215])
# Var t4028 (t4028 Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))) Reg(U8) Some([215])
# Var t6611 (t6611 Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))) Reg(U8) Some([214])
# Var t791e (t791e Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))) Reg(U8) Some([215])
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([220, 221, 222, 223]) Number(0n2/0x00000002u32)
# Var tb5dc (tb5dc Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))) Reg(U8) Some([214])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([214])
# 01cc8 Copy8 [Register(0x00), Register(0xd7)]
#       Save function parameter 'i' registers [0] to locals [215].
0b 00 d7 

# 01ccb Copy8 [Register(0x04), Register(0xd6)]
#       Save function parameter 'ch' registers [4] to locals [214].
0b 04 d6 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))\nAssign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xd7), Register(0xd7)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# 01cce LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 01cd1 Divide8 [Register(0xd7), Register(0x00), Register(0xd8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
17 d7 00 d8 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xd7), Register(0xd7)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nArithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# 01cd5 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
04 00 14 

# 01cd8 Mul8_8 [Register(0xd8), Register(0x00), Register(0xe4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
10 d8 00 e4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# 01cdc Copy8 [Register(0xe4), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
0b e4 00 

# 01cdf Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
02 00 

# 01ce1 Add8NoCarryIn [Register(0xd7), Register(0x00), Register(0xd7)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
14 d7 00 d7 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 01ce5 LoadImm32 [Register(0xe0), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 e0 23 04 00 00 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd8), Register(0xd8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# 01ceb LoadImm32 [Register(0xdc), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
20 dc 00 00 00 00 

# 01cf1 Copy8 [Register(0xd8), Register(0xdc)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
0b d8 dc 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# 01cf4 ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
03 

# 01cf5 AddCarry32_1 [Register(0xe0), Register(0xdc), Register(0xdc)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
30 e0 dc dc 

# 01cf9 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 01cfa Load8 [Register(0xdc), Register(0xd8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 dc d8 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xd7), Register(0xd7)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 01cfd Add8NoCarryIn [Register(0xd8), Register(0xd7), Register(0xd7)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 d8 d7 d7 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xd7), Register(0xd7)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xd7), Register(0xd7)], resolved: None }
# t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# 01d01 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
04 00 04 

# 01d04 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xd7), Register(0xd8)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
1e 05 00 d7 d8 

# t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# 01d09 OrImm8 [Register(0xd8), Constant8(0x08=8)]
#       t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
19 d8 08 

# None <= call io_write1(t2176,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# 01d0c Out1 [Register(0xd8)]
#       IoWrite1
69 d8 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] })\nArithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xd7), Register(0xd7)], resolved: None }
# t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# 01d0e AndImm8 [Register(0xd7), Constant8(0x0f=15)]
#       t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
#       Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
18 d7 0f 

# None <= call io_write1(t791e,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# 01d11 Out1 [Register(0xd7)]
#       IoWrite1
69 d7 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 01d13 LoadImm32 [Register(0xdc), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 dc 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01d19 Copy32 [Register(0xdc), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 dc 00 

# Registers used by this function: {214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01d1c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01d22 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 2c 1d 00 00 

# 01d28 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01d2c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xd6), Register(0xd6)], resolved: None }
# t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# 01d32 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
04 00 04 

# 01d35 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xd6), Register(0xd7)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
1e 05 00 d6 d7 

# t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# 01d3a OrImm8 [Register(0xd7), Constant8(0x80=128)]
#       t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
19 d7 80 

# None <= call io_write1(t3e8f,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# 01d3d Out1 [Register(0xd7)]
#       IoWrite1
69 d7 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))\nArithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xd6), Register(0xd6)], resolved: None }
# t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# 01d3f AndImm8 [Register(0xd6), Constant8(0x0f=15)]
#       t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
#       Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
18 d6 0f 

# tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# 01d42 OrImm8 [Register(0xd6), Constant8(0x80=128)]
#       tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
19 d6 80 

# None <= call io_write1(tb5dc,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# 01d45 Out1 [Register(0xd6)]
#       IoWrite1
69 d6 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01d47 Copy32 [Register(0xdc), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 dc 00 

# Registers used by this function: {214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01d4a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01d50 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 5a 1d 00 00 

# 01d56 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01d5a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 01d60 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 01d62 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([229])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([232, 233, 234, 235]) Number(0n987145/0x000f1009u32)
# Var t385d (t385d Number(0n1/0x00000001u32)) Reg(U32) Some([232, 233, 234, 235]) Number(0n1/0x00000001u32)
# Var t3d69 (t3d69 Number(0n3/0x03u8)) Reg(U8) Some([236]) Number(0n3/0x03u8)
# Var t477 (t477 Number(0n8/0x08u8)) Reg(U8) Some([229]) Number(0n8/0x08u8)
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([240, 241, 242, 243]) Number(0n2/0x00000002u32)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([240, 241, 242, 243])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([240, 241, 242, 243])
# Var t9f48 (t9f48 Number(0n2/0x02u8)) Reg(U8) Some([229]) Number(0n2/0x02u8)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([229]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([244]) Number(0n0/0x00u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([229])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([236]) Number(0n80/0x50u8)
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([244]) Number(0n32/0x20u8)
# Var tec13 (tec13 Number(0n12/0x0cu8)) Reg(U8) Some([229]) Number(0n12/0x0cu8)
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 01d67 LoadImm32 [Register(0xe8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
20 e8 09 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01d6d LoadImm8 [Register(0xf4), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 f4 00 

# mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 01d70 Store8 [Register(0xf4), Register(0xe8)]
#       mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
06 f4 e8 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01d73 LoadImm8 [Register(0xe5), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 e5 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe5), Register(0xe5)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 01d76 LoadImm8 [Register(0xec), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 ec 50 

# if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 01d79 Cmp8 [Register(0xec), Register(0xe5)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 ec e5 

# 01d7c JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 a0 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe5), Register(0xe5)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 01d80 LoadImm32 [Register(0xf0), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 f0 00 00 00 00 

# 01d86 Copy8 [Register(0xe5), Register(0xf0)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b e5 f0 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 01d89 AddImm32IgnoreCarry [Register(0xf0), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 f0 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 01d8f LoadImm8 [Register(0xf4), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 f4 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 01d92 Store8 [Register(0xf4), Register(0xf0)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 f4 f0 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe5), Register(0xe5)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 01d95 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 01d98 Add8NoCarryIn [Register(0xe5), Register(0x00), Register(0xe5)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 e5 00 e5 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 01d9c JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
70 76 1d 00 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# lcd_init_while_end_2
# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 01da0 LoadImm8 [Register(0xec), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 ec 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 01da3 Out1 [Register(0xec)]
#       IoWrite1
69 ec 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 01da5 LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 01dab Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01dae AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01db4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c be 1d 00 00 

# 01dba JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01dbe AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 01dc4 Out1 [Register(0xec)]
#       IoWrite1
69 ec 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 01dc6 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01dc9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01dcf StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c d9 1d 00 00 

# 01dd5 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01dd9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 01ddf Out1 [Register(0xec)]
#       IoWrite1
69 ec 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 01de1 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 e8 00 

# Registers used by this function: {229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01de4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01dea StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c f4 1d 00 00 

# 01df0 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01df4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 01dfa LoadImm8 [Register(0xe5), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 e5 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 01dfd Out1 [Register(0xe5)]
#       IoWrite1
69 e5 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 01dff LoadImm32 [Register(0xf0), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 f0 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01e05 Copy32 [Register(0xf0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 f0 00 

# Registers used by this function: {229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01e08 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e0e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 18 1e 00 00 

# 01e14 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01e18 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 01e1e Out1 [Register(0xe5)]
#       IoWrite1
69 e5 

# t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# Number(0n8/0x08u8)
# 01e20 LoadImm8 [Register(0xe5), Constant8(0x08=8)]
#       t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
#       Number(0n8/0x08u8)
04 e5 08 

# None <= call io_write1(t477,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# 01e23 Out1 [Register(0xe5)]
#       IoWrite1
69 e5 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01e25 Copy32 [Register(0xf0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 f0 00 

# Registers used by this function: {229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01e28 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e2e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 38 1e 00 00 

# 01e34 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01e38 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 01e3e LoadImm8 [Register(0xf4), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 f4 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 01e41 Out1 [Register(0xf4)]
#       IoWrite1
69 f4 

# tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# Number(0n12/0x0cu8)
# 01e43 LoadImm8 [Register(0xe5), Constant8(0x0c=12)]
#       tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
#       Number(0n12/0x0cu8)
04 e5 0c 

# None <= call io_write1(tec13,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# 01e46 Out1 [Register(0xe5)]
#       IoWrite1
69 e5 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01e48 Copy32 [Register(0xf0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 f0 00 

# Registers used by this function: {229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01e4b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e51 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 5b 1e 00 00 

# 01e57 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01e5b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 01e61 Out1 [Register(0xf4)]
#       IoWrite1
69 f4 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# Number(0n1/0x01u8)
# 01e63 LoadImm8 [Register(0xe5), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
#       Number(0n1/0x01u8)
04 e5 01 

# None <= call io_write1(ta11a,) Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# 01e66 Out1 [Register(0xe5)]
#       IoWrite1
69 e5 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 01e68 Copy32 [Register(0xf0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 f0 00 

# Registers used by this function: {229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151}
# Registers to save: []
# 01e6b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e71 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 7b 1e 00 00 

# 01e77 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 65 17 00 

# 01e7b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 01e81 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 01e83 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([245])
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([245])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t164d (t164d Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }) Reg(U32) Some([252, 253, 254, 255])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([16]) Number(0n10/0x0au8)
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([17])
# Var t78f0 (t78f0 Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([245])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([245])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) Reg(U32) Some([252, 253, 254, 255])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([245]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([245])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([18]) Number(0n32/0x20u8)
# Var tefac (tefac Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))) Reg(U8) Some([17])
# Var tf5a3 (tf5a3 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))) Reg(U8) Some([245])
# 01e88 Copy8 [Register(0x00), Register(0xf5)]
#       Save function parameter 'ch' registers [0] to locals [245].
0b 00 f5 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf5), Register(0xf5)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 01e8b LoadImm8 [Register(0x10), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 10 0a 

# if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 01e8e Cmp8 [Register(0xf5), Register(0x10)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 f5 10 

# 01e91 JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 99 1e 00 

# 01e95 JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 fa 1e 00 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 01e99 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 01e9f Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 f8 11 

# t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# 01ea2 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 14 

# 01ea5 Divide8 [Register(0x11), Register(0x00), Register(0xf5)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
17 11 00 f5 

# tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# 01ea9 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
04 00 01 

# 01eac Add8NoCarryIn [Register(0xf5), Register(0x00), Register(0xf5)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
14 f5 00 f5 

# next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# 01eb0 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
04 00 14 

# 01eb3 Mul8_8 [Register(0xf5), Register(0x00), Register(0xf5)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
10 f5 00 f5 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_predicate_3
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 01eb7 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 f8 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 01ebd Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0xf5), Register(0xf5)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 01ec0 Cmp8 [Register(0xf5), Register(0x11)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 f5 11 

# 01ec3 JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 f6 1e 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_body_4
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 01ec7 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 f8 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# 01ecd Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 01ed0 LoadImm32 [Register(0xfc), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 fc 00 00 00 00 

# 01ed6 Copy8 [Register(0x11), Register(0xfc)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 11 fc 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 01ed9 AddImm32IgnoreCarry [Register(0xfc), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 fc 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 01edf LoadImm8 [Register(0x12), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 12 20 

# mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# 01ee2 Store8 [Register(0x12), Register(0xfc)]
#       mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
06 12 fc 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# 01ee5 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 01ee8 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 01eeb Add8NoCarryIn [Register(0x11), Register(0x00), Register(0x11)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 11 00 11 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# 01eef Store8 [Register(0x11), Register(0xf8)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
06 11 f8 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 01ef2 JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 b7 1e 00 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 01ef6 JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 41 1f 00 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_else_0_2
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 01efa LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 f8 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# 01f00 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 01f03 LoadImm32 [Register(0xfc), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 fc 00 00 00 00 

# 01f09 Copy8 [Register(0x11), Register(0xfc)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 11 fc 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 01f0c AddImm32IgnoreCarry [Register(0xfc), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 fc 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf5), Register(0xf5)], resolved: None }
# mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 01f12 Store8 [Register(0xf5), Register(0xfc)]
#       mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 f5 fc 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# 01f15 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf5), Register(0xf5)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 01f18 Copy8 [Register(0x11), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 11 00 

# 01f1b Copy8 [Register(0xf5), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b f5 04 

# Registers used by this function: {16, 17, 18, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228}
# Registers to save: []
# 01f1e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 01f24 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 2e 1f 00 00 

# 01f2a JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 c8 1c 00 

# 01f2e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# 01f34 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 01f37 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 01f3a Add8NoCarryIn [Register(0x11), Register(0x00), Register(0x11)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 11 00 11 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# 01f3e Store8 [Register(0x11), Register(0xf8)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
06 11 f8 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_end_0
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 01f41 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 f8 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# 01f47 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 01f4a LoadImm8 [Register(0xf5), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f5 50 

# if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# 01f4d Cmp8 [Register(0xf5), Register(0x11)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
15 f5 11 

# 01f50 JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
71 58 1f 00 

# 01f54 JmpImm [Label24(lcd_putc_if_end_6)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_end_6' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
70 6e 1f 00 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(63,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {16, 17, 18, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228}
# Registers to save: []
# 01f58 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 01f5e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c 68 1f 00 00 

# 01f64 JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 75 1f 00 

# 01f68 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 01f6e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 01f70 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([19])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([20])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([24, 25, 26, 27]) Number(0n987145/0x000f1009u32)
# Var t54b2 (t54b2 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }) Reg(U32) Some([24, 25, 26, 27])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([20])
# Var t760c (t760c Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) Reg(U32) Some([24, 25, 26, 27])
# Var t81b5 (t81b5 Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([20])
# Var t9586 (t9586 Number(0n60/0x3cu8)) Reg(U8) Some([19]) Number(0n60/0x3cu8)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([28, 29, 30, 31])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([28, 29, 30, 31])
# Var ta094 (ta094 Index("lcd_display", Ident("i"))) Reg(U8) Some([32])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([20])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([19]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([19])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([19]) Number(0n32/0x20u8)
# Var tfd89 (tfd89 Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) Reg(U8) Some([19])
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 01f75 LoadImm32 [Register(0x18), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
20 18 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 01f7b Load8 [Register(0x18), Register(0x14)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 18 14 

# t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# 01f7e LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 ec 

# 01f81 Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
14 14 00 14 

# mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 01f85 Store8 [Register(0x14), Register(0x18)]
#       mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
06 14 18 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 01f88 LoadImm8 [Register(0x14), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 14 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Number(0n60/0x3cu8)
# 01f8b LoadImm8 [Register(0x13), Constant8(0x3c=60)]
#       t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
#       Number(0n60/0x3cu8)
04 13 3c 

# if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# 01f8e Cmp8 [Register(0x13), Register(0x14)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
15 13 14 

# 01f91 JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
71 00 20 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# 01f95 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 01f98 Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x13)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
14 14 00 13 

# t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# 01f9c LoadImm32 [Register(0x18), Constant32(0x00000000=0)]
#       Zero-pad for t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
20 18 00 00 00 00 

# 01fa2 Copy8 [Register(0x13), Register(0x18)]
#       t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
0b 13 18 

# t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# 01fa5 AddImm32IgnoreCarry [Register(0x18), Constant32(0x000f100c=987148)]
#       t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
32 18 0c 10 0f 00 

# ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# 01fab Load8 [Register(0x18), Register(0x13)]
#       ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
05 18 13 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 01fae LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 1c 00 00 00 00 

# 01fb4 Copy8 [Register(0x14), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 14 1c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 01fb7 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 1c 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# 01fbd Load8 [Register(0x1c), Register(0x20)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
05 1c 20 

# if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# 01fc0 Cmp8 [Register(0x13), Register(0x20)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
15 13 20 

# 01fc3 JzImm [Label24(lcd_scroll_up_if_end_3)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
72 f5 1f 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_end_3' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_4)], resolved: None }
# :lcd_scroll_up_if_true_0_4 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 01fc7 LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 1c 00 00 00 00 

# 01fcd Copy8 [Register(0x14), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 14 1c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 01fd0 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 1c 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 01fd6 Store8 [Register(0x13), Register(0x1c)]
#       mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 13 1c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 01fd9 Copy8 [Register(0x14), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 14 00 

# 01fdc Copy8 [Register(0x13), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 13 04 

# Registers used by this function: {19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228}
# Registers to save: []
# 01fdf AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 01fe5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c ef 1f 00 00 

# 01feb JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 c8 1c 00 

# 01fef AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# :lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_end_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 01ff5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 01ff8 Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 14 00 14 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 01ffc JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 8b 1f 00 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 02000 LoadImm8 [Register(0x13), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 13 50 

# if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 02003 Cmp8 [Register(0x13), Register(0x14)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 13 14 

# 02006 JcImm [Label24(lcd_scroll_up_while_end_8)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 62 20 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_7)], resolved: None }
# :lcd_scroll_up_while_body_7 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_7
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 0200a LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 1c 00 00 00 00 

# 02010 Copy8 [Register(0x14), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 14 1c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 02013 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 1c 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# 02019 Load8 [Register(0x1c), Register(0x20)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
05 1c 20 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 0201c LoadImm8 [Register(0x13), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 13 20 

# if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# 0201f Cmp8 [Register(0x20), Register(0x13)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
15 20 13 

# 02022 JzImm [Label24(lcd_scroll_up_if_end_9)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
72 57 20 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_end_9' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_10)], resolved: None }
# :lcd_scroll_up_if_true_0_10 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_10
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 02026 LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 1c 00 00 00 00 

# 0202c Copy8 [Register(0x14), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 14 1c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 0202f AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 1c 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 02035 LoadImm8 [Register(0x13), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 13 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 02038 Store8 [Register(0x13), Register(0x1c)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 13 1c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# 0203b Copy8 [Register(0x14), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 14 00 

# 0203e Copy8 [Register(0x13), Register(0x04)]
#       Arg1[ch]=tdf3b None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 13 04 

# Registers used by this function: {19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228}
# Registers to save: []
# 02041 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 02047 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 51 20 00 00 

# 0204d JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 c8 1c 00 

# 02051 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# :lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_end_9
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 02057 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 0205a Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 14 00 14 

# goto lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 0205e JmpImm [Label24(lcd_scroll_up_while_end_2)]
#       goto lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 00 20 00 

# :lcd_scroll_up_while_end_8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_while_end_8
# return None None
# Return { value: None }
# 02062 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 02064 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([36, 37, 38, 39]) Number(0n0/0x00000000u32)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([40, 41, 42, 43]) Number(0n987728/0x000f1250u32)
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([40, 41, 42, 43]) Number(0n987732/0x000f1254u32)
# Var inline_main_putc_25_t0 (static "lcd_enable" addr) Reg(U32) Some([36, 37, 38, 39]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_25_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_25_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([45]) Number(0n0/0x00u8)
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) Number(0n82/0x52u8)
# Var inline_main_putc_26_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) Number(0n80/0x50u8)
# Var inline_main_putc_27_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) Number(0n78/0x4eu8)
# Var inline_main_putc_28_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) Number(0n10/0x0au8)
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([44])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([48, 49, 50, 51]) Number(0n987664/0x000f1210u32)
# None <= call stdio_init() Some('programs/app/rpn.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51}
# Registers used by callee tree: {16, 20, 21, 22, 23, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 213, 229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers to save: []
# 02069 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 0206f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c 79 20 00 00 

# 02075 JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 af 28 00 

# 02079 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 0207f LoadImm8 [Register(0x2c), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 2c 52 

# None <= call io_write0(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02082 Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 02084 LoadImm32 [Register(0x24), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 24 5c 10 0f 00 

# inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0208a Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 24 2c 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 0208d LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 2d 00 

# if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 02090 Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 2c 2d 

# 02093 JzImm [Label24(inline_main_putc_25_putc_if_end_0)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 b3 20 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_25_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_25_putc_if_true_0_1
# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 02097 LoadImm8 [Register(0x2c), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 2c 52 

# None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0209a Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 0209d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 020a3 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ad 20 00 00 

# 020a9 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 020ad AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_end_0
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 020b3 LoadImm8 [Register(0x2c), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 2c 50 

# None <= call io_write0(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 020b6 Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #13, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 020b8 LoadImm32 [Register(0x24), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #13, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 24 5c 10 0f 00 

# inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #14, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
# 020be Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #14, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
05 24 2c 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #15, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 020c1 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #15, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 2d 00 

# if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'
# 020c4 Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'
15 2c 2d 

# 020c7 JzImm [Label24(inline_main_putc_26_putc_if_end_0)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'
72 e7 20 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #16, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_26_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_26_putc_if_true_0_1
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 020cb LoadImm8 [Register(0x2c), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 2c 50 

# None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 020ce Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 020d1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 020d7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c e1 20 00 00 

# 020dd JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 020e1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_end_0
# tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(0n987664/0x000f1210u32)
# 020e7 LoadImm32 [Register(0x30), Constant32(0x000f1210=987664)]
#       tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(0n987664/0x000f1210u32)
20 30 10 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# 020ed LoadImm32 [Register(0x28), Constant32(0x000f1250=987728)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
20 28 50 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 020f3 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 24 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 020f9 Store32_1 [Register(0x24), Register(0x28)]
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 24 28 

# 020fc Store32_2 []
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# 020fd LoadImm32 [Register(0x28), Constant32(0x000f1254=987732)]
#       inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
20 28 54 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("main"), at #27, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  -> inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 02103 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("main"), at #27, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  -> inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 24 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("main"), at #28, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
# 02109 Store32_1 [Register(0x24), Register(0x28)]
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("main"), at #28, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
23 24 28 

# 0210c Store32_2 []
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("main"), at #28, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# :inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 0210d LoadImm8 [Register(0x2c), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 2c 4e 

# None <= call io_write0(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02110 Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #32, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 02112 LoadImm32 [Register(0x24), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #32, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 24 5c 10 0f 00 

# inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #33, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
# 02118 Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #33, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
05 24 2c 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #34, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 0211b LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #34, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 2d 00 

# if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #35, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'
# 0211e Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #35, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'
15 2c 2d 

# 02121 JzImm [Label24(inline_main_putc_27_putc_if_end_0)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #35, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'
72 41 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #35, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_27_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_27_putc_if_true_0_1
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 02125 LoadImm8 [Register(0x2c), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 2c 4e 

# None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02128 Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 0212b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02131 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 3b 21 00 00 

# 02137 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 0213b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_end_0
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 02141 LoadImm8 [Register(0x2c), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 2c 0a 

# None <= call io_write0(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02144 Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #42, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 02146 LoadImm32 [Register(0x24), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #42, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 24 5c 10 0f 00 

# inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #43, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
# 0214c Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #43, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
05 24 2c 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #44, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 0214f LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #44, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 2d 00 

# if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #45, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'
# 02152 Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #45, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'
15 2c 2d 

# 02155 JzImm [Label24(inline_main_putc_28_putc_if_end_0)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #45, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'
72 75 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #45, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_end_0'\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_28_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_28_putc_if_true_0_1
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 02159 LoadImm8 [Register(0x2c), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 2c 0a 

# None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0215c Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 0215f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02165 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 6f 21 00 00 

# 0216b JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 0216f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_end_0
# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 02175 Copy32 [Register(0x30), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 30 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [36, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51]
# 02178 Push8 [Register(0x33)]
#       Saving reg0x33 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 33 

# 0217a Push8 [Register(0x32)]
#       Saving reg0x32 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 32 

# 0217c Push8 [Register(0x31)]
#       Saving reg0x31 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 31 

# 0217e Push8 [Register(0x30)]
#       Saving reg0x30 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 30 

# 02180 Push8 [Register(0x2d)]
#       Saving reg0x2d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2d 

# 02182 Push8 [Register(0x2c)]
#       Saving reg0x2c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2c 

# 02184 Push8 [Register(0x2b)]
#       Saving reg0x2b before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2b 

# 02186 Push8 [Register(0x2a)]
#       Saving reg0x2a before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2a 

# 02188 Push8 [Register(0x29)]
#       Saving reg0x29 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 29 

# 0218a Push8 [Register(0x28)]
#       Saving reg0x28 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 28 

# 0218c Push8 [Register(0x24)]
#       Saving reg0x24 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 24 

# 0218e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 

# 02194 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c 9e 21 00 00 

# 0219a JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 ee 15 00 

# 0219e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 

# 021a4 Pop8 [Register(0x24)]
#       Restoring reg0x24 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 24 

# 021a6 Pop8 [Register(0x28)]
#       Restoring reg0x28 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 28 

# 021a8 Pop8 [Register(0x29)]
#       Restoring reg0x29 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 29 

# 021aa Pop8 [Register(0x2a)]
#       Restoring reg0x2a after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2a 

# 021ac Pop8 [Register(0x2b)]
#       Restoring reg0x2b after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2b 

# 021ae Pop8 [Register(0x2c)]
#       Restoring reg0x2c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2c 

# 021b0 Pop8 [Register(0x2d)]
#       Restoring reg0x2d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2d 

# 021b2 Pop8 [Register(0x30)]
#       Restoring reg0x30 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 30 

# 021b4 Pop8 [Register(0x31)]
#       Restoring reg0x31 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 31 

# 021b6 Pop8 [Register(0x32)]
#       Restoring reg0x32 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 32 

# 021b8 Pop8 [Register(0x33)]
#       Restoring reg0x33 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 33 

# 021ba Copy8 [Register(0x00), Register(0x2c)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 2c 

# return Some(t2a99) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# 021bd Copy8 [Register(0x2c), Register(0x00)]
#       return Some(t2a99) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
0b 2c 00 

# 021c0 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_main None
# function_end_main
# Unreachable None
# 021c2 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_10_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([94]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_10_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([95])
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_11_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([97])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_mul16_32_11_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_8_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_8_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_8_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_9_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_9_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([98])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_9_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([104, 105, 106, 107])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([56, 57, 58, 59])
# Var t3970 (t3970 Index("temp", Number(0n2/0x02u8))) Reg(U8) Some([92])
# Var t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var t3b80 (t3b80 Index("temp", Number(0n3/0x03u8))) Reg(U8) Some([92])
# Var t3d83 (t3d83 Index("temp", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))) Reg(U32) Some([56, 57, 58, 59])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([72, 73, 74, 75])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([72, 73, 74, 75])
# Var t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([95])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([52, 53, 54, 55])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([56, 57, 58, 59])
# Var t9186 (t9186 Index("temp", Number(0n0/0x00u8))) Reg(U8) Some([92])
# Var t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([96])
# Var ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([95])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([108, 109, 110, 111])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([108, 109, 110, 111])
# Var temp (Local temp Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var temp_hi (Local temp_hi Number(U32) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var temp_lo (Local temp_lo Number(U32) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([60, 61, 62, 63])
# 021c7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 021cd Copy32 [Register(0x00), Register(0x34)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [52, 53, 54, 55].
21 00 34 

# 021d0 Copy32 [Register(0x04), Register(0x3c)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [60, 61, 62, 63].
21 04 3c 

# 021d3 Copy32 [Register(0x08), Register(0x44)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [68, 69, 70, 71].
21 08 44 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 021d6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 021dc LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 38 00 00 00 00 

# t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 021e2 Copy8 [Register(0x37), Register(0x60)]
#       t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 37 60 

# a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 021e5 Copy8 [Register(0x60), Register(0x39)]
#       a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 60 39 

# t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 021e8 Copy8 [Register(0x36), Register(0x60)]
#       t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 36 60 

# a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 021eb Copy8 [Register(0x60), Register(0x38)]
#       a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 60 38 

# b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 021ee LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 40 00 00 00 00 

# ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 021f4 Copy8 [Register(0x3f), Register(0x5f)]
#       ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 3f 5f 

# b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 021f7 Copy8 [Register(0x5f), Register(0x41)]
#       b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 5f 41 

# t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 021fa Copy8 [Register(0x3e), Register(0x5f)]
#       t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 3e 5f 

# b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 021fd Copy8 [Register(0x5f), Register(0x40)]
#       b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 5f 40 

# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 02200 Copy32 [Register(0x34), Register(0x48)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 34 48 

# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 02203 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 3c 4c 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 02206 Mul8_16 [Register(0x48), Register(0x4c), Register(0x54)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 48 4c 54 

# 0220a LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 56 00 

# 0220d LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 57 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 02210 Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 02213 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 02219 Copy8 [Register(0x62), Register(0x64)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 64 

# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 0221c Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 0221f LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 02225 Copy8 [Register(0x5d), Register(0x58)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 58 

# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 02228 Mul8_16 [Register(0x64), Register(0x58), Register(0x58)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 64 58 58 

# 0222c LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5a 00 

# 0222f LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5b 00 

# inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 02232 Copy8 [Register(0x59), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 59 5e 

# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 02235 Copy8 [Register(0x5e), Register(0x5b)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 5e 5b 

# inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 02238 Copy8 [Register(0x58), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 58 5e 

# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 0223b Copy8 [Register(0x5e), Register(0x5a)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 5e 5a 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# 0223e LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
04 5e 00 

# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 02241 Copy8 [Register(0x5e), Register(0x59)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 59 

# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 02244 Copy8 [Register(0x5e), Register(0x58)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 58 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02247 ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02248 AddCarry32_1 [Register(0x54), Register(0x58), Register(0x54)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 54 58 54 

# 0224c AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 0224d Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 02250 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 02256 Copy8 [Register(0x5d), Register(0x58)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 58 

# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 02259 Mul8_16 [Register(0x48), Register(0x58), Register(0x58)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 58 58 

# 0225d LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5a 00 

# 02260 LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5b 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 02263 Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 02266 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 0226c Copy8 [Register(0x62), Register(0x64)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 64 

# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 0226f Mul8_16 [Register(0x64), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 64 4c 48 

# 02273 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4a 00 

# 02276 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02279 Copy32 [Register(0x58), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 58 4c 

# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 0227c ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 0227d AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x58)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 4c 48 58 

# 02281 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 02282 Copy8 [Register(0x5a), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 5a 62 

# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 02285 Copy8 [Register(0x62), Register(0x5b)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 62 5b 

# inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 02288 Copy8 [Register(0x59), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 59 62 

# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 0228b Copy8 [Register(0x62), Register(0x5a)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 62 5a 

# inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 0228e Copy8 [Register(0x58), Register(0x62)]
#       inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 58 62 

# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 02291 Copy8 [Register(0x62), Register(0x59)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 62 59 

# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 02294 Copy8 [Register(0x5e), Register(0x58)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 58 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02297 Copy32 [Register(0x58), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 58 4c 

# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 0229a ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 0229b AddCarry32_1 [Register(0x54), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 54 4c 48 

# 0229f AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32 None
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 022a0 Store32_1 [Register(0x48), Register(0x44)]
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 48 44 

# 022a3 Store32_2 []
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 

# t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 022a4 Copy32 [Register(0x44), Register(0x68)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 44 68 

# 022a7 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 68 04 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 022ad Copy32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 38 48 

# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 022b0 Copy32 [Register(0x40), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 40 4c 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 022b3 Mul8_16 [Register(0x48), Register(0x4c), Register(0x54)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 48 4c 54 

# 022b7 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 56 00 

# 022ba LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 57 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 022bd Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 022c0 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 022c6 Copy8 [Register(0x62), Register(0x64)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 64 

# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 022c9 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 022cc LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 022d2 Copy8 [Register(0x5d), Register(0x58)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 58 

# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 022d5 Mul8_16 [Register(0x64), Register(0x58), Register(0x58)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 64 58 58 

# 022d9 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5a 00 

# 022dc LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5b 00 

# inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 022df Copy8 [Register(0x59), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 59 5e 

# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 022e2 Copy8 [Register(0x5e), Register(0x5b)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 5e 5b 

# inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 022e5 Copy8 [Register(0x58), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 58 5e 

# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 022e8 Copy8 [Register(0x5e), Register(0x5a)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 5e 5a 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("mul32_64"), at #74, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# 022eb LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("mul32_64"), at #74, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
04 5e 00 

# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 022ee Copy8 [Register(0x5e), Register(0x59)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 59 

# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #76, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 022f1 Copy8 [Register(0x5e), Register(0x58)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #76, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 58 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 022f4 ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 022f5 AddCarry32_1 [Register(0x54), Register(0x58), Register(0x54)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 54 58 54 

# 022f9 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 022fa Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 022fd LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 58 00 00 00 00 

# 02303 Copy8 [Register(0x5d), Register(0x58)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5d 58 

# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 02306 Mul8_16 [Register(0x48), Register(0x58), Register(0x58)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 58 58 

# 0230a LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5a 00 

# 0230d LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 5b 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 02310 Copy8 [Register(0x49), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 49 62 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 02313 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 02319 Copy8 [Register(0x62), Register(0x64)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 62 64 

# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 0231c Mul8_16 [Register(0x64), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 64 4c 48 

# 02320 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4a 00 

# 02323 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 02326 Copy32 [Register(0x58), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 58 4c 

# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 02329 ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 0232a AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x58)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 4c 48 58 

# 0232e AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 0232f Copy8 [Register(0x5a), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 5a 62 

# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 02332 Copy8 [Register(0x62), Register(0x5b)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 62 5b 

# inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 02335 Copy8 [Register(0x59), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 59 62 

# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 02338 Copy8 [Register(0x62), Register(0x5a)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 62 5a 

# inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 0233b Copy8 [Register(0x58), Register(0x62)]
#       inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 58 62 

# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 0233e Copy8 [Register(0x62), Register(0x59)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 62 59 

# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #97, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 02341 Copy8 [Register(0x5e), Register(0x58)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #97, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 58 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02344 Copy32 [Register(0x58), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 58 4c 

# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 02347 ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 02348 AddCarry32_1 [Register(0x54), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 54 4c 48 

# 0234c AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32 None
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 0234d Store32_1 [Register(0x48), Register(0x68)]
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 48 68 

# 02350 Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 

# temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 02351 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 68 00 00 00 00 

# temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 02357 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 64 00 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 0235d Mul8_16 [Register(0x38), Register(0x3c), Register(0x48)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 48 

# 02361 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4a 00 

# 02364 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4b 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 02367 Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 0236a LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 02370 Copy8 [Register(0x5c), Register(0x54)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5c 54 

# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 02373 Copy8 [Register(0x3d), Register(0x5f)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 5f 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 02376 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 4c 00 00 00 00 

# 0237c Copy8 [Register(0x5f), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5f 4c 

# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 0237f Mul8_16 [Register(0x54), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 54 4c 4c 

# 02383 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4e 00 

# 02386 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4f 00 

# inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 02389 Copy8 [Register(0x4d), Register(0x5d)]
#       inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 4d 5d 

# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 0238c Copy8 [Register(0x5d), Register(0x4f)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 5d 4f 

# inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 0238f Copy8 [Register(0x4c), Register(0x5d)]
#       inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 4c 5d 

# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 02392 Copy8 [Register(0x5d), Register(0x4e)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 5d 4e 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02395 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 5e 00 

# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 02398 Copy8 [Register(0x5e), Register(0x4d)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4d 

# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 0239b Copy8 [Register(0x5e), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4c 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 0239e ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 0239f AddCarry32_1 [Register(0x48), Register(0x4c), Register(0x48)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 48 4c 48 

# 023a3 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 023a4 Copy8 [Register(0x3d), Register(0x5f)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 5f 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 023a7 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 4c 00 00 00 00 

# 023ad Copy8 [Register(0x5f), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5f 4c 

# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 023b0 Mul8_16 [Register(0x38), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 4c 4c 

# 023b4 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4e 00 

# 023b7 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4f 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 023ba Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 023bd LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 023c3 Copy8 [Register(0x5c), Register(0x54)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5c 54 

# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 023c6 Mul8_16 [Register(0x54), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 54 3c 38 

# 023ca LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 023cd LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 023d0 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 4c 3c 

# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 023d3 ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 023d4 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 4c 

# 023d8 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 023d9 Copy8 [Register(0x4e), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4e 5c 

# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 023dc Copy8 [Register(0x5c), Register(0x4f)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 5c 4f 

# inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 023df Copy8 [Register(0x4d), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 4d 5c 

# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 023e2 Copy8 [Register(0x5c), Register(0x4e)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 5c 4e 

# inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 023e5 Copy8 [Register(0x4c), Register(0x5c)]
#       inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 4c 5c 

# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 023e8 Copy8 [Register(0x5c), Register(0x4d)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 5c 4d 

# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 023eb Copy8 [Register(0x5e), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5e 4c 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 023ee Copy32 [Register(0x4c), Register(0x3c)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 4c 3c 

# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 023f1 ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 023f2 AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 48 3c 38 

# 023f6 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32 None
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 023f7 Copy8 [Register(0x38), Register(0x5c)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 38 5c 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 023fa Copy8 [Register(0x5c), Register(0x6a)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 5c 6a 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 023fd Copy8 [Register(0x39), Register(0x5c)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 39 5c 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 02400 Copy8 [Register(0x5c), Register(0x6b)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 5c 6b 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 02403 Copy8 [Register(0x3a), Register(0x5c)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 3a 5c 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 02406 Copy8 [Register(0x5c), Register(0x64)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 5c 64 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 02409 Copy8 [Register(0x3b), Register(0x5c)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 3b 5c 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 0240c Copy8 [Register(0x5c), Register(0x65)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 5c 65 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 0240f Copy32 [Register(0x0c), Register(0x6c)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 6c 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 02412 Copy32 [Register(0x68), Register(0x38)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 68 38 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 02415 Store32_1 [Register(0x38), Register(0x6c)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 38 6c 

# 02418 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 02419 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 0241c Copy32 [Register(0x6c), Register(0x38)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 6c 38 

# 0241f AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 38 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 02425 Copy32 [Register(0x64), Register(0x3c)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 64 3c 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 02428 Store32_1 [Register(0x3c), Register(0x38)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 3c 38 

# 0242b Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 0242c Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 0242f Copy32 [Register(0x6c), Register(0x38)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 6c 38 

# 02432 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 38 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 02438 Copy32 [Register(0x38), Register(0x3c)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 38 3c 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 0243b Copy32 [Register(0x44), Register(0x38)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 38 

# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 0243e Copy32 [Register(0x44), Register(0x48)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 48 

# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 02441 Load32 [Register(0x38), Register(0x4c)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 38 4c 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 02444 Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 02447 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 0244d Copy32 [Register(0x38), Register(0x54)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 38 54 

# 02450 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 02456 Load32 [Register(0x54), Register(0x58)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 54 58 

# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 02459 Copy32 [Register(0x3c), Register(0x54)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 3c 54 

# 0245c AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 54 04 00 00 00 

# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 02462 Load32 [Register(0x54), Register(0x54)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 54 54 

# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 02465 ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 02466 AddCarry32_1 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 58 54 54 

# 0246a AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 0246b Store32_1 [Register(0x54), Register(0x50)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 54 50 

# 0246e Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 0246f Load32 [Register(0x38), Register(0x50)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 38 50 

# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 02472 Load32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 3c 38 

# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 02475 ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 02476 AddCarry32_1 [Register(0x50), Register(0x38), Register(0x38)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 50 38 38 

# 0247a AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 0247b Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 38 48 

# 0247e Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 0247f Load32 [Register(0x48), Register(0x3c)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 48 3c 

# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 02482 Copy32 [Register(0x4c), Register(0x38)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 4c 38 

# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 02485 Cmp8 [Register(0x3b), Register(0x3f)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 3b 3f 

# 02488 Cmp8IfZero [Register(0x3a), Register(0x3e)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 3a 3e 

# 0248b Cmp8IfZero [Register(0x39), Register(0x3d)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 39 3d 

# 0248e Cmp8IfZero [Register(0x38), Register(0x3c)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 38 3c 

# 02491 JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 b4 24 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 02495 Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 02498 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 0249e Copy32 [Register(0x48), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 48 50 

# 024a1 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 024a7 Load32 [Register(0x50), Register(0x38)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 50 38 

# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 024aa AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 38 01 00 00 00 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 024b0 Store32_1 [Register(0x38), Register(0x50)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 38 50 

# 024b3 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 024b4 Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 40 38 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 024b7 Mul8_16 [Register(0x34), Register(0x38), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 34 38 3c 

# 024bb LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3e 00 

# 024be LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3f 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 024c1 Copy8 [Register(0x35), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 35 60 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 024c4 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 024ca Copy8 [Register(0x60), Register(0x48)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 48 

# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 024cd Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 024d0 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 40 00 00 00 00 

# 024d6 Copy8 [Register(0x5c), Register(0x40)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5c 40 

# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 024d9 Mul8_16 [Register(0x48), Register(0x40), Register(0x40)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 48 40 40 

# 024dd LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 42 00 

# 024e0 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 43 00 

# inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 024e3 Copy8 [Register(0x41), Register(0x61)]
#       inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 41 61 

# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 024e6 Copy8 [Register(0x61), Register(0x43)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 61 43 

# inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 024e9 Copy8 [Register(0x40), Register(0x61)]
#       inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 40 61 

# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 024ec Copy8 [Register(0x61), Register(0x42)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 61 42 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("mul32_64"), at #219, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# 024ef LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("mul32_64"), at #219, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
04 5e 00 

# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #220, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 024f2 Copy8 [Register(0x5e), Register(0x41)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #220, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 41 

# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #221, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 024f5 Copy8 [Register(0x5e), Register(0x40)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #221, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 40 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 024f8 ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 024f9 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 3c 40 3c 

# 024fd AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 024fe Copy8 [Register(0x39), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 39 5c 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 02501 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 40 00 00 00 00 

# 02507 Copy8 [Register(0x5c), Register(0x40)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5c 40 

# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 0250a Mul8_16 [Register(0x34), Register(0x40), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 34 40 40 

# 0250e LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 42 00 

# 02511 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 43 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 02514 Copy8 [Register(0x35), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 35 60 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 02517 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 0251d Copy8 [Register(0x60), Register(0x48)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 48 

# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 02520 Mul8_16 [Register(0x48), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 48 38 34 

# 02524 LoadImm8 [Register(0x36), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 36 00 

# 02527 LoadImm8 [Register(0x37), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 37 00 

# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 0252a Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 40 38 

# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 0252d ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 0252e AddCarry32_1 [Register(0x38), Register(0x34), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 38 34 40 

# 02532 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 02533 Copy8 [Register(0x42), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 42 60 

# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 02536 Copy8 [Register(0x60), Register(0x43)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 43 

# inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 02539 Copy8 [Register(0x41), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 41 60 

# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 0253c Copy8 [Register(0x60), Register(0x42)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 42 

# inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 0253f Copy8 [Register(0x40), Register(0x60)]
#       inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 40 60 

# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 02542 Copy8 [Register(0x60), Register(0x41)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 41 

# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #242, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 02545 Copy8 [Register(0x5e), Register(0x40)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #242, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5e 40 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02548 Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 40 38 

# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 0254b ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 0254c AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 34 

# 02550 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 02551 Copy32 [Register(0x34), Register(0x38)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 34 38 

# :inline_mul32_64_mul16_32_11_function_end_mul16_32 None
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 02554 Copy8 [Register(0x38), Register(0x5c)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 38 5c 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 02557 Copy8 [Register(0x5c), Register(0x6a)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 5c 6a 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 0255a Copy8 [Register(0x39), Register(0x5c)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 39 5c 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 0255d Copy8 [Register(0x5c), Register(0x6b)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 5c 6b 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 02560 Copy8 [Register(0x3a), Register(0x5c)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 3a 5c 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 02563 Copy8 [Register(0x5c), Register(0x64)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 5c 64 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 02566 Copy8 [Register(0x3b), Register(0x5c)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 3b 5c 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 02569 Copy8 [Register(0x5c), Register(0x65)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 5c 65 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 0256c Copy32 [Register(0x0c), Register(0x6c)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 6c 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 0256f Copy32 [Register(0x68), Register(0x38)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 68 38 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 02572 Store32_1 [Register(0x38), Register(0x6c)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 38 6c 

# 02575 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 02576 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 02579 Copy32 [Register(0x6c), Register(0x38)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 6c 38 

# 0257c AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 38 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 02582 Copy32 [Register(0x64), Register(0x3c)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 64 3c 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 02585 Store32_1 [Register(0x3c), Register(0x38)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 3c 38 

# 02588 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 02589 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 0258c Copy32 [Register(0x6c), Register(0x38)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 6c 38 

# 0258f AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 38 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 02595 Copy32 [Register(0x38), Register(0x3c)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 38 3c 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02598 Copy32 [Register(0x44), Register(0x34)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 34 

# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 0259b Copy32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 3c 38 

# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 0259e Copy32 [Register(0x44), Register(0x3c)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 44 3c 

# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 025a1 Load32 [Register(0x34), Register(0x40)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 34 40 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 025a4 Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 025a7 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 025ad Copy32 [Register(0x34), Register(0x48)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 34 48 

# 025b0 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 025b6 Load32 [Register(0x48), Register(0x4c)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 48 4c 

# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 025b9 Copy32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 38 48 

# 025bc AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 48 04 00 00 00 

# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 025c2 Load32 [Register(0x48), Register(0x48)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 48 48 

# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 025c5 ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 025c6 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x48)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 4c 48 48 

# 025ca AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 025cb Store32_1 [Register(0x48), Register(0x44)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 48 44 

# 025ce Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 025cf Load32 [Register(0x34), Register(0x44)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 34 44 

# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 025d2 Load32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 38 34 

# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 025d5 ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 025d6 AddCarry32_1 [Register(0x44), Register(0x34), Register(0x34)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 44 34 34 

# 025da AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 025db Store32_1 [Register(0x34), Register(0x3c)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 34 3c 

# 025de Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 025df Load32 [Register(0x3c), Register(0x38)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 3c 38 

# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 025e2 Copy32 [Register(0x40), Register(0x34)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 40 34 

# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 025e5 Cmp8 [Register(0x37), Register(0x3b)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 37 3b 

# 025e8 Cmp8IfZero [Register(0x36), Register(0x3a)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 36 3a 

# 025eb Cmp8IfZero [Register(0x35), Register(0x39)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 35 39 

# 025ee Cmp8IfZero [Register(0x34), Register(0x38)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 34 38 

# 025f1 JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 14 26 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_end_0' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 025f5 Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 025f8 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 025fe Copy32 [Register(0x3c), Register(0x44)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 3c 44 

# 02601 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 02607 Load32 [Register(0x44), Register(0x34)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 44 34 

# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 0260a AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 34 01 00 00 00 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 02610 Store32_1 [Register(0x34), Register(0x44)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 34 44 

# 02613 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 02614 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 

# return None None
# Return { value: None }
# 0261a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 02620 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 02622 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec32
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d (t1a5d Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d (t286d Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([122])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e (t4b1e Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b (t4e2b Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) Reg(U8) Some([122])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 (t7123 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 (t7d53 Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c (t858c Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e (t8c2e Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 (ta4e7 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 (tb4e5 Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 (td726 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 (te6a8 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 (tf695 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 (tfbb9 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([124, 125, 126, 127]) Number(0n987656/0x000f1208u32)
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_tb7c3 (tb7c3 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([116, 117, 118, 119]) Number(0n987660/0x000f120cu32)
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(0xcccccccdu32)) Reg(U32) Some([128, 129, 130, 131]) Number(0xcccccccdu32)
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([132])
# Var inline_print_dec32_putc_29_t0 (static "lcd_enable" addr) Reg(U32) Some([116, 117, 118, 119]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec32_putc_29_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([121])
# Var inline_print_dec32_putc_29_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([120]) Number(0n0/0x00u8)
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([132])
# Var t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([132])
# Var t6f38 (t6f38 Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))) Reg(U8) Some([132])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([112, 113, 114, 115])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([124, 125, 126, 127])
# Var t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([116, 117, 118, 119]) Number(0n256/0x00000100u32)
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([116, 117, 118, 119])
# 02627 Copy32 [Register(0x00), Register(0x70)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [112, 113, 114, 115].
21 00 70 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# 0262a Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Ident("a")
21 70 7c 

# t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 0262d LoadImm32 [Register(0x74), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 74 00 01 00 00 

# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 02633 Cmp8 [Register(0x77), Register(0x7f)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 77 7f 

# 02636 Cmp8IfZero [Register(0x76), Register(0x7e)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 76 7e 

# 02639 Cmp8IfZero [Register(0x75), Register(0x7d)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 75 7d 

# 0263c Cmp8IfZero [Register(0x74), Register(0x7c)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 74 7c 

# 0263f JcImm [Label24(print_dec32_if_end_0)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 61 26 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# Index("a", Number(0n0/0x00u8))
# 02643 Copy8 [Register(0x70), Register(0x84)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
#       Index("a", Number(0n0/0x00u8))
0b 70 84 

# None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# 02646 Copy8 [Register(0x84), Register(0x00)]
#       Arg0[a]=t3404 None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
0b 84 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 02649 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 0264f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 59 26 00 00 

# 02655 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 16 28 00 

# 02659 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# return None Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 0265f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 02661 Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 70 7c 

# inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 02664 Copy32 [Register(0x7c), Register(0x74)]
#       inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 7c 74 

# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# Number(0xcccccccdu32)
# 02667 LoadImm32 [Register(0x80), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       Number(0xcccccccdu32)
20 80 cd cc cc cc 

# inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# Number(0n987656/0x000f1208u32)
# 0266d LoadImm32 [Register(0x7c), Constant32(0x000f1208=987656)]
#       inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
#       Number(0n987656/0x000f1208u32)
20 7c 08 12 0f 00 

# None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# 02673 Copy32 [Register(0x74), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_47_a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 74 00 

# 02676 Copy32 [Register(0x80), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 80 04 

# 02679 Copy32 [Register(0x7c), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 7c 08 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}
# Registers to save: []
# 0267c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 02682 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 8c 26 00 00 

# 02688 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 c7 21 00 

# 0268c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
# Number(0n987660/0x000f120cu32)
# 02692 LoadImm32 [Register(0x74), Constant32(0x000f120c=987660)]
#       inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
#       Number(0n987660/0x000f120cu32)
20 74 0c 12 0f 00 

# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 02698 Load32 [Register(0x74), Register(0x74)]
#       inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 74 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# Index("a", Number(0n0/0x00u8))
# 0269b Copy8 [Register(0x74), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n0/0x00u8))
0b 74 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# 0269e LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
04 00 03 

# 026a1 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x78), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
1e 04 00 78 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# 026a6 Copy8 [Register(0x78), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
0b 78 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# Index("a", Number(0n1/0x01u8))
# 026a9 Copy8 [Register(0x75), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n1/0x01u8))
0b 75 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# 026ac LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
04 00 03 

# 026af Shift8 [Constant8(0x04=4), Register(0x00), Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
1e 04 00 79 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# 026b4 Copy8 [Register(0x78), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
0b 78 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# Index("a", Number(0n2/0x02u8))
# 026b7 Copy8 [Register(0x76), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n2/0x02u8))
0b 76 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# 026ba LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
04 00 03 

# 026bd Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7a), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
1e 04 00 7a 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# 026c2 Copy8 [Register(0x78), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
0b 78 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# Index("a", Number(0n3/0x03u8))
# 026c5 Copy8 [Register(0x77), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n3/0x03u8))
0b 77 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# 026c8 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
04 00 03 

# 026cb Shift8 [Constant8(0x04=4), Register(0x00), Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
1e 04 00 79 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# 026d0 Copy8 [Register(0x78), Register(0x77)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
0b 78 77 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n0/0x00u8))
# 026d3 Copy8 [Register(0x74), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n0/0x00u8))
0b 74 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# 026d6 AndImm8 [Register(0x78), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
18 78 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# 026d9 Copy8 [Register(0x78), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
0b 78 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n0/0x00u8))
# 026dc Copy8 [Register(0x74), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n0/0x00u8))
0b 74 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n1/0x01u8))
# 026df Copy8 [Register(0x75), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n1/0x01u8))
0b 75 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# 026e2 Copy8 [Register(0x79), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
0b 79 7a 

# 026e5 AndImm8 [Register(0x7a), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
18 7a e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# 026e8 Or8 [Register(0x78), Register(0x7a), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
1c 78 7a 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# 026ec Copy8 [Register(0x78), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
0b 78 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n1/0x01u8))
# 026ef Copy8 [Register(0x75), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n1/0x01u8))
0b 75 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# 026f2 Copy8 [Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
0b 79 78 

# 026f5 AndImm8 [Register(0x78), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
18 78 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# 026f8 Copy8 [Register(0x78), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
0b 78 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n1/0x01u8))
# 026fb Copy8 [Register(0x75), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n1/0x01u8))
0b 75 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n2/0x02u8))
# 026fe Copy8 [Register(0x76), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n2/0x02u8))
0b 76 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# 02701 Copy8 [Register(0x7a), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
0b 7a 78 

# 02704 AndImm8 [Register(0x78), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
18 78 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# 02707 Or8 [Register(0x79), Register(0x78), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
1c 79 78 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# 0270b Copy8 [Register(0x78), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
0b 78 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n2/0x02u8))
# 0270e Copy8 [Register(0x76), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n2/0x02u8))
0b 76 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# 02711 Copy8 [Register(0x7a), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
0b 7a 78 

# 02714 AndImm8 [Register(0x78), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
18 78 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# 02717 Copy8 [Register(0x78), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
0b 78 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n2/0x02u8))
# 0271a Copy8 [Register(0x76), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n2/0x02u8))
0b 76 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n3/0x03u8))
# 0271d Copy8 [Register(0x77), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n3/0x03u8))
0b 77 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# 02720 Copy8 [Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
0b 79 78 

# 02723 AndImm8 [Register(0x78), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
18 78 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# 02726 Or8 [Register(0x7a), Register(0x78), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
1c 7a 78 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# 0272a Copy8 [Register(0x78), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
0b 78 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n3/0x03u8))
# 0272d Copy8 [Register(0x77), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n3/0x03u8))
0b 77 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# 02730 Copy8 [Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
0b 79 78 

# 02733 AndImm8 [Register(0x78), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
18 78 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# 02736 Copy8 [Register(0x78), Register(0x77)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
0b 78 77 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 None
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# :inline_print_dec32_div32_by10_47_function_end_div32_by10 None
# inline_print_dec32_div32_by10_47_function_end_div32_by10
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 02739 Copy32 [Register(0x74), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 74 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132]
# 0273c Push8 [Register(0x84)]
#       Saving reg0x84 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 84 

# 0273e Push8 [Register(0x83)]
#       Saving reg0x83 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 83 

# 02740 Push8 [Register(0x82)]
#       Saving reg0x82 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 82 

# 02742 Push8 [Register(0x81)]
#       Saving reg0x81 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 81 

# 02744 Push8 [Register(0x80)]
#       Saving reg0x80 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 80 

# 02746 Push8 [Register(0x7f)]
#       Saving reg0x7f before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7f 

# 02748 Push8 [Register(0x7e)]
#       Saving reg0x7e before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7e 

# 0274a Push8 [Register(0x7d)]
#       Saving reg0x7d before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7d 

# 0274c Push8 [Register(0x7c)]
#       Saving reg0x7c before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7c 

# 0274e Push8 [Register(0x7a)]
#       Saving reg0x7a before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7a 

# 02750 Push8 [Register(0x79)]
#       Saving reg0x79 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 79 

# 02752 Push8 [Register(0x78)]
#       Saving reg0x78 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 78 

# 02754 Push8 [Register(0x77)]
#       Saving reg0x77 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 77 

# 02756 Push8 [Register(0x76)]
#       Saving reg0x76 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 76 

# 02758 Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 75 

# 0275a Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 74 

# 0275c Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 73 

# 0275e Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 72 

# 02760 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 71 

# 02762 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 70 

# 02764 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 0276a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 74 27 00 00 

# 02770 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 27 26 00 

# 02774 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 0277a Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 70 

# 0277c Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 71 

# 0277e Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 72 

# 02780 Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 73 

# 02782 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 74 

# 02784 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 75 

# 02786 Pop8 [Register(0x76)]
#       Restoring reg0x76 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 76 

# 02788 Pop8 [Register(0x77)]
#       Restoring reg0x77 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 77 

# 0278a Pop8 [Register(0x78)]
#       Restoring reg0x78 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 78 

# 0278c Pop8 [Register(0x79)]
#       Restoring reg0x79 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 79 

# 0278e Pop8 [Register(0x7a)]
#       Restoring reg0x7a after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7a 

# 02790 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7c 

# 02792 Pop8 [Register(0x7d)]
#       Restoring reg0x7d after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7d 

# 02794 Pop8 [Register(0x7e)]
#       Restoring reg0x7e after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7e 

# 02796 Pop8 [Register(0x7f)]
#       Restoring reg0x7f after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7f 

# 02798 Pop8 [Register(0x80)]
#       Restoring reg0x80 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 80 

# 0279a Pop8 [Register(0x81)]
#       Restoring reg0x81 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 81 

# 0279c Pop8 [Register(0x82)]
#       Restoring reg0x82 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 82 

# 0279e Pop8 [Register(0x83)]
#       Restoring reg0x83 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 83 

# 027a0 Pop8 [Register(0x84)]
#       Restoring reg0x84 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 84 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 027a2 Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 70 7c 

# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 027a5 Copy32 [Register(0x74), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 74 70 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 027a8 ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 027a9 AddCarry32_1 [Register(0x70), Register(0x70), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 70 70 70 

# 027ad AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 027ae ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 027af AddCarry32_1 [Register(0x70), Register(0x70), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 70 70 74 

# 027b3 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 027b4 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 027b5 AddCarry32_1 [Register(0x74), Register(0x74), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 74 74 74 

# 027b9 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 027ba ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 027bb AddCarry32_1 [Register(0x74), Register(0x70), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 74 70 70 

# 027bf AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 None
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 027c0 Copy32 [Register(0x70), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 70 00 

# 027c3 Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 

# 027c5 Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 

# 027c7 Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 

# 027c9 Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 

# 027cb AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 

# 027d1 ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 

# 027d2 AddCarry32_1 [Register(0x7c), Register(0x00), Register(0x70)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 7c 00 70 

# 027d6 AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 

# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# Index("a", Number(0n0/0x00u8))
# 027d7 Copy8 [Register(0x70), Register(0x84)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
#       Index("a", Number(0n0/0x00u8))
0b 70 84 

# t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# 027da LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
04 00 30 

# 027dd Add8NoCarryIn [Register(0x84), Register(0x00), Register(0x84)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
14 84 00 84 

# inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 027e1 Out0 [Register(0x84)]
#       IoWrite0
68 84 

# inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 027e3 LoadImm32 [Register(0x74), Constant32(0x000f105c=987228)]
#       inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 74 5c 10 0f 00 

# inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 027e9 Load8 [Register(0x74), Register(0x79)]
#       inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 74 79 

# inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 027ec LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 027ef Cmp8 [Register(0x79), Register(0x78)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 79 78 

# 027f2 JzImm [Label24(inline_print_dec32_putc_29_putc_if_end_0)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 0f 28 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_putc_if_true_0_1)], resolved: None }
# :inline_print_dec32_putc_29_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec32_putc_29_putc_if_true_0_1
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 027f6 Copy8 [Register(0x84), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 84 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 027f9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 027ff StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 09 28 00 00 

# 02805 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 02809 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_end_0
# return None None
# Return { value: None }
# 0280f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 02811 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec8
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([133])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([134])
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([133])
# Var inline_print_dec8_putc_30_t0 (static "lcd_enable" addr) Reg(U32) Some([136, 137, 138, 139]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec8_putc_30_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([134])
# Var inline_print_dec8_putc_30_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([140]) Number(0n0/0x00u8)
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([133])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([134]) Number(0n10/0x0au8)
# Var t5673 (t5673 Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))) Reg(U8) Some([133])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([133])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([134])
# Var tf5e0 (tf5e0 Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) Reg(U8) Some([134])
# 02816 Copy8 [Register(0x00), Register(0x85)]
#       Save function parameter 'a' registers [0] to locals [133].
0b 00 85 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 02819 LoadImm8 [Register(0x86), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 86 0a 

# if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# 0281c Cmp8 [Register(0x86), Register(0x85)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
15 86 85 

# 0281f JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
71 27 28 00 

# 02823 JmpImm [Label24(print_dec8_if_end_0)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_end_0' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
70 73 28 00 

# :print_dec8_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }\nArithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# 02827 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
04 00 0a 

# 0282a Divide8 [Register(0x85), Register(0x00), Register(0x86)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
17 85 00 86 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x86), Register(0x86)], resolved: None }
# None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 0282e Copy8 [Register(0x86), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b 86 00 

# Registers used by this function: {133, 134, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [133, 134, 136, 137, 138, 139, 140]
# 02831 Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8c 

# 02833 Push8 [Register(0x8b)]
#       Saving reg0x8b before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8b 

# 02835 Push8 [Register(0x8a)]
#       Saving reg0x8a before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8a 

# 02837 Push8 [Register(0x89)]
#       Saving reg0x89 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 89 

# 02839 Push8 [Register(0x88)]
#       Saving reg0x88 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 88 

# 0283b Push8 [Register(0x86)]
#       Saving reg0x86 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 86 

# 0283d Push8 [Register(0x85)]
#       Saving reg0x85 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 85 

# 0283f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 02845 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 4f 28 00 00 

# 0284b JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 16 28 00 

# 0284f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 02855 Pop8 [Register(0x85)]
#       Restoring reg0x85 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 85 

# 02857 Pop8 [Register(0x86)]
#       Restoring reg0x86 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 86 

# 02859 Pop8 [Register(0x88)]
#       Restoring reg0x88 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 88 

# 0285b Pop8 [Register(0x89)]
#       Restoring reg0x89 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 89 

# 0285d Pop8 [Register(0x8a)]
#       Restoring reg0x8a after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8a 

# 0285f Pop8 [Register(0x8b)]
#       Restoring reg0x8b after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8b 

# 02861 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8c 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nArithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x86), Register(0x86)], resolved: None }
# tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# 02863 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
04 00 0a 

# 02866 Mul8_8 [Register(0x86), Register(0x00), Register(0x86)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
10 86 00 86 

# a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# 0286a Copy8 [Register(0x86), Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
0b 86 00 

# 0286d Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
02 00 

# 0286f Add8NoCarryIn [Register(0x85), Register(0x00), Register(0x85)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
14 85 00 85 

# :print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\nArithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# 02873 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
04 00 30 

# 02876 Add8NoCarryIn [Register(0x85), Register(0x00), Register(0x85)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
14 85 00 85 

# inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0287a Out0 [Register(0x85)]
#       IoWrite0
68 85 

# inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 0287c LoadImm32 [Register(0x88), Constant32(0x000f105c=987228)]
#       inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 88 5c 10 0f 00 

# inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 02882 Load8 [Register(0x88), Register(0x86)]
#       inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 88 86 

# inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 02885 LoadImm8 [Register(0x8c), Constant8(0x00=0)]
#       inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 8c 00 

# if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 02888 Cmp8 [Register(0x86), Register(0x8c)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 86 8c 

# 0288b JzImm [Label24(inline_print_dec8_putc_30_putc_if_end_0)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 a8 28 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_end_0' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_putc_if_true_0_1)], resolved: None }
# :inline_print_dec8_putc_30_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec8_putc_30_putc_if_true_0_1
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0288f Copy8 [Register(0x85), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 85 00 

# Registers used by this function: {133, 134, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 144, 145, 146, 147, 148, 149, 150, 151, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 02892 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02898 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c a2 28 00 00 

# 0289e JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 88 1e 00 

# 028a2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# :inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_end_0
# return None None
# Return { value: None }
# 028a8 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 028aa Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var inline_stdio_init_queue_init_35_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([141]) Number(0n0/0x00u8)
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([144, 145, 146, 147]) Number(0n987648/0x000f1200u32)
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([144, 145, 146, 147]) Number(0n987652/0x000f1204u32)
# Var t0 (static "lcd_enable" addr) Reg(U32) Some([148, 149, 150, 151]) Number(0n987228/0x000f105cu32)
# Var t1 (static "keyboard_enable" addr) Reg(U32) Some([148, 149, 150, 151]) Number(0n987144/0x000f1008u32)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([152]) Number(0n1/0x01u8)
# t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 028af LoadImm32 [Register(0x94), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 94 5c 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 028b5 LoadImm8 [Register(0x98), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 98 01 

# mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 028b8 Store8 [Register(0x98), Register(0x94)]
#       mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 98 94 

# t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 028bb LoadImm32 [Register(0x94), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 94 08 10 0f 00 

# mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 028c1 Store8 [Register(0x98), Register(0x94)]
#       mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 98 94 

# inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# 028c4 LoadImm32 [Register(0x90), Constant32(0x000f1200=987648)]
#       inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
20 90 00 12 0f 00 

# inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 028ca LoadImm8 [Register(0x8d), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 8d 00 

# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# 028cd Store8 [Register(0x8d), Register(0x90)]
#       mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
06 8d 90 

# inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# 028d0 LoadImm32 [Register(0x90), Constant32(0x000f1204=987652)]
#       inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
20 90 04 12 0f 00 

# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# 028d6 Store8 [Register(0x8d), Register(0x90)]
#       mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
06 8d 90 

# :inline_stdio_init_queue_init_35_function_end_queue_init None
# inline_stdio_init_queue_init_35_function_end_queue_init
# None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {141, 144, 145, 146, 147, 148, 149, 150, 151, 152}
# Registers used by callee tree: {144, 145, 146, 147, 148, 149, 150, 151, 213, 229, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244}
# Registers to save: [144, 145, 146, 147, 148, 149, 150, 151]
# 028d9 Push8 [Register(0x97)]
#       Saving reg0x97 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 97 

# 028db Push8 [Register(0x96)]
#       Saving reg0x96 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 96 

# 028dd Push8 [Register(0x95)]
#       Saving reg0x95 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 95 

# 028df Push8 [Register(0x94)]
#       Saving reg0x94 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 94 

# 028e1 Push8 [Register(0x93)]
#       Saving reg0x93 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 93 

# 028e3 Push8 [Register(0x92)]
#       Saving reg0x92 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 92 

# 028e5 Push8 [Register(0x91)]
#       Saving reg0x91 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 91 

# 028e7 Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 90 

# 028e9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 028ef StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c f9 28 00 00 

# 028f5 JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 67 1d 00 

# 028f9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# 028ff Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 90 

# 02901 Pop8 [Register(0x91)]
#       Restoring reg0x91 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 91 

# 02903 Pop8 [Register(0x92)]
#       Restoring reg0x92 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 92 

# 02905 Pop8 [Register(0x93)]
#       Restoring reg0x93 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 93 

# 02907 Pop8 [Register(0x94)]
#       Restoring reg0x94 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 94 

# 02909 Pop8 [Register(0x95)]
#       Restoring reg0x95 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 95 

# 0290b Pop8 [Register(0x96)]
#       Restoring reg0x96 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 96 

# 0290d Pop8 [Register(0x97)]
#       Restoring reg0x97 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 97 

# None <= call KeyBoard_init() Some('/lutcomp/programs/lib/stdio.j':(15,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {141, 144, 145, 146, 147, 148, 149, 150, 151, 152}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 0290f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 02915 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c 1f 29 00 00 

# 0291b JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 04 00 

# 0291f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 02925 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 02927 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# Tick Count: 4078520
