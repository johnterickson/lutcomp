v2.0 raw
# ImageBaseAddress=0x00000000
# entry
# 00000 Init []
#       Initialzing flags and internal regs.
00 

# 00001 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 00007 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 0000d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 00 00 00 

# 00013 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 c9 21 00 

# 00017 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 0001d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var keyboard (global static "keyboard") Static(987500) None
# Var keyboard_enable (global static "keyboard_enable") Static(987508) None
# Var lcd_current (global static "lcd_current") Static(987512) None
# Var lcd_display (global static "lcd_display") Static(987516) None
# Var lcd_enable (global static "lcd_enable") Static(987596) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(987600) None
# Var t371f (t371f Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987500), Number(USIZE, 4)) }) Reg(U32) Some([16, 17, 18, 19]) [112, 17, 15, 0]
# Var t8743 (t8743 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987500) }) Reg(U32) Some([16, 17, 18, 19]) [108, 17, 15, 0]
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([20]) [0]
# Consts t371f: 0n987504/0x000f1170u32
# Consts t8743: 0n987500/0x000f116cu32
# t8743 <- 0n987500/0x000f116cu32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987500) }
# Number(USIZE, 987500)
# 00427 LoadImm32 [Register(0x10), Constant32(0x000f116c=987500)]
#       t8743 <- 0n987500/0x000f116cu32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987500) }
#       Number(USIZE, 987500)
20 10 6c 11 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0042d LoadImm8 [Register(0x14), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 14 00 

# mem[t8743] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 00430 Store8 [Register(0x14), Register(0x10)]
#       mem[t8743] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 14 10 

# t371f <- 0n987504/0x000f1170u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987500), Number(USIZE, 4)) }
# Number(USIZE, 987504)
# 00433 LoadImm32 [Register(0x10), Constant32(0x000f1170=987504)]
#       t371f <- 0n987504/0x000f1170u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987500), Number(USIZE, 4)) }
#       Number(USIZE, 987504)
20 10 70 11 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00439 LoadImm8 [Register(0x14), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 14 00 

# mem[t371f] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 0043c Store8 [Register(0x14), Register(0x10)]
#       mem[t371f] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 14 10 

# return None None
# Return { value: None }
# 0043f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 00441 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([21])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([21])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([24, 25, 26, 27])
# Var inline_Keyboard_poll_queue_push_37_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_Keyboard_poll_queue_push_37_keyboard (global static "keyboard") Static(1003600) None
# Var inline_Keyboard_poll_queue_push_37_keyboard_enable (global static "keyboard_enable") Static(1003608) None
# Var inline_Keyboard_poll_queue_push_37_lcd_current (global static "lcd_current") Static(1003612) None
# Var inline_Keyboard_poll_queue_push_37_lcd_display (global static "lcd_display") Static(1003616) None
# Var inline_Keyboard_poll_queue_push_37_lcd_enable (global static "lcd_enable") Static(1003696) None
# Var inline_Keyboard_poll_queue_push_37_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([21])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_stdin (global static "stdin") Static(1003700) None
# Var inline_Keyboard_poll_queue_push_37_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([36])
# Var inline_Keyboard_poll_queue_push_37_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_t531d (t531d Ident("n")) Reg(U8) Some([21])
# Var inline_Keyboard_poll_queue_push_37_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_37_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([21])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_37_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([32, 33, 34, 35])
# Var keyboard (global static "keyboard") Static(987864) None
# Var keyboard_enable (global static "keyboard_enable") Static(987872) None
# Var lcd_current (global static "lcd_current") Static(987876) None
# Var lcd_display (global static "lcd_display") Static(987880) None
# Var lcd_enable (global static "lcd_enable") Static(987960) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(987964) None
# Var t0 (static "stdin" addr) Reg(U32) Some([28, 29, 30, 31])
# Var t1107 (t1107 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987864) }) Reg(U32) Some([48, 49, 50, 51]) [216, 18, 15, 0]
# Var t12ac (t12ac Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })) Reg(U8) Some([21])
# Var t23a (t23a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([21])
# Var t3334 (t3334 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))) Reg(U8) Some([21])
# Var t343d (t343d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }) Reg(U32) Some([28, 29, 30, 31]) [220, 18, 15, 0]
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([21])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([48, 49, 50, 51])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([24, 25, 26, 27])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([28, 29, 30, 31])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([21])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([52])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([21])
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([21])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([53]) [0]
# Var tb62e (tb62e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([48, 49, 50, 51])
# Var td18e (td18e Ident("index")) Reg(U32) Some([24, 25, 26, 27])
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([28, 29, 30, 31])
# Var ted94 (ted94 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([48, 49, 50, 51])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([21])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([53]) [1]
# Var tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([28, 29, 30, 31])
# Consts t0: 0n987964/0x000f133cu32
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 00446 IoReadyToRead [Register(0x15)]
#       ReadyToRead
79 15 

# t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# 00448 AndImm8 [Register(0x15), Constant8(0x04=4)]
#       t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
18 15 04 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Number(U8, 0)
# 0044b LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# 0044e Cmp8 [Register(0x15), Register(0x35)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
15 15 35 

# 00451 JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
72 59 04 00 

# 00455 JmpImm [Label24(Keyboard_poll_if_else_0_2)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
70 5f 04 00 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 00459 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 0045b JmpImm [Label24(Keyboard_poll_if_end_0)]
#       goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
70 5f 04 00 

# :Keyboard_poll_if_else_0_2 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 0045f In2 [Register(0x15)]
#       IoRead2
62 15 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }\nArithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# 00461 LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
20 30 00 00 00 00 

# 00467 Copy8 [Register(0x15), Register(0x30)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
0b 15 30 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# 0046a LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
20 00 04 00 00 00 

# 00470 Mul8_16 [Register(0x30), Register(0x00), Register(0x18)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
11 30 00 18 

# 00474 LoadImm8 [Register(0x1a), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1a 00 

# 00477 LoadImm8 [Register(0x1b), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1b 00 

# t1107 <- 0n987864/0x000f12d8u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987864) }
# Number(USIZE, 987864)
# 0047a LoadImm32 [Register(0x30), Constant32(0x000f12d8=987864)]
#       t1107 <- 0n987864/0x000f12d8u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987864) }
#       Number(USIZE, 987864)
20 30 d8 12 0f 00 

# t379c <- mem[t1107] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# 00480 Load8 [Register(0x30), Register(0x15)]
#       t379c <- mem[t1107] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
05 30 15 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# Number(U8, 0)
# 00483 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# 00486 Cmp8 [Register(0x15), Register(0x35)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
15 15 35 

# 00489 JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
72 a9 04 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0048d LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 1))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# 00493 Copy32 [Register(0x18), Register(0x1c)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
21 18 1c 

# 00496 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
32 1c 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 0049c ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
03 

# 0049d AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
30 30 1c 30 

# 004a1 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 004a2 Load8 [Register(0x30), Register(0x15)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
05 30 15 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 004a5 JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 b8 04 00 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 004a9 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 004af ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 004b0 AddCarry32_1 [Register(0x30), Register(0x18), Register(0x30)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 30 18 30 

# 004b4 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 004b5 Load8 [Register(0x30), Register(0x15)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 30 15 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# t343d <- 0n987868/0x000f12dcu32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }
# Number(USIZE, 987868)
# 004b8 LoadImm32 [Register(0x1c), Constant32(0x000f12dc=987868)]
#       t343d <- 0n987868/0x000f12dcu32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }
#       Number(USIZE, 987868)
20 1c dc 12 0f 00 

# t7ebd <- mem[t343d] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 004be Load8 [Register(0x1c), Register(0x34)]
#       t7ebd <- mem[t343d] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 1c 34 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 004c1 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 004c4 Cmp8 [Register(0x34), Register(0x35)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 34 35 

# 004c7 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 cf 04 00 

# 004cb JmpImm [Label24(Keyboard_poll_if_else_0_8)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
70 19 05 00 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# t0 <- 0n987964/0x000f133cu32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# AddressOf(Ident("stdin"))
# 004cf LoadImm32 [Register(0x1c), Constant32(0x000f133c=987964)]
#       t0 <- 0n987964/0x000f133cu32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       AddressOf(Ident("stdin"))
20 1c 3c 13 0f 00 

# tfff6 <- t0 U32 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# AddressOf(Ident("stdin"))
# optimized away noop copy Instruction { source: "tfff6 <- t0 U32 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nAddressOf(Ident(\"stdin\"))\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- tfff6 U32 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_s <- tfff6 U32 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# inline_Keyboard_poll_queue_push_37_t565a <- inline_Keyboard_poll_queue_push_37_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t565a <- inline_Keyboard_poll_queue_push_37_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_37_values <- inline_Keyboard_poll_queue_push_37_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 004d5 Copy32 [Register(0x1c), Register(0x20)]
#       inline_Keyboard_poll_queue_push_37_values <- inline_Keyboard_poll_queue_push_37_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 1c 20 

# inline_Keyboard_poll_queue_push_37_t1d36 <- inline_Keyboard_poll_queue_push_37_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t1d36 <- inline_Keyboard_poll_queue_push_37_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 004d8 Copy32 [Register(0x1c), Register(0x2c)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 1c 2c 

# 004db AddImm32IgnoreCarry [Register(0x2c), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 2c 04 01 00 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 004e1 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 004e4 LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 28 00 00 00 00 

# 004ea Copy8 [Register(0x24), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 24 28 

# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 004ed ClearCarry []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 004ee AddCarry32_1 [Register(0x20), Register(0x28), Register(0x20)]
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 20 28 20 

# 004f2 AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# inline_Keyboard_poll_queue_push_37_t531d <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t531d <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x15), Register(0x15)], resolved: None }
# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 004f3 Store8 [Register(0x15), Register(0x20)]
#       mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 15 20 

# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 004f6 Copy32 [Register(0x1c), Register(0x2c)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 1c 2c 

# 004f9 AddImm32IgnoreCarry [Register(0x2c), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 2c 04 01 00 00 

# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 004ff Copy32 [Register(0x1c), Register(0x2c)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 1c 2c 

# 00502 AddImm32IgnoreCarry [Register(0x2c), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 2c 04 01 00 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 00508 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 0050b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 0050e Add8NoCarryIn [Register(0x24), Register(0x00), Register(0x15)]
#       inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 24 00 15 

# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 00512 Store8 [Register(0x15), Register(0x2c)]
#       mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 15 2c 

# goto inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_37_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_37_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# inline_Keyboard_poll_queue_push_37_function_end_queue_push
# goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 00515 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
70 19 05 00 

# :Keyboard_poll_if_else_0_8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Number(U8, 0)
# 00519 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Number(U8, 0)
04 35 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 0051c LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 2))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# 00522 Copy32 [Register(0x18), Register(0x1c)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
21 18 1c 

# 00525 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
32 1c 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 0052b ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
03 

# 0052c AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
30 30 1c 30 

# 00530 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 00531 Load8 [Register(0x30), Register(0x15)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
05 30 15 

# if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# 00534 Cmp8 [Register(0x35), Register(0x15)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
15 35 15 

# 00537 JzImm [Label24(Keyboard_poll_if_else_0_11)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
72 6e 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# t343d <- 0n987868/0x000f12dcu32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }
# Number(USIZE, 987868)
# 0053b LoadImm32 [Register(0x1c), Constant32(0x000f12dc=987868)]
#       t343d <- 0n987868/0x000f12dcu32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }
#       Number(USIZE, 987868)
20 1c dc 12 0f 00 

# t7ebd <- mem[t343d] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 00541 Load8 [Register(0x1c), Register(0x34)]
#       t7ebd <- mem[t343d] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 1c 34 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 00544 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 00547 Cmp8 [Register(0x34), Register(0x35)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 34 35 

# 0054a JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 5e 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Keyboard_poll_if_true_0_13
# t1107 <- 0n987864/0x000f12d8u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987864) }
# Number(USIZE, 987864)
# 0054e LoadImm32 [Register(0x30), Constant32(0x000f12d8=987864)]
#       t1107 <- 0n987864/0x000f12d8u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987864) }
#       Number(USIZE, 987864)
20 30 d8 12 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00554 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# mem[t1107] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 00557 Store8 [Register(0x35), Register(0x30)]
#       mem[t1107] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 35 30 

# goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 0055a JmpImm [Label24(Keyboard_poll_if_end_12)]
#       goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 6a 05 00 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# t1107 <- 0n987864/0x000f12d8u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987864) }
# Number(USIZE, 987864)
# 0055e LoadImm32 [Register(0x30), Constant32(0x000f12d8=987864)]
#       t1107 <- 0n987864/0x000f12d8u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987864) }
#       Number(USIZE, 987864)
20 30 d8 12 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 00564 LoadImm8 [Register(0x35), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 35 01 

# mem[t1107] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# 00567 Store8 [Register(0x35), Register(0x30)]
#       mem[t1107] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
06 35 30 

# :Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 0056a JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 6e 05 00 

# :Keyboard_poll_if_else_0_11 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Number(U8, 0)
# 0056e LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Number(U8, 0)
04 35 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 00571 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 00 00 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 3))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x18), Register(0x18)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# 00577 AddImm32IgnoreCarry [Register(0x18), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 3))
32 18 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 0057d ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
03 

# 0057e AddCarry32_1 [Register(0x30), Register(0x18), Register(0x30)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
30 30 18 30 

# 00582 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 00583 Load8 [Register(0x30), Register(0x15)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
05 30 15 

# if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# 00586 Cmp8 [Register(0x35), Register(0x15)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
15 35 15 

# 00589 JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
72 9d 05 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Keyboard_poll_if_true_0_16
# t343d <- 0n987868/0x000f12dcu32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }
# Number(USIZE, 987868)
# 0058d LoadImm32 [Register(0x1c), Constant32(0x000f12dc=987868)]
#       t343d <- 0n987868/0x000f12dcu32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }
#       Number(USIZE, 987868)
20 1c dc 12 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 00593 LoadImm8 [Register(0x35), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 35 01 

# mem[t343d] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# 00596 Store8 [Register(0x35), Register(0x1c)]
#       mem[t343d] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
06 35 1c 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 00599 JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 a9 05 00 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# t343d <- 0n987868/0x000f12dcu32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }
# Number(USIZE, 987868)
# 0059d LoadImm32 [Register(0x1c), Constant32(0x000f12dc=987868)]
#       t343d <- 0n987868/0x000f12dcu32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987864), Number(USIZE, 4)) }
#       Number(USIZE, 987868)
20 1c dc 12 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 005a3 LoadImm8 [Register(0x35), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 35 00 

# mem[t343d] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 005a6 Store8 [Register(0x35), Register(0x1c)]
#       mem[t343d] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 35 1c 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 005a9 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 005ab Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var a (Local a Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([64, 65, 66, 67])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([68])
# Var diff (Local diff Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_init_50_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_keyboard (global static "keyboard") Static(1005420) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_keyboard_enable (global static "keyboard_enable") Static(1005428) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_lcd_current (global static "lcd_current") Static(1005432) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_lcd_display (global static "lcd_display") Static(1005436) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_lcd_enable (global static "lcd_enable") Static(1005516) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_stdin (global static "stdin") Static(1005520) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_keyboard (global static "keyboard") Static(988592) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_keyboard_enable (global static "keyboard_enable") Static(988600) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_lcd_current (global static "lcd_current") Static(988604) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_lcd_display (global static "lcd_display") Static(988608) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_lcd_enable (global static "lcd_enable") Static(988688) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_RpnCalc_init_50_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_stdin (global static "stdin") Static(988692) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([56, 57, 58, 59]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 (tb2e9 Ident("s")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tf462 (tf462 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_keyboard (global static "keyboard") Static(988956) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_keyboard_enable (global static "keyboard_enable") Static(988964) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_lcd_current (global static "lcd_current") Static(988968) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_lcd_display (global static "lcd_display") Static(988972) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_lcd_enable (global static "lcd_enable") Static(989052) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_stdin (global static "stdin") Static(989056) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([76, 77, 78, 79]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([97]) [0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_keyboard (global static "keyboard") Static(988956) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_keyboard_enable (global static "keyboard_enable") Static(988964) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_lcd_current (global static "lcd_current") Static(988968) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_lcd_display (global static "lcd_display") Static(988972) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_lcd_enable (global static "lcd_enable") Static(989052) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_stdin (global static "stdin") Static(989056) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_keyboard (global static "keyboard") Static(988956) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_keyboard_enable (global static "keyboard_enable") Static(988964) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_lcd_current (global static "lcd_current") Static(988968) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_lcd_display (global static "lcd_display") Static(988972) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_lcd_enable (global static "lcd_enable") Static(989052) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_stdin (global static "stdin") Static(989056) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(USIZE)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_keyboard (global static "keyboard") Static(998140) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_keyboard_enable (global static "keyboard_enable") Static(998148) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_lcd_current (global static "lcd_current") Static(998152) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_lcd_display (global static "lcd_display") Static(998156) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_lcd_enable (global static "lcd_enable") Static(998236) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_stdin (global static "stdin") Static(998240) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([97]) [0]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_keyboard (global static "keyboard") Static(998140) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_keyboard_enable (global static "keyboard_enable") Static(998148) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_lcd_current (global static "lcd_current") Static(998152) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_lcd_display (global static "lcd_display") Static(998156) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_lcd_enable (global static "lcd_enable") Static(998236) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_stdin (global static "stdin") Static(998240) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([106]) [0]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_keyboard (global static "keyboard") Static(998140) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_keyboard_enable (global static "keyboard_enable") Static(998148) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_lcd_current (global static "lcd_current") Static(998152) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_lcd_display (global static "lcd_display") Static(998156) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_lcd_enable (global static "lcd_enable") Static(998236) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_stdin (global static "stdin") Static(998240) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_keyboard (global static "keyboard") Static(998504) None
# Var inline_RpnCalc_handle_mul32_32_12_keyboard_enable (global static "keyboard_enable") Static(998512) None
# Var inline_RpnCalc_handle_mul32_32_12_lcd_current (global static "lcd_current") Static(998516) None
# Var inline_RpnCalc_handle_mul32_32_12_lcd_display (global static "lcd_display") Static(998520) None
# Var inline_RpnCalc_handle_mul32_32_12_lcd_enable (global static "lcd_enable") Static(998600) None
# Var inline_RpnCalc_handle_mul32_32_12_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_mul32_32_12_stdin (global static "stdin") Static(998604) None
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([104]) [0]
# Var inline_RpnCalc_handle_mul32_32_12_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_keyboard (global static "keyboard") Static(999232) None
# Var inline_RpnCalc_handle_mul32_by10_13_keyboard_enable (global static "keyboard_enable") Static(999240) None
# Var inline_RpnCalc_handle_mul32_by10_13_lcd_current (global static "lcd_current") Static(999244) None
# Var inline_RpnCalc_handle_mul32_by10_13_lcd_display (global static "lcd_display") Static(999248) None
# Var inline_RpnCalc_handle_mul32_by10_13_lcd_enable (global static "lcd_enable") Static(999328) None
# Var inline_RpnCalc_handle_mul32_by10_13_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_mul32_by10_13_stdin (global static "stdin") Static(999332) None
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_15_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_15_c (Arg0 c Number(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_15_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_15_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_15_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_15_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_15_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_15_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_15_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_15_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_putc_16_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_16_c (Arg0 c Number(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_16_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_16_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_16_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_16_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_16_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_16_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_16_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_16_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_putc_17_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_17_c (Arg0 c Number(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_17_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_17_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_17_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_17_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_17_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_17_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_17_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_17_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_17_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_17_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_17_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_17_tac13 (tac13 Ident("c")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_17_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_putc_18_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_18_c (Arg0 c Number(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_18_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_18_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_18_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_18_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_18_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_18_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_18_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_18_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_putc_19_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_19_c (Arg0 c Number(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_19_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_19_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_19_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_19_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_19_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_19_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_19_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_19_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_19_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_19_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_19_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_19_tac13 (tac13 Ident("c")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_19_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_putc_20_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_20_c (Arg0 c Number(U8)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_20_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_20_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_20_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_20_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_20_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_20_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_20_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_20_t0 (static "lcd_enable" addr) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_putc_20_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_20_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_20_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_putc_20_tac13 (tac13 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_20_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([68]) [0]
# Var inline_RpnCalc_handle_putc_21_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_21_c (Arg0 c Number(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_21_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_21_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_21_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_21_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_21_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_21_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_21_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_21_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_21_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_21_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_21_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_21_tac13 (tac13 Ident("c")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_21_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_putc_22_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_22_c (Arg0 c Number(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_22_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_22_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_22_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_22_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_22_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_22_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_22_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_22_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_22_tac13 (tac13 Ident("c")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([105]) [0]
# Var inline_RpnCalc_handle_putc_23_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_23_c (Arg0 c Number(U8)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_23_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_23_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_23_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_23_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_23_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_23_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_23_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_23_t0 (static "lcd_enable" addr) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_putc_23_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_23_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_23_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_23_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([68]) [0]
# Var inline_RpnCalc_handle_putc_24_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_putc_24_c (Arg0 c Number(U8)) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_24_keyboard (global static "keyboard") Static(1002508) None
# Var inline_RpnCalc_handle_putc_24_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_RpnCalc_handle_putc_24_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_RpnCalc_handle_putc_24_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_RpnCalc_handle_putc_24_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_RpnCalc_handle_putc_24_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_putc_24_stdin (global static "stdin") Static(1002608) None
# Var inline_RpnCalc_handle_putc_24_t0 (static "lcd_enable" addr) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_putc_24_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_24_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_24_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([105])
# Var inline_RpnCalc_handle_putc_24_tac13 (tac13 Ident("c")) Reg(U8) Some([104])
# Var inline_RpnCalc_handle_putc_24_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([68]) [0]
# Var inline_RpnCalc_handle_stack_get_48_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_get_48_keyboard (global static "keyboard") Static(1005056) None
# Var inline_RpnCalc_handle_stack_get_48_keyboard_enable (global static "keyboard_enable") Static(1005064) None
# Var inline_RpnCalc_handle_stack_get_48_lcd_current (global static "lcd_current") Static(1005068) None
# Var inline_RpnCalc_handle_stack_get_48_lcd_display (global static "lcd_display") Static(1005072) None
# Var inline_RpnCalc_handle_stack_get_48_lcd_enable (global static "lcd_enable") Static(1005152) None
# Var inline_RpnCalc_handle_stack_get_48_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_stdin (global static "stdin") Static(1005156) None
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_52_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_pop_52_keyboard (global static "keyboard") Static(1005784) None
# Var inline_RpnCalc_handle_stack_pop_52_keyboard_enable (global static "keyboard_enable") Static(1005792) None
# Var inline_RpnCalc_handle_stack_pop_52_lcd_current (global static "lcd_current") Static(1005796) None
# Var inline_RpnCalc_handle_stack_pop_52_lcd_display (global static "lcd_display") Static(1005800) None
# Var inline_RpnCalc_handle_stack_pop_52_lcd_enable (global static "lcd_enable") Static(1005880) None
# Var inline_RpnCalc_handle_stack_pop_52_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_stdin (global static "stdin") Static(1005884) None
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_52_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_pop_53_keyboard (global static "keyboard") Static(1005784) None
# Var inline_RpnCalc_handle_stack_pop_53_keyboard_enable (global static "keyboard_enable") Static(1005792) None
# Var inline_RpnCalc_handle_stack_pop_53_lcd_current (global static "lcd_current") Static(1005796) None
# Var inline_RpnCalc_handle_stack_pop_53_lcd_display (global static "lcd_display") Static(1005800) None
# Var inline_RpnCalc_handle_stack_pop_53_lcd_enable (global static "lcd_enable") Static(1005880) None
# Var inline_RpnCalc_handle_stack_pop_53_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_stdin (global static "stdin") Static(1005884) None
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_53_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_54_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_push_54_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_stack_push_54_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_stack_push_54_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_stack_push_54_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_stack_push_54_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_stack_push_54_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t531d (t531d Ident("n")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_54_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_54_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_push_55_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_stack_push_55_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_stack_push_55_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_stack_push_55_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_stack_push_55_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_stack_push_55_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t531d (t531d Ident("n")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_55_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_55_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_push_56_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_stack_push_56_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_stack_push_56_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_stack_push_56_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_stack_push_56_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_stack_push_56_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t531d (t531d Ident("n")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_56_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_56_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_push_57_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_stack_push_57_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_stack_push_57_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_stack_push_57_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_stack_push_57_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_stack_push_57_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t531d (t531d Ident("n")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_57_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_57_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_push_58_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_stack_push_58_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_stack_push_58_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_stack_push_58_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_stack_push_58_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_stack_push_58_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_t531d (t531d Ident("n")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_58_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_59_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_handle_stack_push_59_keyboard (global static "keyboard") Static(1006148) None
# Var inline_RpnCalc_handle_stack_push_59_keyboard_enable (global static "keyboard_enable") Static(1006156) None
# Var inline_RpnCalc_handle_stack_push_59_lcd_current (global static "lcd_current") Static(1006160) None
# Var inline_RpnCalc_handle_stack_push_59_lcd_display (global static "lcd_display") Static(1006164) None
# Var inline_RpnCalc_handle_stack_push_59_lcd_enable (global static "lcd_enable") Static(1006244) None
# Var inline_RpnCalc_handle_stack_push_59_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_stdin (global static "stdin") Static(1006248) None
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t531d (t531d Ident("n")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_stack_push_59_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_59_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var keyboard (global static "keyboard") Static(988228) None
# Var keyboard_enable (global static "keyboard_enable") Static(988236) None
# Var lcd_current (global static "lcd_current") Static(988240) None
# Var lcd_display (global static "lcd_display") Static(988244) None
# Var lcd_enable (global static "lcd_enable") Static(988324) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var product (Local product Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var quotient (Local quotient Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var stack (Local stack Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([106])
# Var stack_count_usize (Local stack_count_usize Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var stdin (global static "stdin") Static(988328) None
# Var sum (Local sum Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([69]) [113]
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([56, 57, 58, 59])
# Var t18a9 (t18a9 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })) Reg(U8) Some([69])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([56, 57, 58, 59])
# Var t2398 (t2398 Call(Call { function: "print_dec32", parameters: [Ident("product")] })) Reg(U8) Some([69])
# Var t24a4 (t24a4 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var t2597 (t2597 Number(U8, 43)) Reg(U8) Some([113]) [43]
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([56, 57, 58, 59])
# Var t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([69]) [57]
# Var t2af9 (t2af9 Call(Call { function: "putc", parameters: [Number(U8, 69)] })) Reg(U8) Some([69])
# Var t2d0c (t2d0c Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })) Reg(U8) Some([69])
# Var t352b (t352b Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })) Reg(U8) Some([69])
# Var t39b5 (t39b5 Number(U8, 115)) Reg(U8) Some([113]) [115]
# Var t3f70 (t3f70 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) Reg(U32) Some([56, 57, 58, 59])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([60, 61, 62, 63])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([113])
# Var t49a (t49a Number(U8, 100)) Reg(U8) Some([69]) [100]
# Var t4e08 (t4e08 Number(U8, 99)) Reg(U8) Some([69]) [99]
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([96])
# Var t670d (t670d Ident("sum")) Reg(U32) Some([56, 57, 58, 59])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t701d (t701d Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })) Reg(U8) Some([69])
# Var t7e7f (t7e7f Call(Call { function: "putc", parameters: [Number(U8, 58)] })) Reg(U8) Some([69])
# Var t7f48 (t7f48 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }) Reg(U32) Some([72, 73, 74, 75])
# Var t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([69])
# Var t8103 (t8103 Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })) Reg(U8) Some([69])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([100, 101, 102, 103])
# Var t8b2f (t8b2f Number(U8, 45)) Reg(U8) Some([113]) [45]
# Var t9046 (t9046 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })) Reg(U8) Some([69])
# Var t969e (t969e Number(U8, 42)) Reg(U8) Some([113]) [42]
# Var t9c38 (t9c38 Number(U8, 82)) Reg(U8) Some([69]) [82]
# Var ta378 (ta378 Call(Call { function: "print_dec32", parameters: [Ident("sum")] })) Reg(U8) Some([69])
# Var ta622 (ta622 Call(Call { function: "print_dec8", parameters: [Ident("i")] })) Reg(U8) Some([69])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([69]) [32]
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var tacf6 (tacf6 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })) Reg(U32) Some([56, 57, 58, 59])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([56, 57, 58, 59])
# Var tb087 (tb087 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })) Reg(U8) Some([69])
# Var tb1ab (tb1ab Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })) Reg(U8) Some([69])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var tb303 (tb303 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([69])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })) Reg(U32) Some([60, 61, 62, 63])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var tb507 (tb507 Number(U8, 69)) Reg(U8) Some([69]) [69]
# Var tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([56, 57, 58, 59])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }) Reg(U32) Some([72, 73, 74, 75])
# Var tca36 (tca36 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })) Reg(U8) Some([69])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([69])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([104]) [10]
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([68])
# Var te25f (te25f Call(Call { function: "print_dec32", parameters: [Ident("diff")] })) Reg(U8) Some([69])
# Var te668 (te668 Number(U8, 47)) Reg(U8) Some([113]) [47]
# Var tebdf (tebdf Number(U8, 58)) Reg(U8) Some([104]) [58]
# Var tec99 (tec99 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([69])
# Var tf48d (tf48d Number(U8, 48)) Reg(U8) Some([69]) [48]
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([96]) [1]
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([72, 73, 74, 75])
# Consts t1501: 0n113/0x71u8
# Consts t2ac9: 0n57/0x39u8
# Consts t49a: 0n100/0x64u8
# Consts t4e08: 0n99/0x63u8
# Consts tac5f: 0n32/0x20u8
# Consts tb507: 0n69/0x45u8
# Consts tebdf: 0n58/0x3au8
# Consts tf48d: 0n48/0x30u8
# 005b0 Copy32 [Register(0x00), Register(0x40)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [64, 65, 66, 67].
21 00 40 

# 005b3 Copy8 [Register(0x04), Register(0x44)]
#       Save function parameter 'ch' registers [4] to locals [68].
0b 04 44 

# tbc15 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(28,5))
# Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 005b6 Copy32 [Register(0x40), Register(0x38)]
#       tbc15 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(28,5))
#       Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# stack <- tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(28,5))
# Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 005b9 Copy32 [Register(0x38), Register(0x6c)]
#       stack <- tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(28,5))
#       Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 38 6c 

# a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
# Number(U8, 0)
# 005bc LoadImm8 [Register(0x38), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
#       Number(U8, 0)
04 38 00 

# b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
# Number(U8, 0)
# 005bf LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
#       Number(U8, 0)
04 3c 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t2597 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Number(U8, 43)
# 005c2 LoadImm8 [Register(0x71), Constant8(0x2b=43)]
#       t2597 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
#       Number(U8, 43)
04 71 2b 

# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# 005c5 Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
15 44 71 

# 005c8 JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
72 d0 05 00 

# 005cc JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
70 d7 05 00 

# :RpnCalc_handle_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 005d0 LoadImm8 [Register(0x70), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 70 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005d3 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 2e 06 00 

# :RpnCalc_handle_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8b2f <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Number(U8, 45)
# 005d7 LoadImm8 [Register(0x71), Constant8(0x2d=45)]
#       t8b2f <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
#       Number(U8, 45)
04 71 2d 

# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# 005da Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
15 44 71 

# 005dd JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
72 e5 05 00 

# 005e1 JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
70 ec 05 00 

# :RpnCalc_handle_if_true_1_3 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 005e5 LoadImm8 [Register(0x70), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 70 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005e8 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 2e 06 00 

# :RpnCalc_handle_if_else_1_4 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t969e <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Number(U8, 42)
# 005ec LoadImm8 [Register(0x71), Constant8(0x2a=42)]
#       t969e <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
#       Number(U8, 42)
04 71 2a 

# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# 005ef Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
15 44 71 

# 005f2 JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
72 fa 05 00 

# 005f6 JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
70 01 06 00 

# :RpnCalc_handle_if_true_2_5 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 005fa LoadImm8 [Register(0x70), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 70 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 005fd JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 2e 06 00 

# :RpnCalc_handle_if_else_2_6 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# te668 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Number(U8, 47)
# 00601 LoadImm8 [Register(0x71), Constant8(0x2f=47)]
#       te668 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
#       Number(U8, 47)
04 71 2f 

# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# 00604 Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
15 44 71 

# 00607 JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
72 0f 06 00 

# 0060b JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
70 16 06 00 

# :RpnCalc_handle_if_true_3_7 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 0060f LoadImm8 [Register(0x70), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 70 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 00612 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 2e 06 00 

# :RpnCalc_handle_if_else_3_8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 00616 LoadImm8 [Register(0x71), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 71 73 

# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 00619 Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 44 71 

# 0061c JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 24 06 00 

# 00620 JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 2b 06 00 

# :RpnCalc_handle_if_true_4_9 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 00624 LoadImm8 [Register(0x70), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 70 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 00627 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 2e 06 00 

# :RpnCalc_handle_if_else_4_10 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0062b LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 70 00 

# :RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Ident("stack_needed")
# 0062e Copy8 [Register(0x70), Register(0x71)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Ident("stack_needed")
0b 70 71 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Number(U8, 0)
# 00631 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# 00634 Cmp8 [Register(0x71), Register(0x60)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
15 71 60 

# 00637 JcImm [Label24(RpnCalc_handle_if_else_0_13)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
71 e1 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 0063b Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 0063e Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 48 4c 

# 00641 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 4c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 00647 Load8 [Register(0x4c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 4c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 0064a LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 0064d Cmp8 [Register(0x60), Register(0x61)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 60 61 

# 00650 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 dd 06 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 00654 Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 48 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 00657 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 48 50 

# 0065a AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 00660 Load32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 50 54 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 00663 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 00666 Copy32 [Register(0x54), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 54 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00669 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 50 54 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 0066c Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 54 5c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0066f Copy32 [Register(0x50), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 50 58 

# 00672 AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 58 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00678 Load32 [Register(0x58), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 58 54 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 0067b LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00681 Mul8_16 [Register(0x54), Register(0x00), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 54 00 54 

# 00685 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 56 00 

# 00688 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 57 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 0068b ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 0068c AddCarry32_1 [Register(0x5c), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 5c 54 54 

# 00690 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00691 Store32_1 [Register(0x4c), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 4c 54 

# 00694 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00695 Copy32 [Register(0x50), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 50 58 

# 00698 AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 58 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0069e Copy32 [Register(0x50), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 50 58 

# 006a1 AddImm32IgnoreCarry [Register(0x58), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 58 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 006a7 Load32 [Register(0x58), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 58 54 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 006aa Copy32 [Register(0x54), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 54 4c 

# 006ad AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 4c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 006b3 Store32_1 [Register(0x4c), Register(0x58)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 4c 58 

# 006b6 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 006b7 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 48 50 

# 006ba AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 006c0 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 4c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 006c6 Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 4c 50 

# 006c9 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 006ca Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 48 4c 

# 006cd AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 4c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 006d3 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 006d6 Store8 [Register(0x61), Register(0x4c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 61 4c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 006d9 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 dd 06 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 006dd JmpImm [Label24(RpnCalc_handle_if_end_11)]
#       goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
70 e1 06 00 

# :RpnCalc_handle_if_else_0_13 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_end_11
# t7f48 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }
# Ident("stack")
# 006e1 Copy32 [Register(0x6c), Register(0x48)]
#       t7f48 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }
#       Ident("stack")
21 6c 48 

# tbf93 <- t7f48 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
# 006e4 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       tbf93 <- t7f48 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
32 48 40 00 00 00 

# stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 006ea Load32 [Register(0x48), Register(0x48)]
#       stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 48 48 

# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(U8, 0)) }
# Index("stack_count_usize", Number(U8, 0))
# 006ed Copy8 [Register(0x48), Register(0x6a)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(U8, 0)) }
#       Index("stack_count_usize", Number(U8, 0))
0b 48 6a 

# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 006f0 Copy8 [Register(0x70), Register(0x71)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 70 71 

# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 006f3 Copy8 [Register(0x6a), Register(0x60)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 6a 60 

# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 006f6 Cmp8 [Register(0x71), Register(0x60)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 71 60 

# 006f9 JcImm [Label24(RpnCalc_handle_if_else_0_16)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 20 08 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# tb507 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 69)] })
# Number(U8, 69)
# 006fd LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       tb507 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 69)] })
#       Number(U8, 69)
04 45 45 

# inline_RpnCalc_handle_putc_15_c <- tb507 U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 69)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_c <- tb507 U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 69)] })\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00700 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 00702 LoadImm32 [Register(0x3c), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 00708 Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 68 

# inline_RpnCalc_handle_putc_15_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 0070b LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_15_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 0070e Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 68 69 

# 00711 JzImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 42 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_15_putc_if_true_0_1
# inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00715 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 00718 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 0071a Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 0071c Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 0071e Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 00720 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00726 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 30 07 00 00 

# 0072c JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 00730 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 00736 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 00738 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 0073a Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 0073c Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 0073e JmpImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 42 07 00 

# :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_end_0
# goto inline_RpnCalc_handle_putc_15_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_15_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_15_function_end_putc None
# inline_RpnCalc_handle_putc_15_function_end_putc
# t9c38 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 00742 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 45 52 

# inline_RpnCalc_handle_putc_16_c <- t9c38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_c <- t9c38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00745 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_16_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 00747 LoadImm32 [Register(0x3c), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_16_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 0074d Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 68 

# inline_RpnCalc_handle_putc_16_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 00750 LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_16_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 00753 Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 68 69 

# 00756 JzImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 87 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_16_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0075a Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 0075d Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 0075f Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 00761 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 00763 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 00765 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 0076b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 75 07 00 00 

# 00771 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 00775 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 0077b Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 0077d Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 0077f Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 00781 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00783 JmpImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 87 07 00 

# :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_end_0
# goto inline_RpnCalc_handle_putc_16_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_16_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_16_function_end_putc None
# inline_RpnCalc_handle_putc_16_function_end_putc
# t9c38 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 00787 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 45 52 

# inline_RpnCalc_handle_putc_17_c <- t9c38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_c <- t9c38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0078a Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_17_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 0078c LoadImm32 [Register(0x3c), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_17_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 00792 Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 68 

# inline_RpnCalc_handle_putc_17_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 00795 LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_17_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 00798 Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 68 69 

# 0079b JzImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 cc 07 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_17_putc_if_true_0_1
# inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0079f Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_17_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 007a2 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 007a4 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 007a6 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 007a8 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 007aa AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 007b0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ba 07 00 00 

# 007b6 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 007ba AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 007c0 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 007c2 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 007c4 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 007c6 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 007c8 JmpImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 cc 07 00 

# :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_end_0
# goto inline_RpnCalc_handle_putc_17_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_17_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_17_function_end_putc None
# inline_RpnCalc_handle_putc_17_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 007cc LoadImm8 [Register(0x68), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 68 0a 

# inline_RpnCalc_handle_putc_18_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 007cf Copy8 [Register(0x68), Register(0x45)]
#       inline_RpnCalc_handle_putc_18_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 68 45 

# inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 007d2 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_18_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 007d4 LoadImm32 [Register(0x3c), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_18_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 007da Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 68 

# inline_RpnCalc_handle_putc_18_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 007dd LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_18_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 007e0 Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 68 69 

# 007e3 JzImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 14 08 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_18_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 007e7 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 007ea Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 007ec Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 007ee Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 007f0 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 007f2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 007f8 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 02 08 00 00 

# 007fe JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 00802 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 00808 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 0080a Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 0080c Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 0080e Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00810 JmpImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 14 08 00 

# :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_end_0
# goto inline_RpnCalc_handle_putc_18_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_18_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_18_function_end_putc None
# inline_RpnCalc_handle_putc_18_function_end_putc
# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(U8, 1)) }
# Number(U8, 1)
# 00814 LoadImm8 [Register(0x60), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(U8, 1)) }
#       Number(U8, 1)
04 60 01 

# return Some(tfcd) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(U8, 1)) }
# 00817 Copy8 [Register(0x60), Register(0x00)]
#       return Some(tfcd) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(U8, 1)) }
0b 60 00 

# 0081a JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 0081c JmpImm [Label24(RpnCalc_handle_if_end_14)]
#       goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
70 20 08 00 

# :RpnCalc_handle_if_else_0_16 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Ident("stack_needed")
# 00820 Copy8 [Register(0x70), Register(0x71)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Ident("stack_needed")
0b 70 71 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Number(U8, 0)
# 00823 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# 00826 Cmp8 [Register(0x71), Register(0x60)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
15 71 60 

# 00829 JcImm [Label24(RpnCalc_handle_if_else_0_19)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
71 81 08 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# 0082d Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
#       Ident("stack")
21 6c 48 

# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 00830 Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 48 38 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00833 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 38 4c 

# 00836 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0083c Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 38 4c 

# 0083f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00845 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00848 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 0084e Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 48 4c 

# 00851 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# inline_RpnCalc_handle_stack_pop_52_t587d <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t587d <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(12,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_values <- inline_RpnCalc_handle_stack_pop_52_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00852 Copy32 [Register(0x38), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_values <- inline_RpnCalc_handle_stack_pop_52_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(12,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 38 48 

# inline_RpnCalc_handle_stack_pop_52_tf90a <- inline_RpnCalc_handle_stack_pop_52_values U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00855 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_52_tf90a <- inline_RpnCalc_handle_stack_pop_52_values U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 48 50 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00858 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 38 4c 

# 0085b AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00861 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00864 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 0086a Mul8_16 [Register(0x48), Register(0x00), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 48 00 38 

# 0086e LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 3a 00 

# 00871 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 3b 00 

# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00874 ClearCarry []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00875 AddCarry32_1 [Register(0x50), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 50 38 38 

# 00879 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 0087a Load32 [Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 38 38 

# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 0087d JmpImm [Label24(RpnCalc_handle_if_end_17)]
#       goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
70 81 08 00 

# :RpnCalc_handle_if_else_0_19 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# Ident("stack_needed")
# 00881 Copy8 [Register(0x70), Register(0x71)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
#       Ident("stack_needed")
0b 70 71 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# Number(U8, 1)
# 00884 LoadImm8 [Register(0x60), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
#       Number(U8, 1)
04 60 01 

# if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# 00887 Cmp8 [Register(0x71), Register(0x60)]
#       if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
15 71 60 

# 0088a JcImm [Label24(RpnCalc_handle_if_else_0_22)]
#       if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
71 e2 08 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# 0088e Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
#       Ident("stack")
21 6c 48 

# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 00891 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 48 3c 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00894 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 4c 

# 00897 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0089d Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 4c 

# 008a0 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 008a6 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 008a9 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 008af Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 48 4c 

# 008b2 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# inline_RpnCalc_handle_stack_pop_53_t587d <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t587d <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(12,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_values <- inline_RpnCalc_handle_stack_pop_53_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 008b3 Copy32 [Register(0x3c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_values <- inline_RpnCalc_handle_stack_pop_53_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(12,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 3c 48 

# inline_RpnCalc_handle_stack_pop_53_tf90a <- inline_RpnCalc_handle_stack_pop_53_values U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 008b6 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_53_tf90a <- inline_RpnCalc_handle_stack_pop_53_values U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 48 50 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 008b9 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 4c 

# 008bc AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 008c2 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 008c5 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 008cb Mul8_16 [Register(0x48), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 48 00 3c 

# 008cf LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 3e 00 

# 008d2 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 3f 00 

# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 008d5 ClearCarry []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 008d6 AddCarry32_1 [Register(0x50), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 50 3c 3c 

# 008da AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 008db Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 

# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 008de JmpImm [Label24(RpnCalc_handle_if_end_20)]
#       goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
70 e2 08 00 

# :RpnCalc_handle_if_else_0_22 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t2597 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Number(U8, 43)
# 008e2 LoadImm8 [Register(0x71), Constant8(0x2b=43)]
#       t2597 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
#       Number(U8, 43)
04 71 2b 

# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# 008e5 Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
15 44 71 

# 008e8 JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
72 f0 08 00 

# 008ec JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
70 57 0a 00 

# :RpnCalc_handle_if_true_0_24 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 008f0 Copy32 [Register(0x3c), Register(0x40)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 40 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 008f3 Copy32 [Register(0x38), Register(0x64)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 38 64 

# sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 008f6 ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 008f7 AddCarry32_1 [Register(0x40), Register(0x64), Register(0x64)]
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 40 64 64 

# 008fb AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 008fc Copy32 [Register(0x64), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 64 38 

# None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 008ff Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 00902 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 71 

# 00904 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 70 

# 00906 Push8 [Register(0x6f)]
#       Saving reg0x6f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6f 

# 00908 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6e 

# 0090a Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6d 

# 0090c Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6c 

# 0090e Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6a 

# 00910 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 69 

# 00912 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 68 

# 00914 Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 67 

# 00916 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 66 

# 00918 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 65 

# 0091a Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 64 

# 0091c Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 61 

# 0091e Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 60 

# 00920 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5f 

# 00922 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5e 

# 00924 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5d 

# 00926 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5c 

# 00928 Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5b 

# 0092a Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5a 

# 0092c Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 59 

# 0092e Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 58 

# 00930 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 57 

# 00932 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 56 

# 00934 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 55 

# 00936 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 54 

# 00938 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 53 

# 0093a Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 52 

# 0093c Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 51 

# 0093e Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 50 

# 00940 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4f 

# 00942 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4e 

# 00944 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4d 

# 00946 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4c 

# 00948 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3b 

# 0094a Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3a 

# 0094c Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 39 

# 0094e Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 38 

# 00950 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00956 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 60 09 00 00 

# 0095c JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 c8 27 00 

# 00960 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00966 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 38 

# 00968 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 39 

# 0096a Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3a 

# 0096c Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3b 

# 0096e Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4c 

# 00970 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4d 

# 00972 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4e 

# 00974 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4f 

# 00976 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 50 

# 00978 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 51 

# 0097a Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 52 

# 0097c Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 53 

# 0097e Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 54 

# 00980 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 55 

# 00982 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 56 

# 00984 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 57 

# 00986 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 58 

# 00988 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 59 

# 0098a Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5a 

# 0098c Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5b 

# 0098e Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5c 

# 00990 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5d 

# 00992 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5e 

# 00994 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5f 

# 00996 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 60 

# 00998 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 61 

# 0099a Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 64 

# 0099c Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 65 

# 0099e Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 66 

# 009a0 Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 67 

# 009a2 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 68 

# 009a4 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 69 

# 009a6 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6a 

# 009a8 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6c 

# 009aa Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6d 

# 009ac Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6e 

# 009ae Pop8 [Register(0x6f)]
#       Restoring reg0x6f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6f 

# 009b0 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 70 

# 009b2 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 71 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 009b4 LoadImm8 [Register(0x68), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 68 0a 

# inline_RpnCalc_handle_putc_19_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 009b7 Copy8 [Register(0x68), Register(0x45)]
#       inline_RpnCalc_handle_putc_19_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 68 45 

# inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 009ba Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_19_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 009bc LoadImm32 [Register(0x3c), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_19_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 009c2 Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 68 

# inline_RpnCalc_handle_putc_19_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 009c5 LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_19_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 009c8 Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 68 69 

# 009cb JzImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 fc 09 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_19_putc_if_true_0_1
# inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 009cf Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_19_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 009d2 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 009d4 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 009d6 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 009d8 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 009da AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 009e0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ea 09 00 00 

# 009e6 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 009ea AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 009f0 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 009f2 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 009f4 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 009f6 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 009f8 JmpImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 fc 09 00 

# :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_end_0
# goto inline_RpnCalc_handle_putc_19_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_19_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_19_function_end_putc None
# inline_RpnCalc_handle_putc_19_function_end_putc
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# 009fc Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("stack")
21 6c 48 

# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 009ff Copy32 [Register(0x64), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 64 38 

# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 00a02 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 48 3c 

# inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t587d <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t587d <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_values <- inline_RpnCalc_handle_stack_push_54_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00a05 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_values <- inline_RpnCalc_handle_stack_push_54_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 3c 40 

# inline_RpnCalc_handle_stack_push_54_tf90a <- inline_RpnCalc_handle_stack_push_54_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00a08 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_54_tf90a <- inline_RpnCalc_handle_stack_push_54_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 40 48 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00a0b Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00a0e AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00a14 Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00a17 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00a1d Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 00a21 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 00a24 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00a27 ClearCarry []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00a28 AddCarry32_1 [Register(0x48), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 48 40 40 

# 00a2c AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_54_t531d <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t531d <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00a2d Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 00a30 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00a31 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00a34 AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00a3a Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00a3d AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00a43 Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00a46 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 00a49 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00a4f Store32_1 [Register(0x38), Register(0x64)]
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 64 

# 00a52 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_54_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00a53 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_0_25 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8b2f <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Number(U8, 45)
# 00a57 LoadImm8 [Register(0x71), Constant8(0x2d=45)]
#       t8b2f <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
#       Number(U8, 45)
04 71 2d 

# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# 00a5a Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
15 44 71 

# 00a5d JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
72 65 0a 00 

# 00a61 JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
70 d4 0b 00 

# :RpnCalc_handle_if_true_1_26 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 00a65 Copy32 [Register(0x3c), Register(0x40)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 40 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 00a68 Copy32 [Register(0x38), Register(0x64)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 38 64 

# diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 00a6b Copy32 [Register(0x64), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 64 00 

# 00a6e Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 

# 00a70 Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 

# 00a72 Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 

# 00a74 Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 

# 00a76 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 

# 00a7c ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 

# 00a7d AddCarry32_1 [Register(0x40), Register(0x00), Register(0x38)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 40 00 38 

# 00a81 AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 

# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 00a82 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 00a85 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 71 

# 00a87 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 70 

# 00a89 Push8 [Register(0x6f)]
#       Saving reg0x6f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6f 

# 00a8b Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6e 

# 00a8d Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6d 

# 00a8f Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6c 

# 00a91 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6a 

# 00a93 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 69 

# 00a95 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 68 

# 00a97 Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 67 

# 00a99 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 66 

# 00a9b Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 65 

# 00a9d Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 64 

# 00a9f Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 61 

# 00aa1 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 60 

# 00aa3 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5f 

# 00aa5 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5e 

# 00aa7 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5d 

# 00aa9 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5c 

# 00aab Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5b 

# 00aad Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5a 

# 00aaf Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 59 

# 00ab1 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 58 

# 00ab3 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 57 

# 00ab5 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 56 

# 00ab7 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 55 

# 00ab9 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 54 

# 00abb Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 53 

# 00abd Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 52 

# 00abf Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 51 

# 00ac1 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 50 

# 00ac3 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4f 

# 00ac5 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4e 

# 00ac7 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4d 

# 00ac9 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4c 

# 00acb Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3b 

# 00acd Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3a 

# 00acf Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 39 

# 00ad1 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 38 

# 00ad3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00ad9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c e3 0a 00 00 

# 00adf JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 c8 27 00 

# 00ae3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00ae9 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 38 

# 00aeb Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 39 

# 00aed Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3a 

# 00aef Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3b 

# 00af1 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4c 

# 00af3 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4d 

# 00af5 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4e 

# 00af7 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4f 

# 00af9 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 50 

# 00afb Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 51 

# 00afd Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 52 

# 00aff Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 53 

# 00b01 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 54 

# 00b03 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 55 

# 00b05 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 56 

# 00b07 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 57 

# 00b09 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 58 

# 00b0b Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 59 

# 00b0d Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5a 

# 00b0f Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5b 

# 00b11 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5c 

# 00b13 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5d 

# 00b15 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5e 

# 00b17 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5f 

# 00b19 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 60 

# 00b1b Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 61 

# 00b1d Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 64 

# 00b1f Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 65 

# 00b21 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 66 

# 00b23 Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 67 

# 00b25 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 68 

# 00b27 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 69 

# 00b29 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6a 

# 00b2b Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6c 

# 00b2d Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6d 

# 00b2f Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6e 

# 00b31 Pop8 [Register(0x6f)]
#       Restoring reg0x6f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6f 

# 00b33 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 70 

# 00b35 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 71 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 00b37 LoadImm8 [Register(0x68), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 68 0a 

# inline_RpnCalc_handle_putc_20_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00b3a Out0 [Register(0x68)]
#       IoWrite0
68 68 

# inline_RpnCalc_handle_putc_20_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 00b3c LoadImm32 [Register(0x40), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_20_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 40 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 00b42 Load8 [Register(0x40), Register(0x69)]
#       inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 40 69 

# inline_RpnCalc_handle_putc_20_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 00b45 LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_20_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 44 00 

# if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 00b48 Cmp8 [Register(0x69), Register(0x44)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 69 44 

# 00b4b JzImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 7c 0b 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_20_putc_if_true_0_1
# inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00b4f Copy8 [Register(0x68), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_20_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 68 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 00b52 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 00b54 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 00b56 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 00b58 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 00b5a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00b60 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 6a 0b 00 00 

# 00b66 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 00b6a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 00b70 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 00b72 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 00b74 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 00b76 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00b78 JmpImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 7c 0b 00 

# :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_end_0
# goto inline_RpnCalc_handle_putc_20_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_20_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_20_function_end_putc None
# inline_RpnCalc_handle_putc_20_function_end_putc
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# 00b7c Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
#       Ident("stack")
21 6c 48 

# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 00b7f Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 48 3c 

# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t587d <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t587d <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_values <- inline_RpnCalc_handle_stack_push_55_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00b82 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_values <- inline_RpnCalc_handle_stack_push_55_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 3c 40 

# inline_RpnCalc_handle_stack_push_55_tf90a <- inline_RpnCalc_handle_stack_push_55_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00b85 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_55_tf90a <- inline_RpnCalc_handle_stack_push_55_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 40 48 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00b88 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00b8b AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00b91 Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00b94 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00b9a Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 00b9e LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 00ba1 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00ba4 ClearCarry []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00ba5 AddCarry32_1 [Register(0x48), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 48 40 40 

# 00ba9 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_55_t531d <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t531d <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00baa Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 00bad Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00bae Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00bb1 AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00bb7 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00bba AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00bc0 Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00bc3 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 00bc6 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00bcc Store32_1 [Register(0x38), Register(0x64)]
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 64 

# 00bcf Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_55_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00bd0 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_1_27 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t969e <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Number(U8, 42)
# 00bd4 LoadImm8 [Register(0x71), Constant8(0x2a=42)]
#       t969e <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
#       Number(U8, 42)
04 71 2a 

# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# 00bd7 Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
15 44 71 

# 00bda JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
72 e2 0b 00 

# 00bde JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
70 86 0f 00 

# :RpnCalc_handle_if_true_2_28 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 00be2 Copy32 [Register(0x3c), Register(0x40)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 40 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 00be5 Copy32 [Register(0x38), Register(0x64)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 64 

# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 00be8 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 40 38 

# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 00beb Copy32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 64 40 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 00bee Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 00bf1 Copy32 [Register(0x40), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 40 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00bf4 Mul8_16 [Register(0x3c), Register(0x64), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 64 48 

# 00bf8 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4a 00 

# 00bfb LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00bfe Copy8 [Register(0x3d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00c01 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 50 00 00 00 00 

# 00c07 Copy8 [Register(0x68), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 68 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00c0a Copy8 [Register(0x65), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00c0d LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 4c 00 00 00 00 

# 00c13 Copy8 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 44 4c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00c16 Mul8_16 [Register(0x50), Register(0x4c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 50 4c 4c 

# 00c1a LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4e 00 

# 00c1d LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 00c20 Copy8 [Register(0x4d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 4d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 00c23 Copy8 [Register(0x60), Register(0x4f)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 60 4f 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 00c26 Copy8 [Register(0x4c), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 4c 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 00c29 Copy8 [Register(0x60), Register(0x4e)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 60 4e 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00c2c LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 00c2f Copy8 [Register(0x61), Register(0x4d)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 61 4d 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00c32 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00c35 Copy8 [Register(0x61), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 61 4c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00c38 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00c39 AddCarry32_1 [Register(0x48), Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 48 4c 48 

# 00c3d AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00c3e Copy8 [Register(0x65), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00c41 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 4c 00 00 00 00 

# 00c47 Copy8 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 44 4c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00c4a Mul8_16 [Register(0x3c), Register(0x4c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 3c 4c 4c 

# 00c4e LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4e 00 

# 00c51 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00c54 Copy8 [Register(0x3d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00c57 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 50 00 00 00 00 

# 00c5d Copy8 [Register(0x68), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 68 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 00c60 Mul8_16 [Register(0x50), Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 50 64 3c 

# 00c64 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3e 00 

# 00c67 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00c6a Copy32 [Register(0x4c), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 4c 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00c6d ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00c6e AddCarry32_1 [Register(0x64), Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 64 3c 4c 

# 00c72 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 00c73 Copy8 [Register(0x4e), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 4e 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 00c76 Copy8 [Register(0x68), Register(0x4f)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 68 4f 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 00c79 Copy8 [Register(0x4d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 4d 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 00c7c Copy8 [Register(0x68), Register(0x4e)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 68 4e 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 00c7f Copy8 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 4c 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 00c82 Copy8 [Register(0x68), Register(0x4d)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 68 4d 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00c85 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00c88 Copy8 [Register(0x61), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 61 4c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00c8b Copy32 [Register(0x4c), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 4c 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00c8e ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00c8f AddCarry32_1 [Register(0x48), Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 48 64 3c 

# 00c93 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00c94 Copy32 [Register(0x3c), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 48 

# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 00c97 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# Index("a", Number(U8, 3))
# 00c9d Copy8 [Register(0x3b), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
#       Index("a", Number(U8, 3))
0b 3b 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# 00ca0 Copy8 [Register(0x45), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
0b 45 3d 

# inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# Index("a", Number(U8, 2))
# 00ca3 Copy8 [Register(0x3a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
#       Index("a", Number(U8, 2))
0b 3a 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# 00ca6 Copy8 [Register(0x45), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
0b 45 3c 

# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 00ca9 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 64 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# Index("b", Number(U8, 3))
# 00caf Copy8 [Register(0x43), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
#       Index("b", Number(U8, 3))
0b 43 69 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# 00cb2 Copy8 [Register(0x69), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
0b 69 65 

# inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# Index("b", Number(U8, 2))
# 00cb5 Copy8 [Register(0x42), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
#       Index("b", Number(U8, 2))
0b 42 69 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# 00cb8 Copy8 [Register(0x69), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
0b 69 64 

# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00cbb Mul8_16 [Register(0x3c), Register(0x40), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 40 4c 

# 00cbf LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 00cc2 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00cc5 Copy8 [Register(0x3d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00cc8 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 00cce Copy8 [Register(0x68), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 68 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00cd1 Copy8 [Register(0x41), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 41 69 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00cd4 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 00cda Copy8 [Register(0x69), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 69 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00cdd Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 54 50 50 

# 00ce1 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 00ce4 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 00ce7 Copy8 [Register(0x51), Register(0x61)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 51 61 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 00cea Copy8 [Register(0x61), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 61 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 00ced Copy8 [Register(0x50), Register(0x61)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 50 61 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 00cf0 Copy8 [Register(0x61), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 61 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00cf3 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6a 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 00cf6 Copy8 [Register(0x6a), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 6a 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00cf9 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6a 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00cfc Copy8 [Register(0x6a), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 6a 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00cff ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00d00 AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 00d04 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00d05 Copy8 [Register(0x41), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 41 69 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00d08 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 00d0e Copy8 [Register(0x69), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 69 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00d11 Mul8_16 [Register(0x3c), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 3c 50 50 

# 00d15 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 00d18 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00d1b Copy8 [Register(0x3d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00d1e LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 00d24 Copy8 [Register(0x68), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 68 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 00d27 Mul8_16 [Register(0x54), Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 54 40 3c 

# 00d2b LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3e 00 

# 00d2e LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00d31 Copy32 [Register(0x50), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 40 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00d34 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00d35 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 40 3c 50 

# 00d39 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 00d3a Copy8 [Register(0x52), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 52 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 00d3d Copy8 [Register(0x68), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 68 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 00d40 Copy8 [Register(0x51), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 51 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 00d43 Copy8 [Register(0x68), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 68 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 00d46 Copy8 [Register(0x50), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 50 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 00d49 Copy8 [Register(0x68), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 68 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00d4c LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6a 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00d4f Copy8 [Register(0x6a), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 6a 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00d52 Copy32 [Register(0x50), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 40 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00d55 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00d56 AddCarry32_1 [Register(0x4c), Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 40 3c 

# 00d5a AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00d5b Copy32 [Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 50 

# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 00d5e Copy32 [Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 64 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 00d61 Mul8_16 [Register(0x38), Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 40 

# 00d65 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 42 00 

# 00d68 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 43 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00d6b Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00d6e LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 4c 00 00 00 00 

# 00d74 Copy8 [Register(0x45), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 45 4c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00d77 Copy8 [Register(0x3d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 3d 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00d7a LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 64 00 00 00 00 

# 00d80 Copy8 [Register(0x68), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 68 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00d83 Mul8_16 [Register(0x4c), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 4c 64 64 

# 00d87 LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 66 00 

# 00d8a LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 67 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 00d8d Copy8 [Register(0x65), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 65 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 00d90 Copy8 [Register(0x44), Register(0x67)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 44 67 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 00d93 Copy8 [Register(0x64), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 64 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 00d96 Copy8 [Register(0x44), Register(0x66)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 44 66 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00d99 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 00d9c Copy8 [Register(0x60), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 60 65 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00d9f LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00da2 Copy8 [Register(0x60), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 60 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 00da5 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 00da6 AddCarry32_1 [Register(0x40), Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 40 64 40 

# 00daa AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 00dab Copy8 [Register(0x3d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 3d 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 00dae LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 64 00 00 00 00 

# 00db4 Copy8 [Register(0x68), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 68 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 00db7 Mul8_16 [Register(0x38), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 38 64 64 

# 00dbb LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 66 00 

# 00dbe LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 67 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 00dc1 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 00dc4 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 4c 00 00 00 00 

# 00dca Copy8 [Register(0x45), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 45 4c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 00dcd Mul8_16 [Register(0x4c), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 4c 3c 38 

# 00dd1 LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3a 00 

# 00dd4 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 00dd7 Copy32 [Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 64 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 00dda ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 00ddb AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 64 

# 00ddf AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 00de0 Copy8 [Register(0x66), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 66 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 00de3 Copy8 [Register(0x45), Register(0x67)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 45 67 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 00de6 Copy8 [Register(0x65), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 65 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 00de9 Copy8 [Register(0x45), Register(0x66)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 45 66 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 00dec Copy8 [Register(0x64), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 64 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 00def Copy8 [Register(0x45), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 45 65 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00df2 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00df5 Copy8 [Register(0x60), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 60 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 00df8 Copy32 [Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 64 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00dfb ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00dfc AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 40 3c 38 

# 00e00 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 00e01 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 

# 00e02 AddCarry32_1 [Register(0x50), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 50 38 38 

# 00e06 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 

# inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 00e07 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
# 00e0a Copy8 [Register(0x45), Register(0x3b)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 45 3b 

# inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 00e0d Copy8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 38 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
# 00e10 Copy8 [Register(0x45), Register(0x3a)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 45 3a 

# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00e13 LoadImm8 [Register(0x68), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 68 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 00e16 Copy8 [Register(0x68), Register(0x39)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 68 39 

# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 00e19 LoadImm8 [Register(0x68), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 68 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 00e1c Copy8 [Register(0x68), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 68 38 

# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 00e1f Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 00e22 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 00e23 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 38 

# 00e27 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 00e28 Copy32 [Register(0x38), Register(0x64)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 38 64 

# goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 None
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 00e2b Copy32 [Register(0x64), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 64 38 

# None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 00e2e Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 00e31 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 71 

# 00e33 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 70 

# 00e35 Push8 [Register(0x6f)]
#       Saving reg0x6f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6f 

# 00e37 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6e 

# 00e39 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6d 

# 00e3b Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6c 

# 00e3d Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6a 

# 00e3f Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 69 

# 00e41 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 68 

# 00e43 Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 67 

# 00e45 Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 66 

# 00e47 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 65 

# 00e49 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 64 

# 00e4b Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 61 

# 00e4d Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 60 

# 00e4f Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5f 

# 00e51 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5e 

# 00e53 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5d 

# 00e55 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5c 

# 00e57 Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5b 

# 00e59 Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5a 

# 00e5b Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 59 

# 00e5d Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 58 

# 00e5f Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 57 

# 00e61 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 56 

# 00e63 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 55 

# 00e65 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 54 

# 00e67 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 53 

# 00e69 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 52 

# 00e6b Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 51 

# 00e6d Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 50 

# 00e6f Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4f 

# 00e71 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4e 

# 00e73 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4d 

# 00e75 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4c 

# 00e77 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3b 

# 00e79 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3a 

# 00e7b Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 39 

# 00e7d Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 38 

# 00e7f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 00e85 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 8f 0e 00 00 

# 00e8b JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 c8 27 00 

# 00e8f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 00e95 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 38 

# 00e97 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 39 

# 00e99 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3a 

# 00e9b Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3b 

# 00e9d Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4c 

# 00e9f Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4d 

# 00ea1 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4e 

# 00ea3 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4f 

# 00ea5 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 50 

# 00ea7 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 51 

# 00ea9 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 52 

# 00eab Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 53 

# 00ead Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 54 

# 00eaf Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 55 

# 00eb1 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 56 

# 00eb3 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 57 

# 00eb5 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 58 

# 00eb7 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 59 

# 00eb9 Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5a 

# 00ebb Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5b 

# 00ebd Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5c 

# 00ebf Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5d 

# 00ec1 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5e 

# 00ec3 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5f 

# 00ec5 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 60 

# 00ec7 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 61 

# 00ec9 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 64 

# 00ecb Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 65 

# 00ecd Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 66 

# 00ecf Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 67 

# 00ed1 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 68 

# 00ed3 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 69 

# 00ed5 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6a 

# 00ed7 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6c 

# 00ed9 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6d 

# 00edb Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6e 

# 00edd Pop8 [Register(0x6f)]
#       Restoring reg0x6f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6f 

# 00edf Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 70 

# 00ee1 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 71 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 00ee3 LoadImm8 [Register(0x68), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 68 0a 

# inline_RpnCalc_handle_putc_21_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 00ee6 Copy8 [Register(0x68), Register(0x45)]
#       inline_RpnCalc_handle_putc_21_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 68 45 

# inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 00ee9 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_21_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 00eeb LoadImm32 [Register(0x3c), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_21_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 00ef1 Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 68 

# inline_RpnCalc_handle_putc_21_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 00ef4 LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_21_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 00ef7 Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 68 69 

# 00efa JzImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 2b 0f 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_21_putc_if_true_0_1
# inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 00efe Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_21_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 00f01 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 00f03 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 00f05 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 00f07 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 00f09 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 00f0f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 19 0f 00 00 

# 00f15 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 00f19 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 00f1f Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 00f21 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 00f23 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 00f25 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 00f27 JmpImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 2b 0f 00 

# :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_end_0
# goto inline_RpnCalc_handle_putc_21_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc None
# inline_RpnCalc_handle_putc_21_function_end_putc
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# 00f2b Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("stack")
21 6c 48 

# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 00f2e Copy32 [Register(0x64), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 64 38 

# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 00f31 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 48 3c 

# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t587d <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t587d <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_values <- inline_RpnCalc_handle_stack_push_56_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 00f34 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_values <- inline_RpnCalc_handle_stack_push_56_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 3c 40 

# inline_RpnCalc_handle_stack_push_56_tf90a <- inline_RpnCalc_handle_stack_push_56_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 00f37 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_56_tf90a <- inline_RpnCalc_handle_stack_push_56_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 40 48 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00f3a Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00f3d AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 00f43 Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 00f46 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 00f4c Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 00f50 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 00f53 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 00f56 ClearCarry []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 00f57 AddCarry32_1 [Register(0x48), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 48 40 40 

# 00f5b AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_56_t531d <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t531d <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 00f5c Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 00f5f Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00f60 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00f63 AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 00f69 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 00f6c AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 00f72 Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 00f75 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 00f78 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 00f7e Store32_1 [Register(0x38), Register(0x64)]
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 64 

# 00f81 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 00f82 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_2_29 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# te668 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Number(U8, 47)
# 00f86 LoadImm8 [Register(0x71), Constant8(0x2f=47)]
#       te668 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
#       Number(U8, 47)
04 71 2f 

# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# 00f89 Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
15 44 71 

# 00f8c JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
72 94 0f 00 

# 00f90 JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
70 a0 11 00 

# :RpnCalc_handle_if_true_3_30 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 00f94 Copy32 [Register(0x3c), Register(0x40)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 40 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 00f97 Copy32 [Register(0x38), Register(0x64)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 64 

# Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 00f9a Copy32 [Register(0x40), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 40 00 

# 00f9d Copy32 [Register(0x64), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 64 04 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224}
# Registers to save: [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 00fa0 Push8 [Register(0x71)]
#       Saving reg0x71 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 71 

# 00fa2 Push8 [Register(0x70)]
#       Saving reg0x70 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 70 

# 00fa4 Push8 [Register(0x6f)]
#       Saving reg0x6f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6f 

# 00fa6 Push8 [Register(0x6e)]
#       Saving reg0x6e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6e 

# 00fa8 Push8 [Register(0x6d)]
#       Saving reg0x6d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6d 

# 00faa Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6c 

# 00fac Push8 [Register(0x6a)]
#       Saving reg0x6a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6a 

# 00fae Push8 [Register(0x69)]
#       Saving reg0x69 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 69 

# 00fb0 Push8 [Register(0x68)]
#       Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 68 

# 00fb2 Push8 [Register(0x67)]
#       Saving reg0x67 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 67 

# 00fb4 Push8 [Register(0x66)]
#       Saving reg0x66 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 66 

# 00fb6 Push8 [Register(0x65)]
#       Saving reg0x65 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 65 

# 00fb8 Push8 [Register(0x64)]
#       Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 64 

# 00fba Push8 [Register(0x61)]
#       Saving reg0x61 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 61 

# 00fbc Push8 [Register(0x60)]
#       Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 60 

# 00fbe Push8 [Register(0x5f)]
#       Saving reg0x5f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5f 

# 00fc0 Push8 [Register(0x5e)]
#       Saving reg0x5e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5e 

# 00fc2 Push8 [Register(0x5d)]
#       Saving reg0x5d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5d 

# 00fc4 Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5c 

# 00fc6 Push8 [Register(0x5b)]
#       Saving reg0x5b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5b 

# 00fc8 Push8 [Register(0x5a)]
#       Saving reg0x5a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5a 

# 00fca Push8 [Register(0x59)]
#       Saving reg0x59 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 59 

# 00fcc Push8 [Register(0x58)]
#       Saving reg0x58 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 58 

# 00fce Push8 [Register(0x57)]
#       Saving reg0x57 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 57 

# 00fd0 Push8 [Register(0x56)]
#       Saving reg0x56 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 56 

# 00fd2 Push8 [Register(0x55)]
#       Saving reg0x55 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 55 

# 00fd4 Push8 [Register(0x54)]
#       Saving reg0x54 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 54 

# 00fd6 Push8 [Register(0x53)]
#       Saving reg0x53 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 53 

# 00fd8 Push8 [Register(0x52)]
#       Saving reg0x52 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 52 

# 00fda Push8 [Register(0x51)]
#       Saving reg0x51 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 51 

# 00fdc Push8 [Register(0x50)]
#       Saving reg0x50 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 50 

# 00fde Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4f 

# 00fe0 Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4e 

# 00fe2 Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4d 

# 00fe4 Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4c 

# 00fe6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 

# 00fec StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c f6 0f 00 00 

# 00ff2 JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 88 18 00 

# 00ff6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 

# 00ffc Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4c 

# 00ffe Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4d 

# 01000 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4e 

# 01002 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4f 

# 01004 Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 50 

# 01006 Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 51 

# 01008 Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 52 

# 0100a Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 53 

# 0100c Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 54 

# 0100e Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 55 

# 01010 Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 56 

# 01012 Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 57 

# 01014 Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 58 

# 01016 Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 59 

# 01018 Pop8 [Register(0x5a)]
#       Restoring reg0x5a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5a 

# 0101a Pop8 [Register(0x5b)]
#       Restoring reg0x5b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5b 

# 0101c Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5c 

# 0101e Pop8 [Register(0x5d)]
#       Restoring reg0x5d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5d 

# 01020 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5e 

# 01022 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5f 

# 01024 Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 60 

# 01026 Pop8 [Register(0x61)]
#       Restoring reg0x61 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 61 

# 01028 Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 64 

# 0102a Pop8 [Register(0x65)]
#       Restoring reg0x65 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 65 

# 0102c Pop8 [Register(0x66)]
#       Restoring reg0x66 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 66 

# 0102e Pop8 [Register(0x67)]
#       Restoring reg0x67 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 67 

# 01030 Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 68 

# 01032 Pop8 [Register(0x69)]
#       Restoring reg0x69 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 69 

# 01034 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6a 

# 01036 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6c 

# 01038 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6d 

# 0103a Pop8 [Register(0x6e)]
#       Restoring reg0x6e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6e 

# 0103c Pop8 [Register(0x6f)]
#       Restoring reg0x6f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6f 

# 0103e Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 70 

# 01040 Pop8 [Register(0x71)]
#       Restoring reg0x71 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 71 

# 01042 Copy32 [Register(0x00), Register(0x64)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 64 

# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 01045 Copy32 [Register(0x64), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 64 38 

# None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 01048 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 0104b Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 71 

# 0104d Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 70 

# 0104f Push8 [Register(0x6f)]
#       Saving reg0x6f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6f 

# 01051 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6e 

# 01053 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6d 

# 01055 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6c 

# 01057 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6a 

# 01059 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 69 

# 0105b Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 68 

# 0105d Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 67 

# 0105f Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 66 

# 01061 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 65 

# 01063 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 64 

# 01065 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 61 

# 01067 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 60 

# 01069 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5f 

# 0106b Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5e 

# 0106d Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5d 

# 0106f Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5c 

# 01071 Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5b 

# 01073 Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5a 

# 01075 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 59 

# 01077 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 58 

# 01079 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 57 

# 0107b Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 56 

# 0107d Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 55 

# 0107f Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 54 

# 01081 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 53 

# 01083 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 52 

# 01085 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 51 

# 01087 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 50 

# 01089 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4f 

# 0108b Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4e 

# 0108d Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4d 

# 0108f Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4c 

# 01091 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3b 

# 01093 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3a 

# 01095 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 39 

# 01097 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 38 

# 01099 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 0109f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c a9 10 00 00 

# 010a5 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 c8 27 00 

# 010a9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 010af Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 38 

# 010b1 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 39 

# 010b3 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3a 

# 010b5 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3b 

# 010b7 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4c 

# 010b9 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4d 

# 010bb Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4e 

# 010bd Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4f 

# 010bf Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 50 

# 010c1 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 51 

# 010c3 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 52 

# 010c5 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 53 

# 010c7 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 54 

# 010c9 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 55 

# 010cb Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 56 

# 010cd Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 57 

# 010cf Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 58 

# 010d1 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 59 

# 010d3 Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5a 

# 010d5 Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5b 

# 010d7 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5c 

# 010d9 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5d 

# 010db Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5e 

# 010dd Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5f 

# 010df Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 60 

# 010e1 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 61 

# 010e3 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 64 

# 010e5 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 65 

# 010e7 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 66 

# 010e9 Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 67 

# 010eb Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 68 

# 010ed Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 69 

# 010ef Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6a 

# 010f1 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6c 

# 010f3 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6d 

# 010f5 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6e 

# 010f7 Pop8 [Register(0x6f)]
#       Restoring reg0x6f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6f 

# 010f9 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 70 

# 010fb Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 71 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 010fd LoadImm8 [Register(0x68), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 68 0a 

# inline_RpnCalc_handle_putc_22_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 01100 Copy8 [Register(0x68), Register(0x45)]
#       inline_RpnCalc_handle_putc_22_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 68 45 

# inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 01103 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_22_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 01105 LoadImm32 [Register(0x3c), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_22_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 0110b Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 68 

# inline_RpnCalc_handle_putc_22_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 0110e LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_22_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 01111 Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 68 69 

# 01114 JzImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 45 11 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_22_putc_if_true_0_1
# inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01118 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_22_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 0111b Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 0111d Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 0111f Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 01121 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 01123 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01129 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 33 11 00 00 

# 0112f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 01133 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 01139 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 0113b Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 0113d Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 0113f Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 01141 JmpImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 45 11 00 

# :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_end_0
# goto inline_RpnCalc_handle_putc_22_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc None
# inline_RpnCalc_handle_putc_22_function_end_putc
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# 01145 Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("stack")
21 6c 48 

# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 01148 Copy32 [Register(0x64), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 64 38 

# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 0114b Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 48 3c 

# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t587d <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t587d <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_values <- inline_RpnCalc_handle_stack_push_57_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 0114e Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_values <- inline_RpnCalc_handle_stack_push_57_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 3c 40 

# inline_RpnCalc_handle_stack_push_57_tf90a <- inline_RpnCalc_handle_stack_push_57_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 01151 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_57_tf90a <- inline_RpnCalc_handle_stack_push_57_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 40 48 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 01154 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 01157 AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 0115d Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 01160 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 01166 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 0116a LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 0116d LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 01170 ClearCarry []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 01171 AddCarry32_1 [Register(0x48), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 48 40 40 

# 01175 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_57_t531d <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t531d <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 01176 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 01179 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0117a Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 0117d AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 01183 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 01186 AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 0118c Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 0118f Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 01192 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 01198 Store32_1 [Register(0x38), Register(0x64)]
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 64 

# 0119b Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_57_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0119c JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_3_31 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 011a0 LoadImm8 [Register(0x71), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 71 73 

# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 011a3 Cmp8 [Register(0x44), Register(0x71)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 44 71 

# 011a6 JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 ae 11 00 

# 011aa JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 66 12 00 

# :RpnCalc_handle_if_true_4_32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# 011ae Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("stack")
21 6c 48 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 011b1 Copy32 [Register(0x38), Register(0x64)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 38 64 

# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 011b4 Copy32 [Register(0x48), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 48 40 

# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 011b7 Copy32 [Register(0x64), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 64 38 

# inline_RpnCalc_handle_stack_push_58_t587d <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t587d <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_values <- inline_RpnCalc_handle_stack_push_58_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 011ba Copy32 [Register(0x40), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_58_values <- inline_RpnCalc_handle_stack_push_58_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 64 

# inline_RpnCalc_handle_stack_push_58_tf90a <- inline_RpnCalc_handle_stack_push_58_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 011bd Copy32 [Register(0x64), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tf90a <- inline_RpnCalc_handle_stack_push_58_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 64 4c 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 011c0 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 011c3 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 011c9 Load32 [Register(0x48), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 48 64 

# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 011cc LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 011d2 Mul8_16 [Register(0x64), Register(0x00), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 64 00 64 

# 011d6 LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 66 00 

# 011d9 LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 67 00 

# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 011dc ClearCarry []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 011dd AddCarry32_1 [Register(0x4c), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 64 64 

# 011e1 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_58_t531d <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t531d <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 011e2 Store32_1 [Register(0x38), Register(0x64)]
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 64 

# 011e5 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 011e6 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 011e9 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 011ef Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 011f2 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 011f8 Load32 [Register(0x48), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 48 64 

# inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 011fb Copy32 [Register(0x64), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 64 38 

# 011fe AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 01204 Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 48 

# 01207 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_58_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# 01208 Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("stack")
21 6c 48 

# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 0120b Copy32 [Register(0x3c), Register(0x40)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 3c 40 

# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 0120e Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 48 3c 

# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 01211 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 40 38 

# inline_RpnCalc_handle_stack_push_59_t587d <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t587d <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_values <- inline_RpnCalc_handle_stack_push_59_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 01214 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_values <- inline_RpnCalc_handle_stack_push_59_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 3c 40 

# inline_RpnCalc_handle_stack_push_59_tf90a <- inline_RpnCalc_handle_stack_push_59_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 01217 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_59_tf90a <- inline_RpnCalc_handle_stack_push_59_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 40 48 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0121a Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 0121d AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 01223 Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 01226 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 0122c Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 01230 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 01233 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 01236 ClearCarry []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 01237 AddCarry32_1 [Register(0x48), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 48 40 40 

# 0123b AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_push_59_t531d <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t531d <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 0123c Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 0123f Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 01240 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 01243 AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 01249 Copy32 [Register(0x3c), Register(0x64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 64 

# 0124c AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 64 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 01252 Load32 [Register(0x64), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 64 40 

# inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 01255 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 01258 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 0125e Store32_1 [Register(0x38), Register(0x64)]
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 64 

# 01261 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_59_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01262 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_4_33 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t1501 <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Number(U8, 113)
# 01266 LoadImm8 [Register(0x45), Constant8(0x71=113)]
#       t1501 <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
#       Number(U8, 113)
04 45 71 

# if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# 01269 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
15 44 45 

# 0126c JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
72 74 12 00 

# 01270 JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
70 80 12 00 

# :RpnCalc_handle_if_true_5_34 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 01274 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 60 00 

# return Some(tb36e) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(U8, 0)) }
# 01277 Copy8 [Register(0x60), Register(0x00)]
#       return Some(tb36e) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(U8, 0)) }
0b 60 00 

# 0127a JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0127c JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_5_35 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 01280 LoadImm8 [Register(0x68), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 68 0a 

# if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 01283 Cmp8 [Register(0x44), Register(0x68)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 44 68 

# 01286 JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 8e 12 00 

# 0128a JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 34 13 00 

# :RpnCalc_handle_if_true_6_36 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 0128e Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 01291 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 38 3c 

# 01294 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 0129a Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 3c 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 0129d LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 012a0 Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 68 69 

# 012a3 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 30 13 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 012a7 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 38 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 012aa Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 40 

# 012ad AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 012b3 Load32 [Register(0x40), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 40 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 012b6 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 3c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 012b9 Copy32 [Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 64 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 012bc Copy32 [Register(0x40), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 012bf Copy32 [Register(0x64), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 64 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 012c2 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 012c5 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 012cb Load32 [Register(0x48), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 48 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 012ce LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 012d4 Mul8_16 [Register(0x64), Register(0x00), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 64 00 64 

# 012d8 LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 66 00 

# 012db LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 67 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 012de ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 012df AddCarry32_1 [Register(0x4c), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 64 64 

# 012e3 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 012e4 Store32_1 [Register(0x3c), Register(0x64)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 64 

# 012e7 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 012e8 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 012eb AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 012f1 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 012f4 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 012fa Load32 [Register(0x48), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 48 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 012fd Copy32 [Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 64 3c 

# 01300 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 01306 Store32_1 [Register(0x3c), Register(0x48)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 48 

# 01309 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 0130a Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 40 

# 0130d AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01313 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 01319 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 

# 0131c Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 0131d Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 38 3c 

# 01320 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 01326 LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 01329 Store8 [Register(0x69), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 69 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 0132c JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 30 13 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01330 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_6_37 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# Number(U8, 32)
# 01334 LoadImm8 [Register(0x45), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
#       Number(U8, 32)
04 45 20 

# if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# 01337 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
15 44 45 

# 0133a JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
72 42 13 00 

# 0133e JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
70 e8 13 00 

# :RpnCalc_handle_if_true_7_38 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 01342 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 01345 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 38 3c 

# 01348 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 0134e Load8 [Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 3c 68 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 01351 LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 01354 Cmp8 [Register(0x68), Register(0x69)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 68 69 

# 01357 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 e4 13 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 0135b Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 38 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 0135e Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 40 

# 01361 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 01367 Load32 [Register(0x40), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 40 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 0136a Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 3c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 0136d Copy32 [Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 64 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 01370 Copy32 [Register(0x40), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 01373 Copy32 [Register(0x64), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 64 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 01376 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 01379 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 0137f Load32 [Register(0x48), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 48 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 01382 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 01388 Mul8_16 [Register(0x64), Register(0x00), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 64 00 64 

# 0138c LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 66 00 

# 0138f LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 67 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 01392 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 01393 AddCarry32_1 [Register(0x4c), Register(0x64), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 64 64 

# 01397 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 01398 Store32_1 [Register(0x3c), Register(0x64)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 64 

# 0139b Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 0139c Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 0139f AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 013a5 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 48 

# 013a8 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 48 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 013ae Load32 [Register(0x48), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 48 64 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 013b1 Copy32 [Register(0x64), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 64 3c 

# 013b4 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 013ba Store32_1 [Register(0x3c), Register(0x48)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 48 

# 013bd Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 013be Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 40 

# 013c1 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 013c7 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 013cd Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 

# 013d0 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 013d1 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 38 3c 

# 013d4 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 013da LoadImm8 [Register(0x69), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 69 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 013dd Store8 [Register(0x69), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 69 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 013e0 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 e4 13 00 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 013e4 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_7_39 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t4e08 <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# Number(U8, 99)
# 013e8 LoadImm8 [Register(0x45), Constant8(0x63=99)]
#       t4e08 <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
#       Number(U8, 99)
04 45 63 

# if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# 013eb Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
15 44 45 

# 013ee JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
72 f6 13 00 

# 013f2 JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
70 26 14 00 

# :RpnCalc_handle_if_true_8_40 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 013f6 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_init_50_tbc15 <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tbc15 <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(14,5))\nAssign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_s <- inline_RpnCalc_handle_RpnCalc_init_50_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 013f9 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_s <- inline_RpnCalc_handle_RpnCalc_init_50_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(14,5))
#       Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 38 3c 

# inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 <- inline_RpnCalc_handle_RpnCalc_init_50_s U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 <- inline_RpnCalc_handle_RpnCalc_init_50_s U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 013fc Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 40 

# 013ff AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 40 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01405 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# 0140b Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 

# 0140e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_50_tb1ed <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tb1ed <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 0140f Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 3c 

# 01412 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01418 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 38 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 0141e Store32_1 [Register(0x38), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 38 3c 

# 01421 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 01422 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_8_41 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t49a <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# Number(U8, 100)
# 01426 LoadImm8 [Register(0x45), Constant8(0x64=100)]
#       t49a <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
#       Number(U8, 100)
04 45 64 

# if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# 01429 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
15 44 45 

# 0142c JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
72 34 14 00 

# 01430 JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
70 e0 15 00 

# :RpnCalc_handle_if_true_9_42 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 01434 LoadImm8 [Register(0x45), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 45 00 

# :RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 01437 Copy8 [Register(0x6a), Register(0x60)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 6a 60 

# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 0143a Cmp8 [Register(0x60), Register(0x45)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 60 45 

# 0143d JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 dc 15 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 01441 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 01444 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
09 3b 

# 01446 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
09 3a 

# 01448 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
09 39 

# 0144a Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
09 38 

# 0144c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 01452 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 5c 14 00 00 

# 01458 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 e7 29 00 

# 0145c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 01462 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0a 38 

# 01464 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0a 39 

# 01466 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0a 3a 

# 01468 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0a 3b 

# tebdf <- 0n58/0x3au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 58)] })
# Number(U8, 58)
# 0146a LoadImm8 [Register(0x68), Constant8(0x3a=58)]
#       tebdf <- 0n58/0x3au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 58)] })
#       Number(U8, 58)
04 68 3a 

# inline_RpnCalc_handle_putc_23_c <- tebdf U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 58)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_c <- tebdf U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 58)] })\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0146d Out0 [Register(0x68)]
#       IoWrite0
68 68 

# inline_RpnCalc_handle_putc_23_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 0146f LoadImm32 [Register(0x40), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_23_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 40 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 01475 Load8 [Register(0x40), Register(0x69)]
#       inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 40 69 

# inline_RpnCalc_handle_putc_23_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 01478 LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_23_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 44 00 

# if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 0147b Cmp8 [Register(0x69), Register(0x44)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 69 44 

# 0147e JzImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 af 14 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_23_putc_if_true_0_1
# inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 01482 Copy8 [Register(0x68), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 68 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 01485 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 01487 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 01489 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 0148b Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 0148d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 01493 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 9d 14 00 00 

# 01499 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 0149d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 014a3 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 014a5 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 014a7 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 014a9 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 014ab JmpImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 af 14 00 

# :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_end_0
# goto inline_RpnCalc_handle_putc_23_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc None
# inline_RpnCalc_handle_putc_23_function_end_putc
# tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Ident("stack")
# 014af Copy32 [Register(0x6c), Register(0x48)]
#       tfe08 <- stack U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Ident("stack")
21 6c 48 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
# 014b2 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
20 3c 00 00 00 00 

# 014b8 Copy8 [Register(0x45), Register(0x3c)]
#       t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
0b 45 3c 

# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# 014bb Copy32 [Register(0x48), Register(0x40)]
#       inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
21 48 40 

# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_t587d <- inline_RpnCalc_handle_stack_get_48_s U32 Some('/lutcomp/programs/lib/Stack.j':(23,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_t587d <- inline_RpnCalc_handle_stack_get_48_s U32 Some('/lutcomp/programs/lib/Stack.j':(23,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_values <- inline_RpnCalc_handle_stack_get_48_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(23,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_values <- inline_RpnCalc_handle_stack_get_48_t587d U32 Some('/lutcomp/programs/lib/Stack.j':(23,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_tf90a <- inline_RpnCalc_handle_stack_get_48_values U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_tf90a <- inline_RpnCalc_handle_stack_get_48_values U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\nIndex(\"values\", Ident(\"n\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))\nCast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_t531d <- inline_RpnCalc_handle_stack_get_48_n U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_t531d <- inline_RpnCalc_handle_stack_get_48_n U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\nIndex(\"values\", Ident(\"n\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))\nArithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
# 014be LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
20 00 04 00 00 00 

# 014c4 Mul8_16 [Register(0x3c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
11 3c 00 3c 

# 014c8 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
04 3e 00 

# 014cb LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
04 3f 00 

# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# 014ce ClearCarry []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
03 

# 014cf AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
30 40 3c 3c 

# 014d3 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 014d4 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 3c 3c 

# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_48_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_48_function_end_stack_get None
# inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# 014d7 Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
21 3c 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113]
# 014da Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 71 

# 014dc Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 70 

# 014de Push8 [Register(0x6f)]
#       Saving reg0x6f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6f 

# 014e0 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6e 

# 014e2 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6d 

# 014e4 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6c 

# 014e6 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6a 

# 014e8 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 69 

# 014ea Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 68 

# 014ec Push8 [Register(0x67)]
#       Saving reg0x67 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 67 

# 014ee Push8 [Register(0x66)]
#       Saving reg0x66 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 66 

# 014f0 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 65 

# 014f2 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 64 

# 014f4 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 61 

# 014f6 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 60 

# 014f8 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5f 

# 014fa Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5e 

# 014fc Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5d 

# 014fe Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5c 

# 01500 Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5b 

# 01502 Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5a 

# 01504 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 59 

# 01506 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 58 

# 01508 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 57 

# 0150a Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 56 

# 0150c Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 55 

# 0150e Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 54 

# 01510 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 53 

# 01512 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 52 

# 01514 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 51 

# 01516 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 50 

# 01518 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4f 

# 0151a Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4e 

# 0151c Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4d 

# 0151e Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4c 

# 01520 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 3b 

# 01522 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 3a 

# 01524 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 39 

# 01526 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 38 

# 01528 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 0152e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 38 15 00 00 

# 01534 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 c8 27 00 

# 01538 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 0153e Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 38 

# 01540 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 39 

# 01542 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 3a 

# 01544 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 3b 

# 01546 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4c 

# 01548 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4d 

# 0154a Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4e 

# 0154c Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4f 

# 0154e Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 50 

# 01550 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 51 

# 01552 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 52 

# 01554 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 53 

# 01556 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 54 

# 01558 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 55 

# 0155a Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 56 

# 0155c Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 57 

# 0155e Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 58 

# 01560 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 59 

# 01562 Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5a 

# 01564 Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5b 

# 01566 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5c 

# 01568 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5d 

# 0156a Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5e 

# 0156c Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5f 

# 0156e Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 60 

# 01570 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 61 

# 01572 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 64 

# 01574 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 65 

# 01576 Pop8 [Register(0x66)]
#       Restoring reg0x66 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 66 

# 01578 Pop8 [Register(0x67)]
#       Restoring reg0x67 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 67 

# 0157a Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 68 

# 0157c Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 69 

# 0157e Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6a 

# 01580 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6c 

# 01582 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6d 

# 01584 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6e 

# 01586 Pop8 [Register(0x6f)]
#       Restoring reg0x6f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6f 

# 01588 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 70 

# 0158a Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 71 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 0158c LoadImm8 [Register(0x68), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 68 0a 

# inline_RpnCalc_handle_putc_24_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_c <- td7b5 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0158f Out0 [Register(0x68)]
#       IoWrite0
68 68 

# inline_RpnCalc_handle_putc_24_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 01591 LoadImm32 [Register(0x40), Constant32(0x000f4c6c=1002604)]
#       inline_RpnCalc_handle_putc_24_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 40 6c 4c 0f 00 

# inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 01597 Load8 [Register(0x40), Register(0x69)]
#       inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 40 69 

# inline_RpnCalc_handle_putc_24_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 0159a LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_24_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 44 00 

# if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 0159d Cmp8 [Register(0x69), Register(0x44)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 69 44 

# 015a0 JzImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 d1 15 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_24_putc_if_true_0_1
# inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x68), Register(0x68)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 015a4 Copy8 [Register(0x68), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_24_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 68 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [56, 57, 58, 59]
# 015a7 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3b 

# 015a9 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 3a 

# 015ab Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 39 

# 015ad Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 38 

# 015af AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 015b5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c bf 15 00 00 

# 015bb JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 015bf AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 015c5 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 38 

# 015c7 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 39 

# 015c9 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3a 

# 015cb Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 3b 

# goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 015cd JmpImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 d1 15 00 

# :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_end_0
# goto inline_RpnCalc_handle_putc_24_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc None
# inline_RpnCalc_handle_putc_24_function_end_putc
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 015d1 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 015d4 Add8NoCarryIn [Register(0x45), Register(0x00), Register(0x45)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 45 00 45 

# goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 015d8 JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 37 14 00 

# :RpnCalc_handle_while_end_46 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 015dc JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_9_43 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t2ac9 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Number(U8, 57)
# 015e0 LoadImm8 [Register(0x45), Constant8(0x39=57)]
#       t2ac9 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
#       Number(U8, 57)
04 45 39 

# if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# 015e3 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
15 44 45 

# 015e6 JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
71 ee 15 00 

# 015ea JmpImm [Label24(RpnCalc_handle_if_else_10_48)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
70 82 16 00 

# :RpnCalc_handle_if_true_10_47 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tf48d <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# Number(U8, 48)
# 015ee LoadImm8 [Register(0x45), Constant8(0x30=48)]
#       tf48d <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
#       Number(U8, 48)
04 45 30 

# if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# 015f1 Cmp8 [Register(0x45), Register(0x44)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
15 45 44 

# 015f4 JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
71 fc 15 00 

# 015f8 JmpImm [Label24(RpnCalc_handle_if_else_0_51)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
70 7e 16 00 

# :RpnCalc_handle_if_true_0_50 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 015fc Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 015ff AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 38 48 00 00 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 01605 LoadImm8 [Register(0x60), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 60 01 

# mem[tfdb7] <- tfcd U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# 01608 Store8 [Register(0x60), Register(0x38)]
#       mem[tfdb7] <- tfcd U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
06 60 38 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 0160b Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 0160e Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 48 

# 01611 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 01617 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 0161a Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 48 

# 0161d AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 01623 Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 48 3c 

# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 01626 Copy32 [Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 3c 38 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 01629 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 0162a AddCarry32_1 [Register(0x38), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 38 

# 0162e AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 0162f ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 01630 AddCarry32_1 [Register(0x38), Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 3c 

# 01634 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 01635 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 01636 AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 3c 3c 3c 

# 0163a AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 0163b ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 0163c AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 3c 38 38 

# 01640 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 None
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 01641 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 38 48 

# 01644 Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 01645 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 01648 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 48 

# 0164b AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 01651 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 01654 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 48 

# 01657 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# 0165d Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
22 48 3c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })\nCast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# 01660 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
04 00 d0 

# 01663 Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x45)]
#       t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
14 44 00 45 

# t3f70 U32 <- t7ff1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# 01667 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for t3f70 U32 <- t7ff1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
20 38 00 00 00 00 

# 0166d Copy8 [Register(0x45), Register(0x38)]
#       t3f70 U32 <- t7ff1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
0b 45 38 

# tacf6 <- td60 Add Var(t3f70) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# 01670 ClearCarry []
#       tacf6 <- td60 Add Var(t3f70) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
03 

# 01671 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       tacf6 <- td60 Add Var(t3f70) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
30 3c 38 38 

# 01675 AddCarry32_2 []
#       tacf6 <- td60 Add Var(t3f70) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
31 

# mem[t6e8e] <- tacf6 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# 01676 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tacf6 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
23 38 48 

# 01679 Store32_2 []
#       mem[t6e8e] <- tacf6 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
24 

# goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0167a JmpImm [Label24(RpnCalc_handle_if_end_49)]
#       goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 7e 16 00 

# :RpnCalc_handle_if_else_0_51 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 0167e JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 82 16 00 

# :RpnCalc_handle_if_else_10_48 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_23
# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(U8, 1)) }
# Number(U8, 1)
# 01682 LoadImm8 [Register(0x60), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(U8, 1)) }
#       Number(U8, 1)
04 60 01 

# return Some(tfcd) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(U8, 1)) }
# 01685 Copy8 [Register(0x60), Register(0x00)]
#       return Some(tfcd) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(U8, 1)) }
0b 60 00 

# 01688 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 0168a Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([116, 117, 118, 119])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_keyboard (global static "keyboard") Static(1003236) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_keyboard_enable (global static "keyboard_enable") Static(1003244) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_lcd_current (global static "lcd_current") Static(1003248) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_lcd_display (global static "lcd_display") Static(1003252) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_lcd_enable (global static "lcd_enable") Static(1003332) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_stdin (global static "stdin") Static(1003336) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([132])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([120]) [0]
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([140])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([144, 145, 146, 147])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([132])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_keyboard (global static "keyboard") Static(1003600) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_keyboard_enable (global static "keyboard_enable") Static(1003608) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_lcd_current (global static "lcd_current") Static(1003612) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_lcd_display (global static "lcd_display") Static(1003616) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_lcd_enable (global static "lcd_enable") Static(1003696) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_stdin (global static "stdin") Static(1003700) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([148])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d (t531d Ident("n")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([144, 145, 146, 147])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([152, 153, 154, 155])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([136, 137, 138, 139])
# Var inline_RpnCalc_run_getchar_39_keyboard (global static "keyboard") Static(992604) None
# Var inline_RpnCalc_run_getchar_39_keyboard_enable (global static "keyboard_enable") Static(992612) None
# Var inline_RpnCalc_run_getchar_39_lcd_current (global static "lcd_current") Static(992616) None
# Var inline_RpnCalc_run_getchar_39_lcd_display (global static "lcd_display") Static(992620) None
# Var inline_RpnCalc_run_getchar_39_lcd_enable (global static "lcd_enable") Static(992700) None
# Var inline_RpnCalc_run_getchar_39_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_RpnCalc_run_getchar_39_stdin (global static "stdin") Static(992704) None
# Var inline_RpnCalc_run_getchar_39_t0 (static "stdin" addr) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_t1 (static "keyboard_enable" addr) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_t2 (static "stdin" addr) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([132]) [0]
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_tc9d5 (tc9d5 Call(Call { function: "Keyboard_poll", parameters: [] })) Reg(U8) Some([156])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_te31 (te31 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })) Reg(U8) Some([156])
# Var inline_RpnCalc_run_getchar_39_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_tf0b5 (tf0b5 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([128, 129, 130, 131])
# Var keyboard (global static "keyboard") Static(989320) None
# Var keyboard_enable (global static "keyboard_enable") Static(989328) None
# Var lcd_current (global static "lcd_current") Static(989332) None
# Var lcd_display (global static "lcd_display") Static(989336) None
# Var lcd_enable (global static "lcd_enable") Static(989416) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var stdin (global static "stdin") Static(989420) None
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([120])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([132]) [0]
# Var td337 (td337 Ident("calc")) Reg(U32) Some([116, 117, 118, 119])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([120])
# 0168f Copy32 [Register(0x00), Register(0x74)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [116, 117, 118, 119].
21 00 74 

# :RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 01692 LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 84 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 01695 LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 84 00 

# if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# 01698 Cmp8 [Register(0x84), Register(0x84)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
15 84 84 

# 0169b JzImm [Label24(RpnCalc_run_while_body_1)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
72 a3 16 00 

# 0169f JmpImm [Label24(RpnCalc_run_while_end_2)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
70 59 18 00 

# :RpnCalc_run_while_body_1 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 016a3 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 78 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Number(U8, 0)
# 016a6 LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
#       Number(U8, 0)
04 84 00 

# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# 016a9 Cmp8 [Register(0x78), Register(0x84)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
15 78 84 

# 016ac JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
72 b4 16 00 

# 016b0 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
70 c4 17 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 016b4 IoReadyToRead [Register(0x78)]
#       ReadyToRead
79 78 

# inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# 016b6 AndImm8 [Register(0x78), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
18 78 01 

# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Number(U8, 0)
# 016b9 LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Number(U8, 0)
04 84 00 

# if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# 016bc Cmp8 [Register(0x78), Register(0x84)]
#       if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
15 78 84 

# 016bf JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
72 12 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_t0 <- 0n992704/0x000f25c0u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# AddressOf(Ident("stdin"))
# 016c3 LoadImm32 [Register(0x7c), Constant32(0x000f25c0=992704)]
#       inline_RpnCalc_run_getchar_39_t0 <- 0n992704/0x000f25c0u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       AddressOf(Ident("stdin"))
20 7c c0 25 0f 00 

# inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t0 U32 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# AddressOf(Ident("stdin"))
# 016c9 Copy32 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t0 U32 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       AddressOf(Ident("stdin"))
21 7c 80 

# inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 016cc In0 [Register(0x78)]
#       inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 78 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 016ce Copy32 [Register(0x80), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 80 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x88), Register(0x88)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 016d1 Copy32 [Register(0x80), Register(0x98)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 80 98 

# 016d4 AddImm32IgnoreCarry [Register(0x98), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 98 04 01 00 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 016da Load8 [Register(0x98), Register(0x94)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 98 94 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 016dd LoadImm32 [Register(0x90), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 90 00 00 00 00 

# 016e3 Copy8 [Register(0x94), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 94 90 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 016e6 ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 016e7 AddCarry32_1 [Register(0x88), Register(0x90), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 88 90 88 

# 016eb AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 016ec Store8 [Register(0x78), Register(0x88)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 78 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 016ef Copy32 [Register(0x80), Register(0x98)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 80 98 

# 016f2 AddImm32IgnoreCarry [Register(0x98), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 98 04 01 00 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 016f8 Copy32 [Register(0x80), Register(0x98)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 80 98 

# 016fb AddImm32IgnoreCarry [Register(0x98), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 98 04 01 00 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 01701 Load8 [Register(0x98), Register(0x94)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 98 94 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 01704 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 01707 Add8NoCarryIn [Register(0x94), Register(0x00), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 94 00 78 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 0170b Store8 [Register(0x78), Register(0x98)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 78 98 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 0170e JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 3f 17 00 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# inline_RpnCalc_run_getchar_39_t1 <- 0n992612/0x000f2564u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Ident("keyboard_enable")
# 01712 LoadImm32 [Register(0x7c), Constant32(0x000f2564=992612)]
#       inline_RpnCalc_run_getchar_39_t1 <- 0n992612/0x000f2564u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Ident("keyboard_enable")
20 7c 64 25 0f 00 

# inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t1] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Ident("keyboard_enable")
# 01718 Load8 [Register(0x7c), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t1] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Ident("keyboard_enable")
05 7c 78 

# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 0171b LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 84 00 

# if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# 0171e Cmp8 [Register(0x78), Register(0x84)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
15 78 84 

# 01721 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_1_7)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
72 3f 17 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_1_6)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156}
# Registers used by callee tree: {21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53}
# Registers to save: []
# 01725 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 0172b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c 35 17 00 00 

# 01731 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 46 04 00 

# 01735 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 0173b JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 3f 17 00 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_1_7
# :inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_t2 <- 0n992704/0x000f25c0u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 0173f LoadImm32 [Register(0x7c), Constant32(0x000f25c0=992704)]
#       inline_RpnCalc_run_getchar_39_t2 <- 0n992704/0x000f25c0u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
20 7c c0 25 0f 00 

# inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t2 U32 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 01745 Copy32 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t2 U32 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
21 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# 01748 Copy32 [Register(0x80), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
21 80 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 0174b Copy32 [Register(0x7c), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 7c 90 

# 0174e AddImm32IgnoreCarry [Register(0x90), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 90 00 01 00 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 01754 Load8 [Register(0x90), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 90 8c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 01757 Copy32 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 7c 80 

# 0175a AddImm32IgnoreCarry [Register(0x80), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 80 04 01 00 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 01760 Load8 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 80 84 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 01763 Cmp8 [Register(0x8c), Register(0x84)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 8c 84 

# 01766 JzImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 6e 17 00 

# 0176a JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 79 17 00 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 0176e LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 78 00 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 01771 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 c0 17 00 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 01775 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 79 17 00 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 01779 Copy32 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a U32 Some('/lutcomp/programs/lib/Queue.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 0177c Copy32 [Register(0x7c), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 7c 90 

# 0177f AddImm32IgnoreCarry [Register(0x90), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 90 00 01 00 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 01785 Load8 [Register(0x90), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 90 8c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 01788 LoadImm32 [Register(0x88), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 88 00 00 00 00 

# 0178e Copy8 [Register(0x8c), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 8c 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 01791 ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 01792 AddCarry32_1 [Register(0x80), Register(0x88), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 80 88 80 

# 01796 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 01797 Load8 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 80 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 0179a Copy32 [Register(0x7c), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 7c 90 

# 0179d AddImm32IgnoreCarry [Register(0x90), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 90 00 01 00 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 017a3 Copy32 [Register(0x7c), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 7c 90 

# 017a6 AddImm32IgnoreCarry [Register(0x90), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 90 00 01 00 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 017ac Load8 [Register(0x90), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 90 8c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 017af LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 017b2 Add8NoCarryIn [Register(0x8c), Register(0x00), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 8c 00 78 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 017b6 Store8 [Register(0x78), Register(0x90)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 78 90 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 017b9 Copy8 [Register(0x84), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 84 78 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 017bc JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 c0 17 00 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 017c0 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 a6 16 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_function_end_getchar Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_function_end_getchar Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_function_end_getchar)], resolved: None }
# :inline_RpnCalc_run_getchar_39_function_end_getchar None
# inline_RpnCalc_run_getchar_39_function_end_getchar
# td337 <- calc U32 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("calc")
# optimized away noop copy Instruction { source: "td337 <- calc U32 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"calc\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 017c4 Copy32 [Register(0x74), Register(0x00)]
#       Arg0[c]=td337 Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 74 00 

# 017c7 Copy8 [Register(0x78), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 78 04 

# Registers used by this function: {116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [116, 117, 118, 119, 120, 124, 128, 129, 130, 131, 132, 136, 140, 144, 145, 146, 147, 148, 152, 153, 154, 156]
# 017ca Push8 [Register(0x9c)]
#       Saving reg0x9c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 9c 

# 017cc Push8 [Register(0x9a)]
#       Saving reg0x9a before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 9a 

# 017ce Push8 [Register(0x99)]
#       Saving reg0x99 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 99 

# 017d0 Push8 [Register(0x98)]
#       Saving reg0x98 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 98 

# 017d2 Push8 [Register(0x94)]
#       Saving reg0x94 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 94 

# 017d4 Push8 [Register(0x93)]
#       Saving reg0x93 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 93 

# 017d6 Push8 [Register(0x92)]
#       Saving reg0x92 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 92 

# 017d8 Push8 [Register(0x91)]
#       Saving reg0x91 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 91 

# 017da Push8 [Register(0x90)]
#       Saving reg0x90 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 90 

# 017dc Push8 [Register(0x8c)]
#       Saving reg0x8c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8c 

# 017de Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 

# 017e0 Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 

# 017e2 Push8 [Register(0x83)]
#       Saving reg0x83 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 83 

# 017e4 Push8 [Register(0x82)]
#       Saving reg0x82 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 82 

# 017e6 Push8 [Register(0x81)]
#       Saving reg0x81 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 81 

# 017e8 Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 

# 017ea Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 

# 017ec Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 

# 017ee Push8 [Register(0x77)]
#       Saving reg0x77 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 77 

# 017f0 Push8 [Register(0x76)]
#       Saving reg0x76 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 76 

# 017f2 Push8 [Register(0x75)]
#       Saving reg0x75 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 75 

# 017f4 Push8 [Register(0x74)]
#       Saving reg0x74 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 74 

# 017f6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 

# 017fc StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c 06 18 00 00 

# 01802 JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 b0 05 00 

# 01806 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 

# 0180c Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 74 

# 0180e Pop8 [Register(0x75)]
#       Restoring reg0x75 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 75 

# 01810 Pop8 [Register(0x76)]
#       Restoring reg0x76 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 76 

# 01812 Pop8 [Register(0x77)]
#       Restoring reg0x77 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 77 

# 01814 Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 

# 01816 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 

# 01818 Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 

# 0181a Pop8 [Register(0x81)]
#       Restoring reg0x81 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 81 

# 0181c Pop8 [Register(0x82)]
#       Restoring reg0x82 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 82 

# 0181e Pop8 [Register(0x83)]
#       Restoring reg0x83 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 83 

# 01820 Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 

# 01822 Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 

# 01824 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8c 

# 01826 Pop8 [Register(0x90)]
#       Restoring reg0x90 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 90 

# 01828 Pop8 [Register(0x91)]
#       Restoring reg0x91 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 91 

# 0182a Pop8 [Register(0x92)]
#       Restoring reg0x92 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 92 

# 0182c Pop8 [Register(0x93)]
#       Restoring reg0x93 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 93 

# 0182e Pop8 [Register(0x94)]
#       Restoring reg0x94 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 94 

# 01830 Pop8 [Register(0x98)]
#       Restoring reg0x98 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 98 

# 01832 Pop8 [Register(0x99)]
#       Restoring reg0x99 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 99 

# 01834 Pop8 [Register(0x9a)]
#       Restoring reg0x9a after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 9a 

# 01836 Pop8 [Register(0x9c)]
#       Restoring reg0x9c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 9c 

# 01838 Copy8 [Register(0x00), Register(0x78)]
#       Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 78 

# t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x78), Register(0x78)], resolved: None }
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# Number(U8, 0)
# 0183b LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
#       Number(U8, 0)
04 84 00 

# if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# 0183e Cmp8 [Register(0x78), Register(0x84)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
15 78 84 

# 01841 JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
72 49 18 00 

# 01845 JmpImm [Label24(RpnCalc_run_if_else_0_5)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
70 55 18 00 

# :RpnCalc_run_if_true_0_4 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 01849 LoadImm8 [Register(0x84), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 84 00 

# return Some(tb36e) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(U8, 0)) }
# 0184c Copy8 [Register(0x84), Register(0x00)]
#       return Some(tb36e) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(U8, 0)) }
0b 84 00 

# 0184f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 01851 JmpImm [Label24(RpnCalc_run_if_end_3)]
#       goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 55 18 00 

# :RpnCalc_run_if_else_0_5 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 01855 JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 92 16 00 

# :RpnCalc_run_while_end_2 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run None
# function_end_RpnCalc_run
# Unreachable None
# 01859 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var keyboard (global static "keyboard") Static(990412) None
# Var keyboard_enable (global static "keyboard_enable") Static(990420) None
# Var lcd_current (global static "lcd_current") Static(990424) None
# Var lcd_display (global static "lcd_display") Static(990428) None
# Var lcd_enable (global static "lcd_enable") Static(990508) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(990512) None
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([160, 161, 162, 163]) [0, 0, 0, 0]
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([164, 165, 166, 167])
# Var x (Arg0 x Number(USIZE)) Reg(U32) Some([164, 165, 166, 167])
# Consts t60ec: 0n0/0x00000000u32
# 0185e Copy32 [Register(0x00), Register(0xa4)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [164, 165, 166, 167].
21 00 a4 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01861 LoadImm32 [Register(0xa0), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 a0 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# 01867 Cmp8 [Register(0xa7), Register(0xa3)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
15 a7 a3 

# 0186a Cmp8IfZero [Register(0xa6), Register(0xa2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 a6 a2 

# 0186d Cmp8IfZero [Register(0xa5), Register(0xa1)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 a5 a1 

# 01870 Cmp8IfZero [Register(0xa4), Register(0xa0)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 a4 a0 

# 01873 JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
72 81 18 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
# Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }\nArithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
# Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
# 01877 AddImm32IgnoreCarry [Register(0xa4), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
#       Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
32 a4 ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 0187d JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 61 18 00 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 01881 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 01883 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_div32_div16_43_a (Arg0 a Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_b (Arg1 b Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(USIZE)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_keyboard (global static "keyboard") Static(998140) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_keyboard_enable (global static "keyboard_enable") Static(998148) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_lcd_current (global static "lcd_current") Static(998152) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_lcd_display (global static "lcd_display") Static(998156) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_lcd_enable (global static "lcd_enable") Static(998236) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_div32_div16_43_inline_div16_mul16_32_4_stdin (global static "stdin") Static(998240) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([196])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([196])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([197])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([196])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([199]) [0]
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([196])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([197])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([200, 201, 202, 203])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(USIZE)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_keyboard (global static "keyboard") Static(1004328) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_keyboard_enable (global static "keyboard_enable") Static(1004336) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_lcd_current (global static "lcd_current") Static(1004340) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_lcd_display (global static "lcd_display") Static(1004344) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_lcd_enable (global static "lcd_enable") Static(1004424) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_div32_div16_43_inline_div16_shiftright1_42_stdin (global static "stdin") Static(1004428) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([196])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([196])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([204])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([204])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([198])
# Var inline_div32_div16_43_keyboard (global static "keyboard") Static(991140) None
# Var inline_div32_div16_43_keyboard_enable (global static "keyboard_enable") Static(991148) None
# Var inline_div32_div16_43_lcd_current (global static "lcd_current") Static(991152) None
# Var inline_div32_div16_43_lcd_display (global static "lcd_display") Static(991156) None
# Var inline_div32_div16_43_lcd_enable (global static "lcd_enable") Static(991236) None
# Var inline_div32_div16_43_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_div32_div16_43_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([208, 209, 210, 211])
# Var inline_div32_div16_43_mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([212, 213, 214, 215])
# Var inline_div32_div16_43_r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_stdin (global static "stdin") Static(991240) None
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_t3c0e (t3c0e Index("b", Number(U8, 0))) Reg(U8) Some([216])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([168, 169, 170, 171]) [0, 0, 0, 0]
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([176, 177, 178, 179]) [0, 1, 0, 0]
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_tb0a8 (tb0a8 Index("x", Number(U8, 2))) Reg(U8) Some([196])
# Var inline_div32_div16_43_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([198]) [0]
# Var inline_div32_div16_43_tda9f (tda9f Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))) Reg(U8) Some([216])
# Var inline_div32_div16_43_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([217])
# Var inline_div32_div16_43_te264 (te264 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_tf944 (tf944 Index("x", Number(U8, 3))) Reg(U8) Some([196])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_shiftright1_44_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_div32_shiftright1_44_a (Arg0 a Number(USIZE)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_shiftright1_44_keyboard (global static "keyboard") Static(1004328) None
# Var inline_div32_shiftright1_44_keyboard_enable (global static "keyboard_enable") Static(1004336) None
# Var inline_div32_shiftright1_44_lcd_current (global static "lcd_current") Static(1004340) None
# Var inline_div32_shiftright1_44_lcd_display (global static "lcd_display") Static(1004344) None
# Var inline_div32_shiftright1_44_lcd_enable (global static "lcd_enable") Static(1004424) None
# Var inline_div32_shiftright1_44_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_div32_shiftright1_44_stdin (global static "stdin") Static(1004428) None
# Var inline_div32_shiftright1_44_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([196])
# Var inline_div32_shiftright1_44_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([196])
# Var inline_div32_shiftright1_44_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_shiftright1_44_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_44_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([204])
# Var inline_div32_shiftright1_44_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([204])
# Var inline_div32_shiftright1_44_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_div32_shiftright1_45_a (Arg0 a Number(USIZE)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_shiftright1_45_keyboard (global static "keyboard") Static(1004328) None
# Var inline_div32_shiftright1_45_keyboard_enable (global static "keyboard_enable") Static(1004336) None
# Var inline_div32_shiftright1_45_lcd_current (global static "lcd_current") Static(1004340) None
# Var inline_div32_shiftright1_45_lcd_display (global static "lcd_display") Static(1004344) None
# Var inline_div32_shiftright1_45_lcd_enable (global static "lcd_enable") Static(1004424) None
# Var inline_div32_shiftright1_45_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_div32_shiftright1_45_stdin (global static "stdin") Static(1004428) None
# Var inline_div32_shiftright1_45_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([196])
# Var inline_div32_shiftright1_45_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([196])
# Var inline_div32_shiftright1_45_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_shiftright1_45_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([198])
# Var inline_div32_shiftright1_45_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([204])
# Var inline_div32_shiftright1_45_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([204])
# Var inline_div32_shiftright1_45_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([198])
# Var keyboard (global static "keyboard") Static(991504) None
# Var keyboard_enable (global static "keyboard_enable") Static(991512) None
# Var lcd_current (global static "lcd_current") Static(991516) None
# Var lcd_display (global static "lcd_display") Static(991520) None
# Var lcd_enable (global static "lcd_enable") Static(991600) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var stdin (global static "stdin") Static(991604) None
# Var t0 (Stack size negated) Reg(U32) Some([220, 221, 222, 223]) [248, 255, 255, 255]
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([180, 181, 182, 183])
# Var t1a85 (t1a85 Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })) Reg(U8) Some([224])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([180, 181, 182, 183])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([184, 185, 186, 187])
# Var t4917 (t4917 Number(USIZE, 65536)) Reg(U32) Some([176, 177, 178, 179]) [0, 0, 1, 0]
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([184, 185, 186, 187])
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([176, 177, 178, 179])
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([184, 185, 186, 187]) [0, 0, 0, 0]
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([168, 169, 170, 171])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([200, 201, 202, 203])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([172, 173, 174, 175])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([184, 185, 186, 187])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([184, 185, 186, 187])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([184, 185, 186, 187])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([188, 189, 190, 191])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([220, 221, 222, 223])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([168, 169, 170, 171])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([220, 221, 222, 223])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([180, 181, 182, 183])
# Var x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var x64 (Local x64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# Consts t4917: 0n65536/0x00010000u32
# 01888 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 0188e Copy32 [Register(0x00), Register(0xa8)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [168, 169, 170, 171].
21 00 a8 

# 01891 Copy32 [Register(0x04), Register(0xac)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [172, 173, 174, 175].
21 04 ac 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 01894 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 0189a Cmp8 [Register(0xaf), Register(0xab)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 af ab 

# 0189d Cmp8IfZero [Register(0xae), Register(0xaa)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 ae aa 

# 018a0 Cmp8IfZero [Register(0xad), Register(0xa9)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 ad a9 

# 018a3 Cmp8IfZero [Register(0xac), Register(0xa8)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 ac a8 

# 018a6 JcImm [Label24(div32_if_else_0_2)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 c5 18 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# div32_if_true_0_1
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# Number(USIZE, 0)
# 018aa LoadImm32 [Register(0xb8), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
#       Number(USIZE, 0)
20 b8 00 00 00 00 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# 018b0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
32 0c 08 00 00 00 

# return Some(t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# 018b6 Copy32 [Register(0xb8), Register(0x00)]
#       return Some(t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
21 b8 00 

# 018b9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 018bf JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# 018c1 JmpImm [Label24(div32_if_end_0)]
#       goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
70 c5 18 00 

# :div32_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_else_0_2
# :div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# Number(USIZE, 65536)
# 018c5 LoadImm32 [Register(0xb0), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
#       Number(USIZE, 65536)
20 b0 00 00 01 00 

# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# 018cb Cmp8 [Register(0xb3), Register(0xab)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
15 b3 ab 

# 018ce Cmp8IfZero [Register(0xb2), Register(0xaa)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b2 aa 

# 018d1 Cmp8IfZero [Register(0xb1), Register(0xa9)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b1 a9 

# 018d4 Cmp8IfZero [Register(0xb0), Register(0xa8)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b0 a8 

# 018d7 JcImm [Label24(div32_if_else_0_5)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
71 82 1b 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 018db Cmp8 [Register(0xaf), Register(0xab)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 af ab 

# 018de Cmp8IfZero [Register(0xae), Register(0xaa)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 ae aa 

# 018e1 Cmp8IfZero [Register(0xad), Register(0xa9)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 ad a9 

# 018e4 Cmp8IfZero [Register(0xac), Register(0xa8)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 ac a8 

# 018e7 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_2)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 f9 18 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# Number(USIZE, 0)
# 018eb LoadImm32 [Register(0xa8), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(USIZE, 0)) }
#       Number(USIZE, 0)
20 a8 00 00 00 00 

# te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nReturn { value: Some(Number(USIZE, 0)) }\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# 018f1 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(USIZE, 0)) }
70 6d 1b 00 

# goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# 018f5 JmpImm [Label24(inline_div32_div16_43_div16_if_end_0)]
#       goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
70 f9 18 00 

# :inline_div32_div16_43_div16_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_else_0_2
# :inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Number(USIZE, 256)
# 018f9 LoadImm32 [Register(0xb0), Constant32(0x00000100=256)]
#       inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Number(USIZE, 256)
20 b0 00 01 00 00 

# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# 018ff Cmp8 [Register(0xb3), Register(0xab)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
15 b3 ab 

# 01902 Cmp8IfZero [Register(0xb2), Register(0xaa)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b2 aa 

# 01905 Cmp8IfZero [Register(0xb1), Register(0xa9)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b1 a9 

# 01908 Cmp8IfZero [Register(0xb0), Register(0xa8)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b0 a8 

# 0190b JcImm [Label24(inline_div32_div16_43_div16_if_else_0_5)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
71 2a 19 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# Index("a", Number(U8, 0))
# 0190f Copy8 [Register(0xa8), Register(0xd9)]
#       inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
#       Index("a", Number(U8, 0))
0b a8 d9 

# inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# Index("b", Number(U8, 0))
# 01912 Copy8 [Register(0xac), Register(0xd8)]
#       inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
#       Index("b", Number(U8, 0))
0b ac d8 

# inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e) Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# 01915 Divide8 [Register(0xd9), Register(0xd8), Register(0xd8)]
#       inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e) Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
17 d9 d8 d8 

# inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# 01919 LoadImm32 [Register(0xa8), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
20 a8 00 00 00 00 

# 0191f Copy8 [Register(0xd8), Register(0xa8)]
#       inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
0b d8 a8 

# te81f <- inline_div32_div16_43_te264 U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_te264 U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# 01922 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
70 6d 1b 00 

# goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# 01926 JmpImm [Label24(inline_div32_div16_43_div16_if_end_3)]
#       goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
70 2a 19 00 

# :inline_div32_div16_43_div16_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_else_0_5
# :inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 0192a LoadImm32 [Register(0xd0), Constant32(0x00000000=0)]
#       inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 d0 00 00 00 00 

# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }
# Number(USIZE, 65535)
# 01930 LoadImm32 [Register(0xb0), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }
#       Number(USIZE, 65535)
20 b0 ff ff 00 00 

# :inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 01936 Copy32 [Register(0xd0), Register(0xb4)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 d0 b4 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 01939 Cmp8 [Register(0xb3), Register(0xb7)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 b3 b7 

# 0193c Cmp8IfZero [Register(0xb2), Register(0xb6)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b2 b6 

# 0193f Cmp8IfZero [Register(0xb1), Register(0xb5)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b1 b5 

# 01942 Cmp8IfZero [Register(0xb0), Register(0xb4)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b0 b4 

# 01945 JcImm [Label24(inline_div32_div16_43_div16_while_end_8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 63 1b 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 01949 Copy32 [Register(0xd0), Register(0xb4)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 d0 b4 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 0194c ClearCarry []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 

# 0194d AddCarry32_1 [Register(0xb4), Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 b4 b0 b4 

# 01951 AddCarry32_2 []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 

# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 01952 Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 01955 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 01958 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xcc), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 cc c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 0195d Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b c6 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 01960 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 01963 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 01966 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc4), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c4 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 0196b Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b c6 b5 

# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 0196e Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 01971 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 01974 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc6), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 c6 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 01979 Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b c6 b6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 0197c Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 0197f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 01982 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc4), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c4 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 01987 Copy8 [Register(0xc6), Register(0xb7)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b c6 b7 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 0198a Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 0198d Copy8 [Register(0xcc), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
0b cc c6 

# 01990 AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
18 c6 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 01993 Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b c6 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 01996 Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 01999 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 0199c Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
0b c4 c6 

# 0199f AndImm8 [Register(0xc6), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
18 c6 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 019a2 Or8 [Register(0xcc), Register(0xc6), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c cc c6 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 019a6 Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b c6 b4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 019a9 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 019ac Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
0b c4 c6 

# 019af AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
18 c6 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 019b2 Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b c6 b5 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 019b5 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 019b8 Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 019bb AndImm8 [Register(0xc6), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
18 c6 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 019be Or8 [Register(0xc4), Register(0xc6), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c4 c6 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 019c2 Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b c6 b5 

# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 019c5 Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 019c8 AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
18 c6 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 019cb Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b c6 b6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 019ce Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 019d1 Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 019d4 Copy8 [Register(0xc4), Register(0xcc)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
0b c4 cc 

# 019d7 AndImm8 [Register(0xcc), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
18 cc 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 019da Or8 [Register(0xc6), Register(0xcc), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c c6 cc c6 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 019de Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b c6 b6 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 019e1 Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 019e4 Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
0b c4 c6 

# 019e7 AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
18 c6 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 019ea Copy8 [Register(0xc6), Register(0xb7)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b c6 b7 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 019ed Copy32 [Register(0xb4), Register(0xd4)]
#       inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 b4 d4 

# goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 None
# inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 019f0 Copy32 [Register(0xd4), Register(0xb4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 d4 b4 

# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 019f3 Copy32 [Register(0xac), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 ac b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 019f6 Mul8_16 [Register(0xb4), Register(0xb8), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 b4 b8 bc 

# 019fa LoadImm8 [Register(0xbe), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 be 00 

# 019fd LoadImm8 [Register(0xbf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 bf 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 01a00 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 01a03 LoadImm32 [Register(0xc8), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 c8 00 00 00 00 

# 01a09 Copy8 [Register(0xc4), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b c4 c8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 01a0c Copy8 [Register(0xb9), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b b9 c6 

# inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 01a0f LoadImm32 [Register(0xc0), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 c0 00 00 00 00 

# 01a15 Copy8 [Register(0xc6), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b c6 c0 

# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 01a18 Mul8_16 [Register(0xc8), Register(0xc0), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 c8 c0 c0 

# 01a1c LoadImm8 [Register(0xc2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c2 00 

# 01a1f LoadImm8 [Register(0xc3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 01a22 Copy8 [Register(0xc1), Register(0xc5)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b c1 c5 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 01a25 Copy8 [Register(0xc5), Register(0xc3)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b c5 c3 

# inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 01a28 Copy8 [Register(0xc0), Register(0xc5)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b c0 c5 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 01a2b Copy8 [Register(0xc5), Register(0xc2)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b c5 c2 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 01a2e LoadImm8 [Register(0xc7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 c7 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 01a31 Copy8 [Register(0xc7), Register(0xc1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b c7 c1 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 01a34 LoadImm8 [Register(0xc7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 c7 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 01a37 Copy8 [Register(0xc7), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b c7 c0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 01a3a ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 01a3b AddCarry32_1 [Register(0xbc), Register(0xc0), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 bc c0 bc 

# 01a3f AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 01a40 Copy8 [Register(0xb9), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b b9 c6 

# inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 01a43 LoadImm32 [Register(0xc0), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 c0 00 00 00 00 

# 01a49 Copy8 [Register(0xc6), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b c6 c0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 01a4c Mul8_16 [Register(0xb4), Register(0xc0), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 b4 c0 c0 

# 01a50 LoadImm8 [Register(0xc2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c2 00 

# 01a53 LoadImm8 [Register(0xc3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 01a56 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 01a59 LoadImm32 [Register(0xc8), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 c8 00 00 00 00 

# 01a5f Copy8 [Register(0xc4), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b c4 c8 

# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 01a62 Mul8_16 [Register(0xc8), Register(0xb8), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 c8 b8 b4 

# 01a66 LoadImm8 [Register(0xb6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 b6 00 

# 01a69 LoadImm8 [Register(0xb7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 b7 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 01a6c Copy32 [Register(0xc0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 c0 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 01a6f ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 01a70 AddCarry32_1 [Register(0xb8), Register(0xb4), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 b8 b4 c0 

# 01a74 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 01a75 Copy8 [Register(0xc2), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b c2 c4 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 01a78 Copy8 [Register(0xc4), Register(0xc3)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b c4 c3 

# inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 01a7b Copy8 [Register(0xc1), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b c1 c4 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 01a7e Copy8 [Register(0xc4), Register(0xc2)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b c4 c2 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 01a81 Copy8 [Register(0xc0), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b c0 c4 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 01a84 Copy8 [Register(0xc4), Register(0xc1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b c4 c1 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 01a87 LoadImm8 [Register(0xc7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 c7 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 01a8a Copy8 [Register(0xc7), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b c7 c0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 01a8d Copy32 [Register(0xc0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 c0 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 01a90 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 01a91 AddCarry32_1 [Register(0xbc), Register(0xb8), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 bc b8 b4 

# 01a95 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 None
# inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# Index("x", Number(U8, 2))
# 01a96 Copy8 [Register(0xb6), Register(0xc4)]
#       inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
#       Index("x", Number(U8, 2))
0b b6 c4 

# inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# Number(U8, 0)
# 01a99 LoadImm8 [Register(0xc6), Constant8(0x00=0)]
#       inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
#       Number(U8, 0)
04 c6 00 

# if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# 01a9c Cmp8 [Register(0xc4), Register(0xc6)]
#       if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
15 c4 c6 

# 01a9f JcImm [Label24(inline_div32_div16_43_div16_if_else_0_11)]
#       if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
71 b7 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 01aa3 Copy32 [Register(0xd4), Register(0xb4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d4 b4 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 01aa6 Copy32 [Register(0xb4), Register(0xb0)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b4 b0 

# 01aa9 AddImm32IgnoreCarry [Register(0xb0), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b0 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 01aaf JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 36 19 00 

# goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01ab3 JmpImm [Label24(inline_div32_div16_43_div16_if_end_9)]
#       goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
70 b7 1a 00 

# :inline_div32_div16_43_div16_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_11
# :inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# Index("x", Number(U8, 3))
# 01ab7 Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
#       Index("x", Number(U8, 3))
0b b7 c4 

# inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# Number(U8, 0)
# 01aba LoadImm8 [Register(0xc6), Constant8(0x00=0)]
#       inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
#       Number(U8, 0)
04 c6 00 

# if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# 01abd Cmp8 [Register(0xc4), Register(0xc6)]
#       if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
15 c4 c6 

# 01ac0 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_14)]
#       if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
71 d8 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 01ac4 Copy32 [Register(0xd4), Register(0xb4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d4 b4 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 01ac7 Copy32 [Register(0xb4), Register(0xb0)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b4 b0 

# 01aca AddImm32IgnoreCarry [Register(0xb0), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b0 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 01ad0 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 36 19 00 

# goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01ad4 JmpImm [Label24(inline_div32_div16_43_div16_if_end_12)]
#       goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
70 d8 1a 00 

# :inline_div32_div16_43_div16_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_14
# :inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 01ad8 Cmp8 [Register(0xb7), Register(0xab)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 b7 ab 

# 01adb Cmp8IfZero [Register(0xb6), Register(0xaa)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b6 aa 

# 01ade Cmp8IfZero [Register(0xb5), Register(0xa9)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b5 a9 

# 01ae1 Cmp8IfZero [Register(0xb4), Register(0xa8)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b4 a8 

# 01ae4 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_17)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 fc 1a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 01ae8 Copy32 [Register(0xd4), Register(0xb4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d4 b4 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 01aeb Copy32 [Register(0xb4), Register(0xb0)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b4 b0 

# 01aee AddImm32IgnoreCarry [Register(0xb0), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b0 ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 01af4 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 36 19 00 

# goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01af8 JmpImm [Label24(inline_div32_div16_43_div16_if_end_15)]
#       goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
70 fc 1a 00 

# :inline_div32_div16_43_div16_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_17
# :inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 01afc Cmp8 [Register(0xb7), Register(0xab)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 b7 ab 

# 01aff Cmp8IfZero [Register(0xb6), Register(0xaa)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b6 aa 

# 01b02 Cmp8IfZero [Register(0xb5), Register(0xa9)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b5 a9 

# 01b05 Cmp8IfZero [Register(0xb4), Register(0xa8)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b4 a8 

# 01b08 JzImm [Label24(inline_div32_div16_43_div16_if_true_0_19)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 10 1b 00 

# 01b0c JmpImm [Label24(inline_div32_div16_43_div16_if_else_0_20)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 1e 1b 00 

# :inline_div32_div16_43_div16_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 01b10 Copy32 [Register(0xd4), Register(0xb4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 d4 b4 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01b13 Copy32 [Register(0xb4), Register(0xa8)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 b4 a8 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01b16 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 6d 1b 00 

# goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01b1a JmpImm [Label24(inline_div32_div16_43_div16_if_end_18)]
#       goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
70 1e 1b 00 

# :inline_div32_div16_43_div16_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_20
# :inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 01b1e Copy32 [Register(0xb4), Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 b4 00 

# 01b21 Invert8 [Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 01b23 Invert8 [Register(0x01)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 01b25 Invert8 [Register(0x02)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 01b27 Invert8 [Register(0x03)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 01b29 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 01b2f ClearCarry []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 01b30 AddCarry32_1 [Register(0xa8), Register(0x00), Register(0xb4)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 a8 00 b4 

# 01b34 AddCarry32_2 []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 01b35 Cmp8 [Register(0xaf), Register(0xb7)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 af b7 

# 01b38 Cmp8IfZero [Register(0xae), Register(0xb6)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 ae b6 

# 01b3b Cmp8IfZero [Register(0xad), Register(0xb5)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 ad b5 

# 01b3e Cmp8IfZero [Register(0xac), Register(0xb4)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 ac b4 

# 01b41 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_23)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 53 1b 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 01b45 Copy32 [Register(0xd4), Register(0xb4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 d4 b4 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01b48 Copy32 [Register(0xb4), Register(0xa8)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 b4 a8 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 01b4b JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 6d 1b 00 

# goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01b4f JmpImm [Label24(inline_div32_div16_43_div16_if_end_21)]
#       goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
70 53 1b 00 

# :inline_div32_div16_43_div16_if_else_0_23 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_23
# :inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 01b53 Copy32 [Register(0xd4), Register(0xb4)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d4 b4 

# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# 01b56 Copy32 [Register(0xb4), Register(0xd0)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
21 b4 d0 

# 01b59 AddImm32IgnoreCarry [Register(0xd0), Constant32(0x00000001=1)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
32 d0 01 00 00 00 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# 01b5f JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
70 36 19 00 

# :inline_div32_div16_43_div16_while_end_8 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 01b63 Copy32 [Register(0xd0), Register(0xb4)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 d0 b4 

# te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 01b66 Copy32 [Register(0xb4), Register(0xa8)]
#       te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 b4 a8 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 01b69 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
70 6d 1b 00 

# :inline_div32_div16_43_function_end_div16 None
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 01b6d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 

# return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 01b73 Copy32 [Register(0xa8), Register(0x00)]
#       return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 a8 00 

# 01b76 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01b7c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# 01b7e JmpImm [Label24(div32_if_end_3)]
#       goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
70 82 1b 00 

# :div32_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_else_0_5
# :div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01b82 LoadImm32 [Register(0xc0), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 c0 00 00 00 00 

# hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }
# Number(USIZE, 4294967295)
# 01b88 LoadImm32 [Register(0xb0), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }
#       Number(USIZE, 4294967295)
20 b0 ff ff ff ff 

# :div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 01b8e Copy32 [Register(0xc0), Register(0xb4)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 c0 b4 

# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 01b91 Cmp8 [Register(0xb3), Register(0xb7)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 b3 b7 

# 01b94 Cmp8IfZero [Register(0xb2), Register(0xb6)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b2 b6 

# 01b97 Cmp8IfZero [Register(0xb1), Register(0xb5)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b1 b5 

# 01b9a Cmp8IfZero [Register(0xb0), Register(0xb4)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b0 b4 

# 01b9d JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 e0 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 01ba1 Copy32 [Register(0xc0), Register(0xb4)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 c0 b4 

# inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 01ba4 Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 01ba7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 01baa Shift8 [Constant8(0x04=4), Register(0x00), Register(0xcc), Register(0xc6)]
#       inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 cc c6 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 01baf Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b c6 b4 

# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 01bb2 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 01bb5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 01bb8 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c4 c6 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 01bbd Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b c6 b5 

# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 01bc0 Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 01bc3 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 01bc6 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc6), Register(0xc6)]
#       inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 c6 c6 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 01bcb Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b c6 b6 

# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 01bce Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 01bd1 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 01bd4 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c4 c6 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 01bd9 Copy8 [Register(0xc6), Register(0xb7)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b c6 b7 

# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 01bdc Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 01bdf Copy8 [Register(0xcc), Register(0xc6)]
#       inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
0b cc c6 

# 01be2 AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
18 c6 7f 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 01be5 Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b c6 b4 

# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 01be8 Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 01beb Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 01bee Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
0b c4 c6 

# 01bf1 AndImm8 [Register(0xc6), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
18 c6 80 

# inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 01bf4 Or8 [Register(0xcc), Register(0xc6), Register(0xc6)]
#       inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c cc c6 c6 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 01bf8 Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b c6 b4 

# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 01bfb Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 01bfe Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
0b c4 c6 

# 01c01 AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
18 c6 7f 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 01c04 Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b c6 b5 

# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 01c07 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 01c0a Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 01c0d AndImm8 [Register(0xc6), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
18 c6 80 

# inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 01c10 Or8 [Register(0xc4), Register(0xc6), Register(0xc6)]
#       inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c4 c6 c6 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 01c14 Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b c6 b5 

# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 01c17 Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 01c1a AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
18 c6 7f 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 01c1d Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b c6 b6 

# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 01c20 Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 01c23 Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 01c26 Copy8 [Register(0xc4), Register(0xcc)]
#       inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
0b c4 cc 

# 01c29 AndImm8 [Register(0xcc), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
18 cc 80 

# inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 01c2c Or8 [Register(0xc6), Register(0xcc), Register(0xc6)]
#       inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c c6 cc c6 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 01c30 Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b c6 b6 

# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 01c33 Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 01c36 Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
0b c4 c6 

# 01c39 AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
18 c6 7f 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 01c3c Copy8 [Register(0xc6), Register(0xb7)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b c6 b7 

# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 01c3f Copy32 [Register(0xb4), Register(0xc8)]
#       t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 b4 c8 

# goto inline_div32_shiftright1_44_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_44_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_44_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_44_function_end_shiftright1 None
# inline_div32_shiftright1_44_function_end_shiftright1
# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 01c42 Copy32 [Register(0xb0), Register(0xb4)]
#       inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 b0 b4 

# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 01c45 Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 01c48 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 01c4b Shift8 [Constant8(0x04=4), Register(0x00), Register(0xcc), Register(0xc6)]
#       inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 cc c6 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 01c50 Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b c6 b4 

# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 01c53 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 01c56 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 01c59 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c4 c6 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 01c5e Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b c6 b5 

# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 01c61 Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 01c64 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 01c67 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc6), Register(0xc6)]
#       inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 c6 c6 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 01c6c Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b c6 b6 

# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 01c6f Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 01c72 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 01c75 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c4 c6 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 01c7a Copy8 [Register(0xc6), Register(0xb7)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b c6 b7 

# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 01c7d Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 01c80 Copy8 [Register(0xcc), Register(0xc6)]
#       inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
0b cc c6 

# 01c83 AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
18 c6 7f 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 01c86 Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b c6 b4 

# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 01c89 Copy8 [Register(0xb4), Register(0xcc)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b4 cc 

# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 01c8c Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 01c8f Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
0b c4 c6 

# 01c92 AndImm8 [Register(0xc6), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
18 c6 80 

# inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 01c95 Or8 [Register(0xcc), Register(0xc6), Register(0xc6)]
#       inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c cc c6 c6 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 01c99 Copy8 [Register(0xc6), Register(0xb4)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b c6 b4 

# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 01c9c Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 01c9f Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
0b c4 c6 

# 01ca2 AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
18 c6 7f 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 01ca5 Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b c6 b5 

# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 01ca8 Copy8 [Register(0xb5), Register(0xc4)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b5 c4 

# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 01cab Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 01cae AndImm8 [Register(0xc6), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
18 c6 80 

# inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 01cb1 Or8 [Register(0xc4), Register(0xc6), Register(0xc6)]
#       inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c4 c6 c6 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 01cb5 Copy8 [Register(0xc6), Register(0xb5)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b c6 b5 

# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 01cb8 Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 01cbb AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
18 c6 7f 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 01cbe Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b c6 b6 

# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 01cc1 Copy8 [Register(0xb6), Register(0xc6)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b b6 c6 

# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 01cc4 Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 01cc7 Copy8 [Register(0xc4), Register(0xcc)]
#       inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
0b c4 cc 

# 01cca AndImm8 [Register(0xcc), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
18 cc 80 

# inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 01ccd Or8 [Register(0xc6), Register(0xcc), Register(0xc6)]
#       inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c c6 cc c6 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 01cd1 Copy8 [Register(0xc6), Register(0xb6)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b c6 b6 

# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 01cd4 Copy8 [Register(0xb7), Register(0xc4)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b b7 c4 

# inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 01cd7 Copy8 [Register(0xc4), Register(0xc6)]
#       inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
0b c4 c6 

# 01cda AndImm8 [Register(0xc6), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
18 c6 7f 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 01cdd Copy8 [Register(0xc6), Register(0xb7)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b c6 b7 

# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# goto inline_div32_shiftright1_45_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_45_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_45_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_45_function_end_shiftright1 None
# inline_div32_shiftright1_45_function_end_shiftright1
# mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 01ce0 ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 

# 01ce1 AddCarry32_1 [Register(0xc8), Register(0xb4), Register(0xb4)]
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 c8 b4 b4 

# 01ce5 AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 

# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 01ce6 Copy32 [Register(0x0c), Register(0xdc)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c dc 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 01ce9 Copy32 [Register(0xdc), Register(0xb8)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 dc b8 

# 01cec AddImm32IgnoreCarry [Register(0xb8), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 b8 00 00 00 00 

# tb608 <- t4a94 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# optimized away noop copy Instruction { source: "tb608 <- t4a94 U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nAddressOf(Ident(\"x64\"))\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 01cf2 Copy32 [Register(0xb4), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 b4 00 

# 01cf5 Copy32 [Register(0xac), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 ac 04 

# 01cf8 Copy32 [Register(0xb8), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 b8 08 

# Registers used by this function: {168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224}
# Registers used by callee tree: {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143}
# Registers to save: []
# 01cfb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 01d01 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 0b 1d 00 00 

# 01d07 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 42 23 00 

# 01d0b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 01d11 Copy32 [Register(0x0c), Register(0xdc)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c dc 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 01d14 Copy32 [Register(0xdc), Register(0xb8)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 dc b8 

# 01d17 AddImm32IgnoreCarry [Register(0xb8), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 b8 04 00 00 00 

# tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# 01d1d Load32 [Register(0xb8), Register(0xbc)]
#       tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
22 b8 bc 

# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# Number(USIZE, 0)
# 01d20 LoadImm32 [Register(0xb8), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 b8 00 00 00 00 

# if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# 01d26 Cmp8 [Register(0xbf), Register(0xbb)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
15 bf bb 

# 01d29 Cmp8IfZero [Register(0xbe), Register(0xba)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 be ba 

# 01d2c Cmp8IfZero [Register(0xbd), Register(0xb9)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 bd b9 

# 01d2f Cmp8IfZero [Register(0xbc), Register(0xb8)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 bc b8 

# 01d32 JcImm [Label24(div32_if_else_0_11)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
71 47 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 01d36 Copy32 [Register(0xb4), Register(0xb0)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b4 b0 

# 01d39 AddImm32IgnoreCarry [Register(0xb0), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b0 ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 01d3f JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 8e 1b 00 

# goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01d43 JmpImm [Label24(div32_if_end_9)]
#       goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
70 47 1d 00 

# :div32_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_11
# :div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 01d47 Copy32 [Register(0x0c), Register(0xdc)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c dc 

# x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 01d4a Load32 [Register(0xdc), Register(0xb8)]
#       x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 dc b8 

# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 01d4d Cmp8 [Register(0xbb), Register(0xab)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 bb ab 

# 01d50 Cmp8IfZero [Register(0xba), Register(0xaa)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 ba aa 

# 01d53 Cmp8IfZero [Register(0xb9), Register(0xa9)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b9 a9 

# 01d56 Cmp8IfZero [Register(0xb8), Register(0xa8)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b8 a8 

# 01d59 JcImm [Label24(div32_if_else_0_14)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 6e 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 01d5d Copy32 [Register(0xb4), Register(0xb0)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b4 b0 

# 01d60 AddImm32IgnoreCarry [Register(0xb0), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b0 ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 01d66 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 8e 1b 00 

# goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01d6a JmpImm [Label24(div32_if_end_12)]
#       goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
70 6e 1d 00 

# :div32_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_14
# :div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 01d6e Cmp8 [Register(0xbb), Register(0xab)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 bb ab 

# 01d71 Cmp8IfZero [Register(0xba), Register(0xaa)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 ba aa 

# 01d74 Cmp8IfZero [Register(0xb9), Register(0xa9)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b9 a9 

# 01d77 Cmp8IfZero [Register(0xb8), Register(0xa8)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b8 a8 

# 01d7a JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 82 1d 00 

# 01d7e JmpImm [Label24(div32_if_else_0_17)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 97 1d 00 

# :div32_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01d82 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01d88 Copy32 [Register(0xb4), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 b4 00 

# 01d8b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01d91 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01d93 JmpImm [Label24(div32_if_end_15)]
#       goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
70 97 1d 00 

# :div32_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_17
# :div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 01d97 Copy32 [Register(0xb8), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 b8 00 

# 01d9a Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 01d9c Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 01d9e Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 01da0 Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 01da2 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 01da8 ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 01da9 AddCarry32_1 [Register(0xa8), Register(0x00), Register(0xb8)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 a8 00 b8 

# 01dad AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 01dae Cmp8 [Register(0xaf), Register(0xbb)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 af bb 

# 01db1 Cmp8IfZero [Register(0xae), Register(0xba)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 ae ba 

# 01db4 Cmp8IfZero [Register(0xad), Register(0xb9)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 ad b9 

# 01db7 Cmp8IfZero [Register(0xac), Register(0xb8)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 ac b8 

# 01dba JcImm [Label24(div32_if_else_0_20)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 d3 1d 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01dbe AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 01dc4 Copy32 [Register(0xb4), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 b4 00 

# 01dc7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01dcd JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01dcf JmpImm [Label24(div32_if_end_18)]
#       goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
70 d3 1d 00 

# :div32_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_20
# :div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# 01dd3 Copy32 [Register(0xb4), Register(0xc0)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
21 b4 c0 

# 01dd6 AddImm32IgnoreCarry [Register(0xc0), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
32 c0 01 00 00 00 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# 01ddc JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
70 8e 1b 00 

# :div32_while_end_8 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 01de0 Copy32 [Register(0xc0), Register(0xb4)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 c0 b4 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 01de3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 

# return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 01de9 Copy32 [Register(0xb4), Register(0x00)]
#       return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 b4 00 

# 01dec AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 01df2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_div32 None
# function_end_div32
# Unreachable None
# 01df4 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([227])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([228])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([228])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_i (Arg0 i Number(U8)) Reg(U8) Some([228])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_keyboard (global static "keyboard") Static(996608) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_keyboard_enable (global static "keyboard_enable") Static(996616) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_lcd_current (global static "lcd_current") Static(996620) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_lcd_display (global static "lcd_display") Static(996624) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_lcd_enable (global static "lcd_enable") Static(996704) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([229])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_stdin (global static "stdin") Static(996708) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([228])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([229])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 (t38c7 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([228])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([232, 233, 234, 235])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([232, 233, 234, 235])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([236, 237, 238, 239])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([229])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([240])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([228])
# Var keyboard (global static "keyboard") Static(995880) None
# Var keyboard_enable (global static "keyboard_enable") Static(995888) None
# Var lcd_current (global static "lcd_current") Static(995892) None
# Var lcd_display (global static "lcd_display") Static(995896) None
# Var lcd_enable (global static "lcd_enable") Static(995976) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([228])
# Var stdin (global static "stdin") Static(995980) None
# Var t1261 (t1261 Arithmetic(And, Ident("ch"), Number(U8, 15))) Reg(U8) Some([227])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([228])
# Var t263d (t263d Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })) Reg(U8) Some([227])
# Var t38dc (t38dc Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })) Reg(U8) Some([227])
# Var t62fa (t62fa Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })) Reg(U8) Some([227])
# Var t6e3a (t6e3a Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))) Reg(U8) Some([229])
# Var t7d80 (t7d80 Arithmetic(And, Ident("pos"), Number(U8, 15))) Reg(U8) Some([228])
# Var t8d12 (t8d12 Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))) Reg(U8) Some([229])
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([244, 245, 246, 247]) [2, 0, 0, 0]
# Var tb875 (tb875 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))) Reg(U8) Some([227])
# Var tbd94 (tbd94 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([227])
# Var tcd38 (tcd38 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))) Reg(U8) Some([228])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([228])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([227])
# Var tdf0 (tdf0 Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })) Reg(U8) Some([227])
# Var tec9e (tec9e Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))) Reg(U8) Some([228])
# 01df9 Copy8 [Register(0x00), Register(0xe4)]
#       Save function parameter 'i' registers [0] to locals [228].
0b 00 e4 

# 01dfc Copy8 [Register(0x04), Register(0xe3)]
#       Save function parameter 'ch' registers [4] to locals [227].
0b 04 e3 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(15,5))
# Assign { target: Ident("pos"), var_type: Some(Number(U8)), value: Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] }) }
# Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(15,5))\nAssign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_i <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(15,5))
# Assign { target: Ident("pos"), var_type: Some(Number(U8)), value: Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] }) }
# Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_i <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(15,5))\nAssign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
# Arithmetic(Divide, Ident("i"), Number(U8, 20))
# Ident("i")
# 01dff Copy8 [Register(0xe4), Register(0xf0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
#       Ident("i")
0b e4 f0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
# Arithmetic(Divide, Ident("i"), Number(U8, 20))
# 01e02 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
04 00 14 

# 01e05 Divide8 [Register(0xf0), Register(0x00), Register(0xe5)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
17 f0 00 e5 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Ident("i")
# 01e09 Copy8 [Register(0xe4), Register(0xf0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Ident("i")
0b e4 f0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Arithmetic(Multiply, Ident("row"), Number(U8, 20))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))\nArithmetic(Multiply, Ident(\"row\"), Number(U8, 20))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xe5), Register(0xe5)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Arithmetic(Multiply, Ident("row"), Number(U8, 20))
# 01e0c LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Arithmetic(Multiply, Ident("row"), Number(U8, 20))
04 00 14 

# 01e0f Mul8_8 [Register(0xe5), Register(0x00), Register(0xe4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Arithmetic(Multiply, Ident("row"), Number(U8, 20))
10 e5 00 e4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# 01e13 Copy8 [Register(0xe4), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
0b e4 00 

# 01e16 Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
02 00 

# 01e18 Add8NoCarryIn [Register(0xf0), Register(0x00), Register(0xe4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
14 f0 00 e4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 01e1c LoadImm32 [Register(0xec), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 ec 23 04 00 00 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xe5), Register(0xe5)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
# 01e22 LoadImm32 [Register(0xe8), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
20 e8 00 00 00 00 

# 01e28 Copy8 [Register(0xe5), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
0b e5 e8 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# 01e2b ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
03 

# 01e2c AddCarry32_1 [Register(0xec), Register(0xe8), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
30 ec e8 e8 

# 01e30 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 01e31 Load8 [Register(0xe8), Register(0xe5)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 e8 e5 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 01e34 Add8NoCarryIn [Register(0xe5), Register(0xe4), Register(0xe4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 e5 e4 e4 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: JmpImm, args: [Label24(inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })\nArithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
# 01e38 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
04 00 04 

# 01e3b Shift8 [Constant8(0x05=5), Register(0x00), Register(0xe4), Register(0xe5)]
#       t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
1e 05 00 e4 e5 

# t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# 01e40 OrImm8 [Register(0xe5), Constant8(0x08=8)]
#       t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
19 e5 08 

# None <= call io_write1(t6e3a,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# 01e43 Out1 [Register(0xe5)]
#       IoWrite1
69 e5 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# Arithmetic(And, Ident("pos"), Number(U8, 15))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })\nArithmetic(And, Ident(\"pos\"), Number(U8, 15))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# Arithmetic(And, Ident("pos"), Number(U8, 15))
# 01e45 AndImm8 [Register(0xe4), Constant8(0x0f=15)]
#       t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
#       Arithmetic(And, Ident("pos"), Number(U8, 15))
18 e4 0f 

# None <= call io_write1(t7d80,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# 01e48 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01e4a LoadImm32 [Register(0xf4), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 f4 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01e50 Copy32 [Register(0xf4), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 f4 00 

# Registers used by this function: {227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01e53 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e59 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 63 1e 00 00 

# 01e5f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01e63 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })\nArithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xe3), Register(0xe3)], resolved: None }
# tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
# 01e69 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
04 00 04 

# 01e6c Shift8 [Constant8(0x05=5), Register(0x00), Register(0xe3), Register(0xe4)]
#       tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
1e 05 00 e3 e4 

# tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# 01e71 OrImm8 [Register(0xe4), Constant8(0x80=128)]
#       tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
19 e4 80 

# None <= call io_write1(tcd38,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# 01e74 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# Arithmetic(And, Ident("ch"), Number(U8, 15))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })\nArithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))\nArithmetic(And, Ident(\"ch\"), Number(U8, 15))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xe3), Register(0xe3)], resolved: None }
# t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# Arithmetic(And, Ident("ch"), Number(U8, 15))
# 01e76 AndImm8 [Register(0xe3), Constant8(0x0f=15)]
#       t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
#       Arithmetic(And, Ident("ch"), Number(U8, 15))
18 e3 0f 

# tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# 01e79 OrImm8 [Register(0xe3), Constant8(0x80=128)]
#       tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
19 e3 80 

# None <= call io_write1(tb875,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# 01e7c Out1 [Register(0xe3)]
#       IoWrite1
69 e3 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01e7e LoadImm32 [Register(0xf4), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 f4 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01e84 Copy32 [Register(0xf4), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 f4 00 

# Registers used by this function: {227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01e87 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01e8d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 97 1e 00 00 

# 01e93 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01e97 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 01e9d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 01e9f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([248])
# Var keyboard (global static "keyboard") Static(996244) None
# Var keyboard_enable (global static "keyboard_enable") Static(996252) None
# Var lcd_current (global static "lcd_current") Static(996256) None
# Var lcd_display (global static "lcd_display") Static(996260) None
# Var lcd_enable (global static "lcd_enable") Static(996340) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(996344) None
# Var t0 (static "lcd_current" addr) Reg(U32) Some([252, 253, 254, 255])
# Var t1f11 (t1f11 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([248])
# Var t2bc4 (t2bc4 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([248])
# Var t385d (t385d Number(USIZE, 1)) Reg(U32) Some([252, 253, 254, 255]) [1, 0, 0, 0]
# Var t40c1 (t40c1 Number(U8, 2)) Reg(U8) Some([248]) [2]
# Var t7bb3 (t7bb3 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([248])
# Var t80a1 (t80a1 Number(U8, 12)) Reg(U8) Some([248]) [12]
# Var t8820 (t8820 Number(U8, 3)) Reg(U8) Some([248]) [3]
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([16]) [80]
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([252, 253, 254, 255]) [2, 0, 0, 0]
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([20, 21, 22, 23])
# Var t9bbb (t9bbb Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([248])
# Var t9f32 (t9f32 Number(U8, 8)) Reg(U8) Some([248]) [8]
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([16]) [32]
# Var tb018 (tb018 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([248])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([16]) [0]
# Var tb9f6 (tb9f6 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([248])
# Var tbd94 (tbd94 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([248])
# Var tc1fc (tc1fc Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([24, 25, 26, 27])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([248])
# Var td623 (td623 Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })) Reg(U8) Some([248])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([248]) [1]
# Consts t0: 0n996256/0x000f33a0u32
# Consts t80a1: 0n12/0x0cu8
# Consts t8fe0: 0n80/0x50u8
# Consts t9f32: 0n8/0x08u8
# Consts tac5f: 0n32/0x20u8
# Consts tfcd: 0n1/0x01u8
# t0 <- 0n996256/0x000f33a0u32  Some('/lutcomp/programs/lib/lcd.j':(65,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
# 01ea4 LoadImm32 [Register(0xfc), Constant32(0x000f33a0=996256)]
#       t0 <- 0n996256/0x000f33a0u32  Some('/lutcomp/programs/lib/lcd.j':(65,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
20 fc a0 33 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(65,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 01eaa LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(65,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 10 00 

# mem[t0] <- tb36e U8 Some('/lutcomp/programs/lib/lcd.j':(65,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
# 01ead Store8 [Register(0x10), Register(0xfc)]
#       mem[t0] <- tb36e U8 Some('/lutcomp/programs/lib/lcd.j':(65,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
06 10 fc 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(68,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 01eb0 LoadImm8 [Register(0xf8), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(68,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 f8 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xf8), Register(0xf8)], resolved: None }
# t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Number(U8, 80)
# 01eb3 LoadImm8 [Register(0x10), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
#       Number(U8, 80)
04 10 50 

# if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# 01eb6 Cmp8 [Register(0x10), Register(0xf8)]
#       if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
15 10 f8 

# 01eb9 JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
71 e0 1e 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(69,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xf8), Register(0xf8)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 01ebd LoadImm32 [Register(0x14), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 14 00 00 00 00 

# 01ec3 Copy8 [Register(0xf8), Register(0x14)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b f8 14 

# tc1fc <- t9725 Add Number(0n996260/0x000f33a4u32) Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 01ec6 Copy32 [Register(0x14), Register(0x18)]
#       tc1fc <- t9725 Add Number(0n996260/0x000f33a4u32) Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
21 14 18 

# 01ec9 AddImm32IgnoreCarry [Register(0x18), Constant32(0x000f33a4=996260)]
#       tc1fc <- t9725 Add Number(0n996260/0x000f33a4u32) Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 996260), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 18 a4 33 0f 00 

# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 01ecf LoadImm8 [Register(0x10), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 10 20 

# mem[tc1fc] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# 01ed2 Store8 [Register(0x10), Register(0x18)]
#       mem[tc1fc] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
06 10 18 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xf8), Register(0xf8)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 01ed5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 01ed8 Add8NoCarryIn [Register(0xf8), Register(0x00), Register(0xf8)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 f8 00 f8 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# 01edc JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(69,5))
70 b3 1e 00 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# lcd_init_while_end_2
# t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(74,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 01ee0 LoadImm8 [Register(0xf8), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(74,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 f8 03 

# None <= call io_write1(t8820,) Some('/lutcomp/programs/lib/lcd.j':(74,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 01ee3 Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(75,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 01ee5 LoadImm32 [Register(0xfc), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(75,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 fc 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(75,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 01eeb Copy32 [Register(0xfc), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(75,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 fc 00 

# Registers used by this function: {16, 20, 21, 22, 23, 24, 25, 26, 27, 248, 252, 253, 254, 255}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01eee AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01ef4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c fe 1e 00 00 

# 01efa JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01efe AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(76,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 01f04 LoadImm8 [Register(0xf8), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(76,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 f8 03 

# None <= call io_write1(t8820,) Some('/lutcomp/programs/lib/lcd.j':(76,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 01f07 Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(77,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 01f09 LoadImm32 [Register(0xfc), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(77,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 fc 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(77,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 01f0f Copy32 [Register(0xfc), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(77,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 fc 00 

# Registers used by this function: {16, 20, 21, 22, 23, 24, 25, 26, 27, 248, 252, 253, 254, 255}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01f12 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01f18 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 22 1f 00 00 

# 01f1e JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01f22 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 01f28 LoadImm8 [Register(0xf8), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 f8 03 

# None <= call io_write1(t8820,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 01f2b Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 01f2d LoadImm32 [Register(0xfc), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 fc 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 01f33 Copy32 [Register(0xfc), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 fc 00 

# Registers used by this function: {16, 20, 21, 22, 23, 24, 25, 26, 27, 248, 252, 253, 254, 255}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01f36 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01f3c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 46 1f 00 00 

# 01f42 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01f46 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t40c1 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# Number(U8, 2)
# 01f4c LoadImm8 [Register(0xf8), Constant8(0x02=2)]
#       t40c1 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
#       Number(U8, 2)
04 f8 02 

# None <= call io_write1(t40c1,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# 01f4f Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01f51 LoadImm32 [Register(0xfc), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 fc 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01f57 Copy32 [Register(0xfc), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 fc 00 

# Registers used by this function: {16, 20, 21, 22, 23, 24, 25, 26, 27, 248, 252, 253, 254, 255}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01f5a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01f60 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 6a 1f 00 00 

# 01f66 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01f6a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t40c1 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(84,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# Number(U8, 2)
# 01f70 LoadImm8 [Register(0xf8), Constant8(0x02=2)]
#       t40c1 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(84,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
#       Number(U8, 2)
04 f8 02 

# None <= call io_write1(t40c1,) Some('/lutcomp/programs/lib/lcd.j':(84,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# 01f73 Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# t9f32 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
# Number(U8, 8)
# 01f75 LoadImm8 [Register(0xf8), Constant8(0x08=8)]
#       t9f32 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
#       Number(U8, 8)
04 f8 08 

# None <= call io_write1(t9f32,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
# 01f78 Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01f7a LoadImm32 [Register(0xfc), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 fc 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01f80 Copy32 [Register(0xfc), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 fc 00 

# Registers used by this function: {16, 20, 21, 22, 23, 24, 25, 26, 27, 248, 252, 253, 254, 255}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01f83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01f89 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 93 1f 00 00 

# 01f8f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01f93 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# Number(U8, 0)
# 01f99 LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
#       Number(U8, 0)
04 10 00 

# None <= call io_write1(tb36e,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# 01f9c Out1 [Register(0x10)]
#       IoWrite1
69 10 

# t80a1 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
# Number(U8, 12)
# 01f9e LoadImm8 [Register(0xf8), Constant8(0x0c=12)]
#       t80a1 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
#       Number(U8, 12)
04 f8 0c 

# None <= call io_write1(t80a1,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
# 01fa1 Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01fa3 LoadImm32 [Register(0xfc), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 fc 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01fa9 Copy32 [Register(0xfc), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 fc 00 

# Registers used by this function: {16, 20, 21, 22, 23, 24, 25, 26, 27, 248, 252, 253, 254, 255}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01fac AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01fb2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c bc 1f 00 00 

# 01fb8 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01fbc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# Number(U8, 0)
# 01fc2 LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
#       Number(U8, 0)
04 10 00 

# None <= call io_write1(tb36e,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# 01fc5 Out1 [Register(0x10)]
#       IoWrite1
69 10 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
# Number(U8, 1)
# 01fc7 LoadImm8 [Register(0xf8), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
#       Number(U8, 1)
04 f8 01 

# None <= call io_write1(tfcd,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
# 01fca Out1 [Register(0xf8)]
#       IoWrite1
69 f8 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 01fcc LoadImm32 [Register(0xfc), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 fc 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 01fd2 Copy32 [Register(0xfc), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 fc 00 

# Registers used by this function: {16, 20, 21, 22, 23, 24, 25, 26, 27, 248, 252, 253, 254, 255}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167}
# Registers to save: []
# 01fd5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 01fdb StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c e5 1f 00 00 

# 01fe1 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 5e 18 00 

# 01fe5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 01feb JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 01fed Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([28])
# Var keyboard (global static "keyboard") Static(996972) None
# Var keyboard_enable (global static "keyboard_enable") Static(996980) None
# Var lcd_current (global static "lcd_current") Static(996984) None
# Var lcd_display (global static "lcd_display") Static(996988) None
# Var lcd_enable (global static "lcd_enable") Static(997068) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([28])
# Var stdin (global static "stdin") Static(997072) None
# Var t0 (static "lcd_current" addr) Reg(U32) Some([32, 33, 34, 35])
# Var t1 (static "lcd_current" addr) Reg(U32) Some([36, 37, 38, 39])
# Var t2 (static "lcd_current" addr) Reg(U32) Some([36, 37, 38, 39])
# Var t3 (static "lcd_current" addr) Reg(U32) Some([36, 37, 38, 39])
# Var t31c0 (t31c0 Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })) Reg(U8) Some([28])
# Var t4 (static "lcd_current" addr) Reg(U32) Some([40, 41, 42, 43])
# Var t4584 (t4584 Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))) Reg(U8) Some([44])
# Var t5 (static "lcd_current" addr) Reg(U32) Some([36, 37, 38, 39])
# Var t5880 (t5880 Call(Call { function: "lcd_scroll_up", parameters: [] })) Reg(U8) Some([28])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([44])
# Var t6 (static "lcd_current" addr) Reg(U32) Some([36, 37, 38, 39])
# Var t7 (static "lcd_current" addr) Reg(U32) Some([32, 33, 34, 35])
# Var t8 (static "lcd_current" addr) Reg(U32) Some([36, 37, 38, 39])
# Var t8658 (t8658 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))) Reg(U8) Some([28])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([28]) [80]
# Var t9 (static "lcd_current" addr) Reg(U32) Some([32, 33, 34, 35])
# Var t97f4 (t97f4 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([28])
# Var tab78 (tab78 Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([28])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([44]) [32]
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([36, 37, 38, 39])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([45]) [10]
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([28])
# Consts t0: 0n996984/0x000f3678u32
# Consts t1: 0n996984/0x000f3678u32
# Consts t2: 0n996984/0x000f3678u32
# Consts t3: 0n996984/0x000f3678u32
# Consts t4: 0n996984/0x000f3678u32
# Consts t5: 0n996984/0x000f3678u32
# Consts t6: 0n996984/0x000f3678u32
# Consts t7: 0n996984/0x000f3678u32
# Consts t8: 0n996984/0x000f3678u32
# Consts t8fe0: 0n80/0x50u8
# Consts t9: 0n996984/0x000f3678u32
# Consts tac5f: 0n32/0x20u8
# Consts td7b5: 0n10/0x0au8
# 01ff2 Copy8 [Register(0x00), Register(0x1c)]
#       Save function parameter 'ch' registers [0] to locals [28].
0b 00 1c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 01ff5 LoadImm8 [Register(0x2d), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 2d 0a 

# if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 01ff8 Cmp8 [Register(0x1c), Register(0x2d)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 1c 2d 

# 01ffb JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 03 20 00 

# 01fff JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 70 20 00 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 02003 LoadImm32 [Register(0x20), Constant32(0x000f3678=996984)]
#       t0 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
20 20 78 36 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 02009 Load8 [Register(0x20), Register(0x2c)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
05 20 2c 

# tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# 0200c LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
04 00 14 

# 0200f Divide8 [Register(0x2c), Register(0x00), Register(0x1c)]
#       tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
17 2c 00 1c 

# t8658 <- tab78 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# 02013 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t8658 <- tab78 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
04 00 01 

# 02016 Add8NoCarryIn [Register(0x1c), Register(0x00), Register(0x1c)]
#       t8658 <- tab78 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
14 1c 00 1c 

# next <- t8658 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# 0201a LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- t8658 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
04 00 14 

# 0201d Mul8_8 [Register(0x1c), Register(0x00), Register(0x1c)]
#       next <- t8658 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
10 1c 00 1c 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_while_predicate_3
# t1 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 02021 LoadImm32 [Register(0x24), Constant32(0x000f3678=996984)]
#       t1 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
20 24 78 36 0f 00 

# t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 02027 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
05 24 2c 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 0202a Cmp8 [Register(0x1c), Register(0x2c)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 1c 2c 

# 0202d JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 6c 20 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(47,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_while_body_4
# t2 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 02031 LoadImm32 [Register(0x24), Constant32(0x000f3678=996984)]
#       t2 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 24 78 36 0f 00 

# t5dda <- mem[t2] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 02037 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t2] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 24 2c 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# 0203a LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
20 24 00 00 00 00 

# 02040 Copy8 [Register(0x2c), Register(0x24)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
0b 2c 24 

# t97f4 <- tad4e Add Number(0n996988/0x000f367cu32) Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# 02043 AddImm32IgnoreCarry [Register(0x24), Constant32(0x000f367c=996988)]
#       t97f4 <- tad4e Add Number(0n996988/0x000f367cu32) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
32 24 7c 36 0f 00 

# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 02049 LoadImm8 [Register(0x2c), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 2c 20 

# mem[t97f4] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# 0204c Store8 [Register(0x2c), Register(0x24)]
#       mem[t97f4] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
06 2c 24 

# t3 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 0204f LoadImm32 [Register(0x24), Constant32(0x000f3678=996984)]
#       t3 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
20 24 78 36 0f 00 

# t4 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 02055 LoadImm32 [Register(0x28), Constant32(0x000f3678=996984)]
#       t4 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
20 28 78 36 0f 00 

# t5dda <- mem[t4] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 0205b Load8 [Register(0x28), Register(0x2c)]
#       t5dda <- mem[t4] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
05 28 2c 

# t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# 0205e LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
04 00 01 

# 02061 Add8NoCarryIn [Register(0x2c), Register(0x00), Register(0x2c)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
14 2c 00 2c 

# mem[t3] <- t4584 U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 02065 Store8 [Register(0x2c), Register(0x24)]
#       mem[t3] <- t4584 U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
06 2c 24 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# 02068 JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(47,5))
70 21 20 00 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# 0206c JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(47,5))
70 c9 20 00 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_if_else_0_2
# t5 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 02070 LoadImm32 [Register(0x24), Constant32(0x000f3678=996984)]
#       t5 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 24 78 36 0f 00 

# t5dda <- mem[t5] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 02076 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t5] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 24 2c 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# 02079 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
20 24 00 00 00 00 

# 0207f Copy8 [Register(0x2c), Register(0x24)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
0b 2c 24 

# t97f4 <- tad4e Add Number(0n996988/0x000f367cu32) Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# 02082 AddImm32IgnoreCarry [Register(0x24), Constant32(0x000f367c=996988)]
#       t97f4 <- tad4e Add Number(0n996988/0x000f367cu32) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 996988), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
32 24 7c 36 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# mem[t97f4] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 02088 Store8 [Register(0x1c), Register(0x24)]
#       mem[t97f4] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 1c 24 

# t6 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 0208b LoadImm32 [Register(0x24), Constant32(0x000f3678=996984)]
#       t6 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
20 24 78 36 0f 00 

# t5dda <- mem[t6] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 02091 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t6] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
05 24 2c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1c), Register(0x1c)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 02094 Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 2c 00 

# 02097 Copy8 [Register(0x1c), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 1c 04 

# Registers used by this function: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: []
# 0209a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 020a0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c aa 20 00 00 

# 020a6 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 f9 1d 00 

# 020aa AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t7 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 020b0 LoadImm32 [Register(0x20), Constant32(0x000f3678=996984)]
#       t7 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
20 20 78 36 0f 00 

# t8 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 020b6 LoadImm32 [Register(0x24), Constant32(0x000f3678=996984)]
#       t8 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
20 24 78 36 0f 00 

# t5dda <- mem[t8] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 020bc Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t8] U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
05 24 2c 

# t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# 020bf LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
04 00 01 

# 020c2 Add8NoCarryIn [Register(0x2c), Register(0x00), Register(0x2c)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
14 2c 00 2c 

# mem[t7] <- t4584 U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 020c6 Store8 [Register(0x2c), Register(0x20)]
#       mem[t7] <- t4584 U8 Some('/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
06 2c 20 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_if_end_0
# t9 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Ident("lcd_current")
# 020c9 LoadImm32 [Register(0x20), Constant32(0x000f3678=996984)]
#       t9 <- 0n996984/0x000f3678u32  Some('/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Ident("lcd_current")
20 20 78 36 0f 00 

# t5dda <- mem[t9] U8 Some('/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Ident("lcd_current")
# 020cf Load8 [Register(0x20), Register(0x2c)]
#       t5dda <- mem[t9] U8 Some('/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Ident("lcd_current")
05 20 2c 

# t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Number(U8, 80)
# 020d2 LoadImm8 [Register(0x1c), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Number(U8, 80)
04 1c 50 

# if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# 020d5 Cmp8 [Register(0x1c), Register(0x2c)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
15 1c 2c 

# 020d8 JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
71 e0 20 00 

# 020dc JmpImm [Label24(lcd_putc_if_else_0_8)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
70 fa 20 00 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(59,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: []
# 020e0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 020e6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c f0 20 00 00 

# 020ec JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 01 21 00 

# 020f0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(59,5))
# 020f6 JmpImm [Label24(lcd_putc_if_end_6)]
#       goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(59,5))
70 fa 20 00 

# :lcd_putc_if_else_0_8 Some('/lutcomp/programs/lib/lcd.j':(59,5))
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(59,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 020fa JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 020fc Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([46])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([47])
# Var keyboard (global static "keyboard") Static(997336) None
# Var keyboard_enable (global static "keyboard_enable") Static(997344) None
# Var lcd_current (global static "lcd_current") Static(997348) None
# Var lcd_display (global static "lcd_display") Static(997352) None
# Var lcd_enable (global static "lcd_enable") Static(997432) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(997436) None
# Var t0 (static "lcd_current" addr) Reg(U32) Some([48, 49, 50, 51])
# Var t1 (static "lcd_current" addr) Reg(U32) Some([52, 53, 54, 55])
# Var t21b4 (t21b4 Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })) Reg(U8) Some([46])
# Var t2aa3 (t2aa3 Number(U8, 60)) Reg(U8) Some([46]) [60]
# Var t5985 (t5985 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }) Reg(U32) Some([48, 49, 50, 51])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([47])
# Var t7e9 (t7e9 Arithmetic(Add, Ident("i"), Number(U8, 20))) Reg(U8) Some([46])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([46]) [80]
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([56, 57, 58, 59])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([46]) [32]
# Var tb02d (tb02d Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })) Reg(U8) Some([46])
# Var tb175 (tb175 Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([47])
# Var tc639 (tc639 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([56, 57, 58, 59])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([47])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([46])
# Var tfd7d (tfd7d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) Reg(U32) Some([48, 49, 50, 51])
# Consts t0: 0n997348/0x000f37e4u32
# Consts t1: 0n997348/0x000f37e4u32
# Consts t2aa3: 0n60/0x3cu8
# Consts t8fe0: 0n80/0x50u8
# t0 <- 0n997348/0x000f37e4u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# 02101 LoadImm32 [Register(0x30), Constant32(0x000f37e4=997348)]
#       t0 <- 0n997348/0x000f37e4u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
20 30 e4 37 0f 00 

# t1 <- 0n997348/0x000f37e4u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 02107 LoadImm32 [Register(0x34), Constant32(0x000f37e4=997348)]
#       t1 <- 0n997348/0x000f37e4u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
20 34 e4 37 0f 00 

# t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 0210d Load8 [Register(0x34), Register(0x2f)]
#       t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
05 34 2f 

# tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# 02110 LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
04 00 ec 

# 02113 Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
14 2f 00 2f 

# mem[t0] <- tb175 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# 02117 Store8 [Register(0x2f), Register(0x30)]
#       mem[t0] <- tb175 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
06 2f 30 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 0211a LoadImm8 [Register(0x2f), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 2f 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t2aa3 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# Number(U8, 60)
# 0211d LoadImm8 [Register(0x2e), Constant8(0x3c=60)]
#       t2aa3 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
#       Number(U8, 60)
04 2e 3c 

# if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# 02120 Cmp8 [Register(0x2e), Register(0x2f)]
#       if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
15 2e 2f 

# 02123 JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
71 79 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# Arithmetic(Add, Ident("i"), Number(U8, 20))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }\nArithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 20))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# Arithmetic(Add, Ident("i"), Number(U8, 20))
# 02127 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 20))
04 00 14 

# 0212a Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2e)]
#       t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 20))
14 2f 00 2e 

# tfd7d U32 <- t7e9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# 0212e LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for tfd7d U32 <- t7e9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
20 30 00 00 00 00 

# 02134 Copy8 [Register(0x2e), Register(0x30)]
#       tfd7d U32 <- t7e9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
0b 2e 30 

# t5985 <- tfd7d Add Number(0n997352/0x000f37e8u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# 02137 AddImm32IgnoreCarry [Register(0x30), Constant32(0x000f37e8=997352)]
#       t5985 <- tfd7d Add Number(0n997352/0x000f37e8u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
32 30 e8 37 0f 00 

# ch <- mem[t5985] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# 0213d Load8 [Register(0x30), Register(0x2e)]
#       ch <- mem[t5985] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
05 30 2e 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 02140 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 38 00 00 00 00 

# 02146 Copy8 [Register(0x2f), Register(0x38)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 2f 38 

# tc639 <- t9725 Add Number(0n997352/0x000f37e8u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 02149 AddImm32IgnoreCarry [Register(0x38), Constant32(0x000f37e8=997352)]
#       tc639 <- t9725 Add Number(0n997352/0x000f37e8u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 38 e8 37 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x2e), Register(0x2e)], resolved: None }
# mem[tc639] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 0214f Store8 [Register(0x2e), Register(0x38)]
#       mem[tc639] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 2e 38 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x2e), Register(0x2e)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 02152 Copy8 [Register(0x2f), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 2f 00 

# 02155 Copy8 [Register(0x2e), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 2e 04 

# Registers used by this function: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: []
# 02158 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 0215e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 68 21 00 00 

# 02164 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 f9 1d 00 

# 02168 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 0216e LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 02171 Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 2f 00 2f 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 02175 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 1d 21 00 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_predicate_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Number(U8, 80)
# 02179 LoadImm8 [Register(0x2e), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
#       Number(U8, 80)
04 2e 50 

# if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# 0217c Cmp8 [Register(0x2e), Register(0x2f)]
#       if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
15 2e 2f 

# 0217f JcImm [Label24(lcd_scroll_up_while_end_5)]
#       if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
71 c2 21 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(39,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_4)], resolved: None }
# :lcd_scroll_up_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_body_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 02183 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 38 00 00 00 00 

# 02189 Copy8 [Register(0x2f), Register(0x38)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 2f 38 

# tc639 <- t9725 Add Number(0n997352/0x000f37e8u32) Some('/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 0218c AddImm32IgnoreCarry [Register(0x38), Constant32(0x000f37e8=997352)]
#       tc639 <- t9725 Add Number(0n997352/0x000f37e8u32) Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 997352), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 38 e8 37 0f 00 

# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 02192 LoadImm8 [Register(0x2e), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 2e 20 

# mem[tc639] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# 02195 Store8 [Register(0x2e), Register(0x38)]
#       mem[tc639] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
06 2e 38 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# Number(U8, 32)
# 02198 LoadImm8 [Register(0x2e), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
#       Number(U8, 32)
04 2e 20 

# None <= call lcd_draw_char(td0f3,tac5f,) Some('/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# 0219b Copy8 [Register(0x2f), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tac5f,) Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
0b 2f 00 

# 0219e Copy8 [Register(0x2e), Register(0x04)]
#       Arg1[ch]=tac5f None <= call lcd_draw_char(td0f3,tac5f,) Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
0b 2e 04 

# Registers used by this function: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}
# Registers used by callee tree: {160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: []
# 021a1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 021a7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c b1 21 00 00 

# 021ad JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 f9 1d 00 

# 021b1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(39,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 021b7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 021ba Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 2f 00 2f 

# goto lcd_scroll_up_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# 021be JmpImm [Label24(lcd_scroll_up_while_predicate_3)]
#       goto lcd_scroll_up_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(39,5))
70 79 21 00 

# :lcd_scroll_up_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(39,5))
# lcd_scroll_up_while_end_5
# return None None
# Return { value: None }
# 021c2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 021c4 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var calc (Local calc Struct("RpnCalc") Static(998064)) Static(998064) None
# Var inline_main_RpnCalc_init_51_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_RpnCalc_init_51_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_keyboard (global static "keyboard") Static(1005420) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_keyboard_enable (global static "keyboard_enable") Static(1005428) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_lcd_current (global static "lcd_current") Static(1005432) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_lcd_display (global static "lcd_display") Static(1005436) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_lcd_enable (global static "lcd_enable") Static(1005516) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_stdin (global static "stdin") Static(1005520) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67]) [0, 0, 0, 0]
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_RpnCalc_init_51_keyboard (global static "keyboard") Static(988592) None
# Var inline_main_RpnCalc_init_51_keyboard_enable (global static "keyboard_enable") Static(988600) None
# Var inline_main_RpnCalc_init_51_lcd_current (global static "lcd_current") Static(988604) None
# Var inline_main_RpnCalc_init_51_lcd_display (global static "lcd_display") Static(988608) None
# Var inline_main_RpnCalc_init_51_lcd_enable (global static "lcd_enable") Static(988688) None
# Var inline_main_RpnCalc_init_51_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_RpnCalc_init_51_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_stdin (global static "stdin") Static(988692) None
# Var inline_main_RpnCalc_init_51_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63]) [0, 0, 0, 0]
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_51_tb2e9 (tb2e9 Ident("s")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_51_tf462 (tf462 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([72])
# Var inline_main_putc_25_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_putc_25_c (Arg0 c Number(U8)) Reg(U8) Some([72])
# Var inline_main_putc_25_keyboard (global static "keyboard") Static(1002508) None
# Var inline_main_putc_25_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_main_putc_25_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_main_putc_25_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_main_putc_25_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_main_putc_25_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_putc_25_stdin (global static "stdin") Static(1002608) None
# Var inline_main_putc_25_t0 (static "lcd_enable" addr) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_putc_25_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_25_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_25_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([73])
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([72])
# Var inline_main_putc_25_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([74]) [0]
# Var inline_main_putc_26_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_putc_26_c (Arg0 c Number(U8)) Reg(U8) Some([72])
# Var inline_main_putc_26_keyboard (global static "keyboard") Static(1002508) None
# Var inline_main_putc_26_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_main_putc_26_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_main_putc_26_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_main_putc_26_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_main_putc_26_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_putc_26_stdin (global static "stdin") Static(1002608) None
# Var inline_main_putc_26_t0 (static "lcd_enable" addr) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_putc_26_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_26_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_26_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([73])
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([72])
# Var inline_main_putc_26_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([74]) [0]
# Var inline_main_putc_27_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_putc_27_c (Arg0 c Number(U8)) Reg(U8) Some([72])
# Var inline_main_putc_27_keyboard (global static "keyboard") Static(1002508) None
# Var inline_main_putc_27_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_main_putc_27_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_main_putc_27_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_main_putc_27_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_main_putc_27_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_putc_27_stdin (global static "stdin") Static(1002608) None
# Var inline_main_putc_27_t0 (static "lcd_enable" addr) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_putc_27_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_27_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_27_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([73])
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([72])
# Var inline_main_putc_27_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([74]) [0]
# Var inline_main_putc_28_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_main_putc_28_c (Arg0 c Number(U8)) Reg(U8) Some([72])
# Var inline_main_putc_28_keyboard (global static "keyboard") Static(1002508) None
# Var inline_main_putc_28_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_main_putc_28_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_main_putc_28_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_main_putc_28_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_main_putc_28_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_main_putc_28_stdin (global static "stdin") Static(1002608) None
# Var inline_main_putc_28_t0 (static "lcd_enable" addr) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_putc_28_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_28_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_28_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([73])
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([72])
# Var inline_main_putc_28_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([74]) [0]
# Var keyboard (global static "keyboard") Static(997700) None
# Var keyboard_enable (global static "keyboard_enable") Static(997708) None
# Var lcd_current (global static "lcd_current") Static(997712) None
# Var lcd_display (global static "lcd_display") Static(997716) None
# Var lcd_enable (global static "lcd_enable") Static(997796) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(997800) None
# Var t0 (static "calc" addr) Reg(U32) Some([60, 61, 62, 63])
# Var t1 (static "calc" addr) Reg(U32) Some([60, 61, 62, 63])
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([72])
# Var t71d9 (t71d9 Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([72])
# Var t7ddc (t7ddc Call(Call { function: "putc", parameters: [Number(U8, 78)] })) Reg(U8) Some([72])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([72]) [80]
# Var t9c38 (t9c38 Number(U8, 82)) Reg(U8) Some([72]) [82]
# Var tb303 (tb303 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([72])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([60, 61, 62, 63])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([72]) [10]
# Var tdcaa (tdcaa Call(Call { function: "stdio_init", parameters: [] })) Reg(U8) Some([72])
# Var te6fd (te6fd Number(U8, 78)) Reg(U8) Some([72]) [78]
# Var te7a4 (te7a4 Call(Call { function: "putc", parameters: [Number(U8, 80)] })) Reg(U8) Some([72])
# Var tec99 (tec99 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([72])
# Consts t0: 0n998064/0x000f3ab0u32
# Consts t1: 0n998064/0x000f3ab0u32
# Consts t8fe0: 0n80/0x50u8
# Consts t9c38: 0n82/0x52u8
# Consts td7b5: 0n10/0x0au8
# Consts te6fd: 0n78/0x4eu8
# None <= call stdio_init() Some('programs/app/rpn.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 160, 161, 162, 163, 164, 165, 166, 167, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 226, 248, 252, 253, 254, 255}
# Registers to save: []
# 021c9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 021cf StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c d9 21 00 00 

# 021d5 JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 9c 2a 00 

# 021d9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# t9c38 <- 0n82/0x52u8  Some('programs/app/rpn.j':(6,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 021df LoadImm8 [Register(0x48), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('programs/app/rpn.j':(6,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 48 52 

# inline_main_putc_25_c <- t9c38 U8 Some('programs/app/rpn.j':(6,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_main_putc_25_c <- t9c38 U8 Some('programs/app/rpn.j':(6,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_putc_25_tac13 <- inline_main_putc_25_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_25_tac13 <- inline_main_putc_25_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call io_write0(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 021e2 Out0 [Register(0x48)]
#       IoWrite0
68 48 

# inline_main_putc_25_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 021e4 LoadImm32 [Register(0x40), Constant32(0x000f4c6c=1002604)]
#       inline_main_putc_25_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 40 6c 4c 0f 00 

# inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 021ea Load8 [Register(0x40), Register(0x49)]
#       inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 40 49 

# inline_main_putc_25_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 021ed LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_main_putc_25_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 4a 00 

# if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 021f0 Cmp8 [Register(0x49), Register(0x4a)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 49 4a 

# 021f3 JzImm [Label24(inline_main_putc_25_putc_if_else_0_2)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 14 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_25_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_25_putc_if_true_0_1
# inline_main_putc_25_tac13 <- inline_main_putc_25_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_25_tac13 <- inline_main_putc_25_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 021f7 Copy8 [Register(0x48), Register(0x00)]
#       Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 48 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: []
# 021fa AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02200 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 0a 22 00 00 

# 02206 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 0220a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 02210 JmpImm [Label24(inline_main_putc_25_putc_if_end_0)]
#       goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 14 22 00 

# :inline_main_putc_25_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_else_0_2
# :inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_end_0
# goto inline_main_putc_25_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_25_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_function_end_putc)], resolved: None }
# :inline_main_putc_25_function_end_putc None
# inline_main_putc_25_function_end_putc
# t8fe0 <- 0n80/0x50u8  Some('programs/app/rpn.j':(10,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 80)] })
# Number(U8, 80)
# 02214 LoadImm8 [Register(0x48), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('programs/app/rpn.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 80)] })
#       Number(U8, 80)
04 48 50 

# inline_main_putc_26_c <- t8fe0 U8 Some('programs/app/rpn.j':(10,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 80)] })
# optimized away noop copy Instruction { source: "inline_main_putc_26_c <- t8fe0 U8 Some('programs/app/rpn.j':(10,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 80)] })\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_putc_26_tac13 <- inline_main_putc_26_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_26_tac13 <- inline_main_putc_26_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call io_write0(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02217 Out0 [Register(0x48)]
#       IoWrite0
68 48 

# inline_main_putc_26_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 02219 LoadImm32 [Register(0x40), Constant32(0x000f4c6c=1002604)]
#       inline_main_putc_26_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 40 6c 4c 0f 00 

# inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 0221f Load8 [Register(0x40), Register(0x49)]
#       inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 40 49 

# inline_main_putc_26_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 02222 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_main_putc_26_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 4a 00 

# if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 02225 Cmp8 [Register(0x49), Register(0x4a)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 49 4a 

# 02228 JzImm [Label24(inline_main_putc_26_putc_if_else_0_2)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 49 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_26_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_26_putc_if_true_0_1
# inline_main_putc_26_tac13 <- inline_main_putc_26_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_26_tac13 <- inline_main_putc_26_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 0222c Copy8 [Register(0x48), Register(0x00)]
#       Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 48 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: []
# 0222f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02235 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 3f 22 00 00 

# 0223b JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 0223f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 02245 JmpImm [Label24(inline_main_putc_26_putc_if_end_0)]
#       goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 49 22 00 

# :inline_main_putc_26_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_else_0_2
# :inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_end_0
# goto inline_main_putc_26_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_26_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_function_end_putc)], resolved: None }
# :inline_main_putc_26_function_end_putc None
# inline_main_putc_26_function_end_putc
# t0 <- 0n998064/0x000f3ab0u32  Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# 02249 LoadImm32 [Register(0x3c), Constant32(0x000f3ab0=998064)]
#       t0 <- 0n998064/0x000f3ab0u32  Some('programs/app/rpn.j':(12,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
20 3c b0 3a 0f 00 

# tca8 <- t0 U32 Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# optimized away noop copy Instruction { source: "tca8 <- t0 U32 Some('programs/app/rpn.j':(12,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })\nAddressOf(Ident(\"calc\"))\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_51_c <- tca8 U32 Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_c <- tca8 U32 Some('programs/app/rpn.j':(12,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_51_tbc15 <- inline_main_RpnCalc_init_51_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tbc15 <- inline_main_RpnCalc_init_51_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(14,5))\nAssign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_51_s <- inline_main_RpnCalc_init_51_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 0224f Copy32 [Register(0x3c), Register(0x40)]
#       inline_main_RpnCalc_init_51_s <- inline_main_RpnCalc_init_51_tbc15 U32 Some('/lutcomp/programs/lib/rpnlib.j':(14,5))
#       Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 40 

# inline_main_RpnCalc_init_51_tb2e9 <- inline_main_RpnCalc_init_51_s U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tb2e9 <- inline_main_RpnCalc_init_51_s U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_tb2e9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_tb2e9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 02252 Copy32 [Register(0x40), Register(0x44)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 44 

# 02255 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000040=64)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 44 40 00 00 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 0225b LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# 02261 Store32_1 [Register(0x40), Register(0x44)]
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
23 40 44 

# 02264 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_main_RpnCalc_init_51_tb1ed <- inline_main_RpnCalc_init_51_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tb1ed <- inline_main_RpnCalc_init_51_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 02265 Copy32 [Register(0x3c), Register(0x40)]
#       inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 40 

# 02268 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 0226e LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 02274 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 

# 02277 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# te6fd <- 0n78/0x4eu8  Some('programs/app/rpn.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 78)] })
# Number(U8, 78)
# 02278 LoadImm8 [Register(0x48), Constant8(0x4e=78)]
#       te6fd <- 0n78/0x4eu8  Some('programs/app/rpn.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 78)] })
#       Number(U8, 78)
04 48 4e 

# inline_main_putc_27_c <- te6fd U8 Some('programs/app/rpn.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 78)] })
# optimized away noop copy Instruction { source: "inline_main_putc_27_c <- te6fd U8 Some('programs/app/rpn.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 78)] })\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_putc_27_tac13 <- inline_main_putc_27_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_27_tac13 <- inline_main_putc_27_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call io_write0(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0227b Out0 [Register(0x48)]
#       IoWrite0
68 48 

# inline_main_putc_27_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 0227d LoadImm32 [Register(0x40), Constant32(0x000f4c6c=1002604)]
#       inline_main_putc_27_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 40 6c 4c 0f 00 

# inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 02283 Load8 [Register(0x40), Register(0x49)]
#       inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 40 49 

# inline_main_putc_27_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 02286 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_main_putc_27_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 4a 00 

# if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 02289 Cmp8 [Register(0x49), Register(0x4a)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 49 4a 

# 0228c JzImm [Label24(inline_main_putc_27_putc_if_else_0_2)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 ad 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_27_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_27_putc_if_true_0_1
# inline_main_putc_27_tac13 <- inline_main_putc_27_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_27_tac13 <- inline_main_putc_27_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02290 Copy8 [Register(0x48), Register(0x00)]
#       Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 48 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: []
# 02293 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02299 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c a3 22 00 00 

# 0229f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 022a3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 022a9 JmpImm [Label24(inline_main_putc_27_putc_if_end_0)]
#       goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 ad 22 00 

# :inline_main_putc_27_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_else_0_2
# :inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_end_0
# goto inline_main_putc_27_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_27_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_function_end_putc)], resolved: None }
# :inline_main_putc_27_function_end_putc None
# inline_main_putc_27_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('programs/app/rpn.j':(15,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 022ad LoadImm8 [Register(0x48), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/app/rpn.j':(15,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 48 0a 

# inline_main_putc_28_c <- td7b5 U8 Some('programs/app/rpn.j':(15,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_main_putc_28_c <- td7b5 U8 Some('programs/app/rpn.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_putc_28_tac13 <- inline_main_putc_28_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_28_tac13 <- inline_main_putc_28_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call io_write0(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 022b0 Out0 [Register(0x48)]
#       IoWrite0
68 48 

# inline_main_putc_28_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 022b2 LoadImm32 [Register(0x40), Constant32(0x000f4c6c=1002604)]
#       inline_main_putc_28_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 40 6c 4c 0f 00 

# inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 022b8 Load8 [Register(0x40), Register(0x49)]
#       inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 40 49 

# inline_main_putc_28_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 022bb LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_main_putc_28_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 4a 00 

# if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 022be Cmp8 [Register(0x49), Register(0x4a)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 49 4a 

# 022c1 JzImm [Label24(inline_main_putc_28_putc_if_else_0_2)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 e2 22 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_28_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_28_putc_if_true_0_1
# inline_main_putc_28_tac13 <- inline_main_putc_28_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_28_tac13 <- inline_main_putc_28_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 022c5 Copy8 [Register(0x48), Register(0x00)]
#       Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 48 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: []
# 022c8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 022ce StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c d8 22 00 00 

# 022d4 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 022d8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 022de JmpImm [Label24(inline_main_putc_28_putc_if_end_0)]
#       goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 e2 22 00 

# :inline_main_putc_28_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_else_0_2
# :inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_end_0
# goto inline_main_putc_28_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_28_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_function_end_putc)], resolved: None }
# :inline_main_putc_28_function_end_putc None
# inline_main_putc_28_function_end_putc
# t1 <- 0n998064/0x000f3ab0u32  Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# 022e2 LoadImm32 [Register(0x3c), Constant32(0x000f3ab0=998064)]
#       t1 <- 0n998064/0x000f3ab0u32  Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
20 3c b0 3a 0f 00 

# tca8 <- t1 U32 Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# optimized away noop copy Instruction { source: "tca8 <- t1 U32 Some('programs/app/rpn.j':(17,5))\nReturn { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }\nCall(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })\nAddressOf(Ident(\"calc\"))\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 022e8 Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 3c 00 

# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74}
# Registers used by callee tree: {21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74]
# 022eb Push8 [Register(0x4a)]
#       Saving reg0x4a before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 4a 

# 022ed Push8 [Register(0x49)]
#       Saving reg0x49 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 49 

# 022ef Push8 [Register(0x48)]
#       Saving reg0x48 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 48 

# 022f1 Push8 [Register(0x45)]
#       Saving reg0x45 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 45 

# 022f3 Push8 [Register(0x44)]
#       Saving reg0x44 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 44 

# 022f5 Push8 [Register(0x43)]
#       Saving reg0x43 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 43 

# 022f7 Push8 [Register(0x42)]
#       Saving reg0x42 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 42 

# 022f9 Push8 [Register(0x41)]
#       Saving reg0x41 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 41 

# 022fb Push8 [Register(0x40)]
#       Saving reg0x40 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 40 

# 022fd Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3f 

# 022ff Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3e 

# 02301 Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3d 

# 02303 Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3c 

# 02305 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 

# 0230b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c 15 23 00 00 

# 02311 JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 8f 16 00 

# 02315 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 

# 0231b Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3c 

# 0231d Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3d 

# 0231f Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3e 

# 02321 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3f 

# 02323 Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 40 

# 02325 Pop8 [Register(0x41)]
#       Restoring reg0x41 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 41 

# 02327 Pop8 [Register(0x42)]
#       Restoring reg0x42 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 42 

# 02329 Pop8 [Register(0x43)]
#       Restoring reg0x43 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 43 

# 0232b Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 44 

# 0232d Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 45 

# 0232f Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 48 

# 02331 Pop8 [Register(0x49)]
#       Restoring reg0x49 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 49 

# 02333 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 4a 

# 02335 Copy8 [Register(0x00), Register(0x48)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 48 

# return Some(t2a99) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# 02338 Copy8 [Register(0x48), Register(0x00)]
#       return Some(t2a99) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
0b 48 00 

# 0233b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_main None
# function_end_main
# Unreachable None
# 0233d Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_0_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_0_keyboard (global static "keyboard") Static(990048) None
# Var inline_mul32_64_add_U64_0_keyboard_enable (global static "keyboard_enable") Static(990056) None
# Var inline_mul32_64_add_U64_0_lcd_current (global static "lcd_current") Static(990060) None
# Var inline_mul32_64_add_U64_0_lcd_display (global static "lcd_display") Static(990064) None
# Var inline_mul32_64_add_U64_0_lcd_enable (global static "lcd_enable") Static(990144) None
# Var inline_mul32_64_add_U64_0_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_stdin (global static "stdin") Static(990148) None
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t24ae (t24ae Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_0_t3203 (t3203 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_teec0 (teec0 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_1_keyboard (global static "keyboard") Static(990048) None
# Var inline_mul32_64_add_U64_1_keyboard_enable (global static "keyboard_enable") Static(990056) None
# Var inline_mul32_64_add_U64_1_lcd_current (global static "lcd_current") Static(990060) None
# Var inline_mul32_64_add_U64_1_lcd_display (global static "lcd_display") Static(990064) None
# Var inline_mul32_64_add_U64_1_lcd_enable (global static "lcd_enable") Static(990144) None
# Var inline_mul32_64_add_U64_1_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_1_stdin (global static "stdin") Static(990148) None
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t24ae (t24ae Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_1_t3203 (t3203 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_1_teec0 (teec0 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_keyboard (global static "keyboard") Static(998140) None
# Var inline_mul32_64_mul16_32_10_keyboard_enable (global static "keyboard_enable") Static(998148) None
# Var inline_mul32_64_mul16_32_10_lcd_current (global static "lcd_current") Static(998152) None
# Var inline_mul32_64_mul16_32_10_lcd_display (global static "lcd_display") Static(998156) None
# Var inline_mul32_64_mul16_32_10_lcd_enable (global static "lcd_enable") Static(998236) None
# Var inline_mul32_64_mul16_32_10_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_mul32_64_mul16_32_10_stdin (global static "stdin") Static(998240) None
# Var inline_mul32_64_mul16_32_10_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_10_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_10_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([118])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_10_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([119]) [0]
# Var inline_mul32_64_mul16_32_10_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_10_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_11_keyboard (global static "keyboard") Static(998140) None
# Var inline_mul32_64_mul16_32_11_keyboard_enable (global static "keyboard_enable") Static(998148) None
# Var inline_mul32_64_mul16_32_11_lcd_current (global static "lcd_current") Static(998152) None
# Var inline_mul32_64_mul16_32_11_lcd_display (global static "lcd_display") Static(998156) None
# Var inline_mul32_64_mul16_32_11_lcd_enable (global static "lcd_enable") Static(998236) None
# Var inline_mul32_64_mul16_32_11_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_mul32_64_mul16_32_11_stdin (global static "stdin") Static(998240) None
# Var inline_mul32_64_mul16_32_11_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_11_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_11_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([121])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_11_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_11_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([122]) [0]
# Var inline_mul32_64_mul16_32_11_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_11_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([121])
# Var inline_mul32_64_mul16_32_11_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_11_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(USIZE)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_8_keyboard (global static "keyboard") Static(998140) None
# Var inline_mul32_64_mul16_32_8_keyboard_enable (global static "keyboard_enable") Static(998148) None
# Var inline_mul32_64_mul16_32_8_lcd_current (global static "lcd_current") Static(998152) None
# Var inline_mul32_64_mul16_32_8_lcd_display (global static "lcd_display") Static(998156) None
# Var inline_mul32_64_mul16_32_8_lcd_enable (global static "lcd_enable") Static(998236) None
# Var inline_mul32_64_mul16_32_8_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_mul32_64_mul16_32_8_stdin (global static "stdin") Static(998240) None
# Var inline_mul32_64_mul16_32_8_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_8_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_8_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([123])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_8_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_8_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([124]) [0]
# Var inline_mul32_64_mul16_32_8_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_8_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([123])
# Var inline_mul32_64_mul16_32_8_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_8_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_9_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(USIZE)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_9_keyboard (global static "keyboard") Static(998140) None
# Var inline_mul32_64_mul16_32_9_keyboard_enable (global static "keyboard_enable") Static(998148) None
# Var inline_mul32_64_mul16_32_9_lcd_current (global static "lcd_current") Static(998152) None
# Var inline_mul32_64_mul16_32_9_lcd_display (global static "lcd_display") Static(998156) None
# Var inline_mul32_64_mul16_32_9_lcd_enable (global static "lcd_enable") Static(998236) None
# Var inline_mul32_64_mul16_32_9_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_mul32_64_mul16_32_9_stdin (global static "stdin") Static(998240) None
# Var inline_mul32_64_mul16_32_9_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_9_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_9_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([123])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_9_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_9_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([124]) [0]
# Var inline_mul32_64_mul16_32_9_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_9_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([123])
# Var inline_mul32_64_mul16_32_9_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_9_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([112, 113, 114, 115])
# Var keyboard (global static "keyboard") Static(998868) None
# Var keyboard_enable (global static "keyboard_enable") Static(998876) None
# Var lcd_current (global static "lcd_current") Static(998880) None
# Var lcd_display (global static "lcd_display") Static(998884) None
# Var lcd_enable (global static "lcd_enable") Static(998964) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(998968) None
# Var t0 (Stack size negated) Reg(U32) Some([128, 129, 130, 131]) [248, 255, 255, 255]
# Var t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([132, 133, 134, 135])
# Var t1f52 (t1f52 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([136])
# Var t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([92, 93, 94, 95])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([80, 81, 82, 83])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([80, 81, 82, 83])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([84, 85, 86, 87])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([80, 81, 82, 83])
# Var t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([120])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([96, 97, 98, 99])
# Var t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([120])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([88, 89, 90, 91])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([96, 97, 98, 99])
# Var t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([118])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([76, 77, 78, 79])
# Var t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([92, 93, 94, 95])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([80, 81, 82, 83])
# Var t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([118])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var tb6b4 (tb6b4 Index("temp", Number(U8, 3))) Reg(U8) Some([116])
# Var tc89e (tc89e Index("temp", Number(U8, 0))) Reg(U8) Some([116])
# Var tdc08 (tdc08 Index("temp", Number(U8, 1))) Reg(U8) Some([116])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([128, 129, 130, 131])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([128, 129, 130, 131])
# Var temp (Local temp Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var temp64 (Local temp64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# Var temp_hi (Local temp_hi Number(USIZE) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var temp_lo (Local temp_lo Number(USIZE) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var tf338 (tf338 Index("temp", Number(U8, 2))) Reg(U8) Some([116])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([84, 85, 86, 87])
# 02342 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 02348 Copy32 [Register(0x00), Register(0x4c)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [76, 77, 78, 79].
21 00 4c 

# 0234b Copy32 [Register(0x04), Register(0x54)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [84, 85, 86, 87].
21 04 54 

# 0234e Copy32 [Register(0x08), Register(0x5c)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [92, 93, 94, 95].
21 08 5c 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 02351 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 02357 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 50 00 00 00 00 

# t5b7c <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# Index("a", Number(U8, 3))
# 0235d Copy8 [Register(0x4f), Register(0x78)]
#       t5b7c <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
#       Index("a", Number(U8, 3))
0b 4f 78 

# a_hi[0x01..0x02] <- t5b7c U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# 02360 Copy8 [Register(0x78), Register(0x51)]
#       a_hi[0x01..0x02] <- t5b7c U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
0b 78 51 

# t577f <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# Index("a", Number(U8, 2))
# 02363 Copy8 [Register(0x4e), Register(0x78)]
#       t577f <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
#       Index("a", Number(U8, 2))
0b 4e 78 

# a_hi[0x00..0x01] <- t577f U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# 02366 Copy8 [Register(0x78), Register(0x50)]
#       a_hi[0x00..0x01] <- t577f U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
0b 78 50 

# b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 02369 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 58 00 00 00 00 

# t9829 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# Index("b", Number(U8, 3))
# 0236f Copy8 [Register(0x57), Register(0x76)]
#       t9829 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
#       Index("b", Number(U8, 3))
0b 57 76 

# b_hi[0x01..0x02] <- t9829 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# 02372 Copy8 [Register(0x76), Register(0x59)]
#       b_hi[0x01..0x02] <- t9829 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
0b 76 59 

# t811a <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# Index("b", Number(U8, 2))
# 02375 Copy8 [Register(0x56), Register(0x76)]
#       t811a <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
#       Index("b", Number(U8, 2))
0b 56 76 

# b_hi[0x00..0x01] <- t811a U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# 02378 Copy8 [Register(0x76), Register(0x58)]
#       b_hi[0x00..0x01] <- t811a U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
0b 76 58 

# t8956 <- c U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "t8956 <- c U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 0237b Copy32 [Register(0x4c), Register(0x60)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 4c 60 

# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 0237e Copy32 [Register(0x54), Register(0x64)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 54 64 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 02381 Mul8_16 [Register(0x60), Register(0x64), Register(0x68)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 60 64 68 

# 02385 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 6a 00 

# 02388 LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 6b 00 

# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 0238b Copy8 [Register(0x61), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 61 7a 

# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 0238e LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 70 00 00 00 00 

# 02394 Copy8 [Register(0x7a), Register(0x70)]
#       inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 7a 70 

# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02397 Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 75 

# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 0239a LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 6c 00 00 00 00 

# 023a0 Copy8 [Register(0x75), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 75 6c 

# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 023a3 Mul8_16 [Register(0x70), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 70 6c 6c 

# 023a7 LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6e 00 

# 023aa LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6f 00 

# inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 023ad Copy8 [Register(0x6d), Register(0x7b)]
#       inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 6d 7b 

# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 023b0 Copy8 [Register(0x7b), Register(0x6f)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 7b 6f 

# inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 023b3 Copy8 [Register(0x6c), Register(0x7b)]
#       inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 6c 7b 

# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 023b6 Copy8 [Register(0x7b), Register(0x6e)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 7b 6e 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 023b9 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 

# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 023bc Copy8 [Register(0x7c), Register(0x6d)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 7c 6d 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 023bf LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 

# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 023c2 Copy8 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7c 6c 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 023c5 ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 023c6 AddCarry32_1 [Register(0x68), Register(0x6c), Register(0x68)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 68 6c 68 

# 023ca AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 023cb Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 75 

# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 023ce LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 6c 00 00 00 00 

# 023d4 Copy8 [Register(0x75), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 75 6c 

# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 023d7 Mul8_16 [Register(0x60), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 60 6c 6c 

# 023db LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6e 00 

# 023de LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6f 00 

# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 023e1 Copy8 [Register(0x61), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 61 7a 

# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 023e4 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 70 00 00 00 00 

# 023ea Copy8 [Register(0x7a), Register(0x70)]
#       inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 7a 70 

# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 023ed Mul8_16 [Register(0x70), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 70 64 60 

# 023f1 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 62 00 

# 023f4 LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 63 00 

# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 023f7 Copy32 [Register(0x6c), Register(0x64)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 6c 64 

# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 023fa ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 023fb AddCarry32_1 [Register(0x64), Register(0x60), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 64 60 6c 

# 023ff AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 02400 Copy8 [Register(0x6e), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 6e 7a 

# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 02403 Copy8 [Register(0x7a), Register(0x6f)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 7a 6f 

# inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 02406 Copy8 [Register(0x6d), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 6d 7a 

# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 02409 Copy8 [Register(0x7a), Register(0x6e)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 7a 6e 

# inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 0240c Copy8 [Register(0x6c), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 6c 7a 

# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 0240f Copy8 [Register(0x7a), Register(0x6d)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 7a 6d 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02412 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 

# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02415 Copy8 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7c 6c 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 02418 Copy32 [Register(0x6c), Register(0x64)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 6c 64 

# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 0241b ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 0241c AddCarry32_1 [Register(0x68), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 68 64 60 

# 02420 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32 None
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[t8956] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 02421 Store32_1 [Register(0x60), Register(0x5c)]
#       mem[t8956] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 60 5c 

# 02424 Store32_2 []
#       mem[t8956] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 

# t2558 <- c U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "t2558 <- c U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02425 Copy32 [Register(0x5c), Register(0x84)]
#       t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 5c 84 

# 02428 AddImm32IgnoreCarry [Register(0x84), Constant32(0x00000004=4)]
#       t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 84 04 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 0242e Copy32 [Register(0x50), Register(0x60)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 50 60 

# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 02431 Copy32 [Register(0x58), Register(0x64)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 58 64 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 02434 Mul8_16 [Register(0x60), Register(0x64), Register(0x68)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 60 64 68 

# 02438 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 6a 00 

# 0243b LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 6b 00 

# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 0243e Copy8 [Register(0x61), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 61 7a 

# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02441 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 70 00 00 00 00 

# 02447 Copy8 [Register(0x7a), Register(0x70)]
#       inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 7a 70 

# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 0244a Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 75 

# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 0244d LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 6c 00 00 00 00 

# 02453 Copy8 [Register(0x75), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 75 6c 

# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02456 Mul8_16 [Register(0x70), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 70 6c 6c 

# 0245a LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6e 00 

# 0245d LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6f 00 

# inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 02460 Copy8 [Register(0x6d), Register(0x7b)]
#       inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 6d 7b 

# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 02463 Copy8 [Register(0x7b), Register(0x6f)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 7b 6f 

# inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 02466 Copy8 [Register(0x6c), Register(0x7b)]
#       inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 6c 7b 

# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 02469 Copy8 [Register(0x7b), Register(0x6e)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 7b 6e 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0246c LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 

# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 0246f Copy8 [Register(0x7c), Register(0x6d)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 7c 6d 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02472 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 

# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02475 Copy8 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7c 6c 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02478 ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02479 AddCarry32_1 [Register(0x68), Register(0x6c), Register(0x68)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 68 6c 68 

# 0247d AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 0247e Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 75 

# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02481 LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 6c 00 00 00 00 

# 02487 Copy8 [Register(0x75), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 75 6c 

# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 0248a Mul8_16 [Register(0x60), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 60 6c 6c 

# 0248e LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6e 00 

# 02491 LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6f 00 

# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02494 Copy8 [Register(0x61), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 61 7a 

# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02497 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 70 00 00 00 00 

# 0249d Copy8 [Register(0x7a), Register(0x70)]
#       inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 7a 70 

# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 024a0 Mul8_16 [Register(0x70), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 70 64 60 

# 024a4 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 62 00 

# 024a7 LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 63 00 

# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 024aa Copy32 [Register(0x6c), Register(0x64)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 6c 64 

# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 024ad ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 024ae AddCarry32_1 [Register(0x64), Register(0x60), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 64 60 6c 

# 024b2 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 024b3 Copy8 [Register(0x6e), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 6e 7a 

# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 024b6 Copy8 [Register(0x7a), Register(0x6f)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 7a 6f 

# inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 024b9 Copy8 [Register(0x6d), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 6d 7a 

# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 024bc Copy8 [Register(0x7a), Register(0x6e)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 7a 6e 

# inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 024bf Copy8 [Register(0x6c), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 6c 7a 

# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 024c2 Copy8 [Register(0x7a), Register(0x6d)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 7a 6d 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 024c5 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 

# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 024c8 Copy8 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7c 6c 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 024cb Copy32 [Register(0x6c), Register(0x64)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 6c 64 

# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 024ce ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 024cf AddCarry32_1 [Register(0x68), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 68 64 60 

# 024d3 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32 None
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 024d4 Store32_1 [Register(0x60), Register(0x84)]
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 60 84 

# 024d7 Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 

# temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 024d8 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 8c 00 00 00 00 

# temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 024de LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 84 00 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 024e4 Mul8_16 [Register(0x50), Register(0x54), Register(0x60)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 50 54 60 

# 024e8 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 62 00 

# 024eb LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 63 00 

# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 024ee Copy8 [Register(0x51), Register(0x74)]
#       inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 51 74 

# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 024f1 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 68 00 00 00 00 

# 024f7 Copy8 [Register(0x74), Register(0x68)]
#       inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 74 68 

# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 024fa Copy8 [Register(0x55), Register(0x76)]
#       inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 55 76 

# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 024fd LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 64 00 00 00 00 

# 02503 Copy8 [Register(0x76), Register(0x64)]
#       inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 76 64 

# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 02506 Mul8_16 [Register(0x68), Register(0x64), Register(0x64)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 68 64 64 

# 0250a LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 66 00 

# 0250d LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 67 00 

# inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 02510 Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 65 75 

# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 02513 Copy8 [Register(0x75), Register(0x67)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 75 67 

# inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 02516 Copy8 [Register(0x64), Register(0x75)]
#       inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 64 75 

# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 02519 Copy8 [Register(0x75), Register(0x66)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 75 66 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 0251c LoadImm8 [Register(0x77), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 77 00 

# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 0251f Copy8 [Register(0x77), Register(0x65)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 77 65 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02522 LoadImm8 [Register(0x77), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 77 00 

# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02525 Copy8 [Register(0x77), Register(0x64)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 77 64 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 02528 ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02529 AddCarry32_1 [Register(0x60), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 60 64 60 

# 0252d AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 0252e Copy8 [Register(0x55), Register(0x76)]
#       inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 55 76 

# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02531 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 64 00 00 00 00 

# 02537 Copy8 [Register(0x76), Register(0x64)]
#       inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 76 64 

# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 0253a Mul8_16 [Register(0x50), Register(0x64), Register(0x64)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 50 64 64 

# 0253e LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 66 00 

# 02541 LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 67 00 

# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02544 Copy8 [Register(0x51), Register(0x74)]
#       inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 51 74 

# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02547 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 68 00 00 00 00 

# 0254d Copy8 [Register(0x74), Register(0x68)]
#       inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 74 68 

# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 02550 Mul8_16 [Register(0x68), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 68 54 50 

# 02554 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 52 00 

# 02557 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 53 00 

# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 0255a Copy32 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 64 54 

# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 0255d ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 0255e AddCarry32_1 [Register(0x54), Register(0x50), Register(0x64)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 54 50 64 

# 02562 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 02563 Copy8 [Register(0x66), Register(0x74)]
#       inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 66 74 

# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 02566 Copy8 [Register(0x74), Register(0x67)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 74 67 

# inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 02569 Copy8 [Register(0x65), Register(0x74)]
#       inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 65 74 

# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 0256c Copy8 [Register(0x74), Register(0x66)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 74 66 

# inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 0256f Copy8 [Register(0x64), Register(0x74)]
#       inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 64 74 

# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 02572 Copy8 [Register(0x74), Register(0x65)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 74 65 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02575 LoadImm8 [Register(0x77), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 77 00 

# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 02578 Copy8 [Register(0x77), Register(0x64)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 77 64 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 0257b Copy32 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 64 54 

# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 0257e ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 0257f AddCarry32_1 [Register(0x60), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 60 54 50 

# 02583 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32 None
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# Index("temp", Number(U8, 0))
# 02584 Copy8 [Register(0x50), Register(0x74)]
#       tc89e <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
#       Index("temp", Number(U8, 0))
0b 50 74 

# temp_lo[0x02..0x03] <- tc89e U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# 02587 Copy8 [Register(0x74), Register(0x8e)]
#       temp_lo[0x02..0x03] <- tc89e U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
0b 74 8e 

# tdc08 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# Index("temp", Number(U8, 1))
# 0258a Copy8 [Register(0x51), Register(0x74)]
#       tdc08 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
#       Index("temp", Number(U8, 1))
0b 51 74 

# temp_lo[0x03..0x04] <- tdc08 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# 0258d Copy8 [Register(0x74), Register(0x8f)]
#       temp_lo[0x03..0x04] <- tdc08 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
0b 74 8f 

# tf338 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# Index("temp", Number(U8, 2))
# 02590 Copy8 [Register(0x52), Register(0x74)]
#       tf338 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
#       Index("temp", Number(U8, 2))
0b 52 74 

# temp_hi[0x00..0x01] <- tf338 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# 02593 Copy8 [Register(0x74), Register(0x84)]
#       temp_hi[0x00..0x01] <- tf338 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
0b 74 84 

# tb6b4 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# Index("temp", Number(U8, 3))
# 02596 Copy8 [Register(0x53), Register(0x74)]
#       tb6b4 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
#       Index("temp", Number(U8, 3))
0b 53 74 

# temp_hi[0x01..0x02] <- tb6b4 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# 02599 Copy8 [Register(0x74), Register(0x85)]
#       temp_hi[0x01..0x02] <- tb6b4 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
0b 74 85 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 0259c Copy32 [Register(0x0c), Register(0x80)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 80 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 0259f Copy32 [Register(0x8c), Register(0x50)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 8c 50 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 025a2 Store32_1 [Register(0x50), Register(0x80)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 50 80 

# 025a5 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 025a6 Copy32 [Register(0x0c), Register(0x80)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c 80 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 025a9 Copy32 [Register(0x80), Register(0x50)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 80 50 

# 025ac AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 50 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 025b2 Copy32 [Register(0x84), Register(0x54)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 84 54 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 025b5 Store32_1 [Register(0x54), Register(0x50)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 54 50 

# 025b8 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 025b9 Copy32 [Register(0x0c), Register(0x80)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c 80 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 025bc Copy32 [Register(0x80), Register(0x50)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 80 50 

# 025bf AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 50 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 025c5 Copy32 [Register(0x50), Register(0x54)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 50 54 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 025c8 Copy32 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 5c 50 

# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 025cb Copy32 [Register(0x5c), Register(0x60)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 5c 60 

# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 025ce Load32 [Register(0x50), Register(0x64)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 50 64 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 025d1 Copy32 [Register(0x60), Register(0x68)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 60 68 

# 025d4 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 68 04 00 00 00 

# inline_mul32_64_add_U64_0_t3203 <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t3203 <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"a\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# 025da Copy32 [Register(0x50), Register(0x6c)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
21 50 6c 

# 025dd AddImm32IgnoreCarry [Register(0x6c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
32 6c 04 00 00 00 

# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 025e3 Load32 [Register(0x6c), Register(0x70)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 6c 70 

# inline_mul32_64_add_U64_0_teec0 <- inline_mul32_64_add_U64_0_b U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_teec0 <- inline_mul32_64_add_U64_0_b U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"b\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# 025e6 Copy32 [Register(0x54), Register(0x6c)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
21 54 6c 

# 025e9 AddImm32IgnoreCarry [Register(0x6c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
32 6c 04 00 00 00 

# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 025ef Load32 [Register(0x6c), Register(0x6c)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 6c 6c 

# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 025f2 ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 025f3 AddCarry32_1 [Register(0x70), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 70 6c 6c 

# 025f7 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 025f8 Store32_1 [Register(0x6c), Register(0x68)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 6c 68 

# 025fb Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 025fc Load32 [Register(0x50), Register(0x68)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 50 68 

# inline_mul32_64_add_U64_0_t24ae <- inline_mul32_64_add_U64_0_b U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# 025ff Copy32 [Register(0x54), Register(0x50)]
#       inline_mul32_64_add_U64_0_t24ae <- inline_mul32_64_add_U64_0_b U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
#       Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
#       Ident("b")
21 54 50 

# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_t24ae] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 02602 Load32 [Register(0x50), Register(0x50)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_t24ae] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 50 50 

# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 02605 ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 02606 AddCarry32_1 [Register(0x68), Register(0x50), Register(0x50)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 68 50 50 

# 0260a AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 0260b Store32_1 [Register(0x50), Register(0x60)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 50 60 

# 0260e Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 0260f Load32 [Register(0x60), Register(0x54)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 60 54 

# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 02612 Copy32 [Register(0x64), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 64 50 

# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 02615 Cmp8 [Register(0x53), Register(0x57)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 53 57 

# 02618 Cmp8IfZero [Register(0x52), Register(0x56)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 52 56 

# 0261b Cmp8IfZero [Register(0x51), Register(0x55)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 51 55 

# 0261e Cmp8IfZero [Register(0x50), Register(0x54)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 50 54 

# 02621 JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 48 26 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02625 Copy32 [Register(0x60), Register(0x68)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 60 68 

# 02628 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 68 04 00 00 00 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 0262e Copy32 [Register(0x60), Register(0x68)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 60 68 

# 02631 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 68 04 00 00 00 

# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# 02637 Load32 [Register(0x68), Register(0x50)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
22 68 50 

# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# 0263a AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
32 50 01 00 00 00 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# 02640 Store32_1 [Register(0x50), Register(0x68)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
23 50 68 

# 02643 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
24 

# goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 02644 JmpImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 48 26 00 

# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64 None
# inline_mul32_64_add_U64_0_function_end_add_U64
# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 02648 Copy32 [Register(0x58), Register(0x50)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 58 50 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 0264b Mul8_16 [Register(0x4c), Register(0x50), Register(0x54)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 4c 50 54 

# 0264f LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 56 00 

# 02652 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 57 00 

# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 02655 Copy8 [Register(0x4d), Register(0x78)]
#       inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 4d 78 

# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 02658 LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 60 00 00 00 00 

# 0265e Copy8 [Register(0x78), Register(0x60)]
#       inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 78 60 

# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02661 Copy8 [Register(0x51), Register(0x74)]
#       inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 51 74 

# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02664 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 58 00 00 00 00 

# 0266a Copy8 [Register(0x74), Register(0x58)]
#       inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 74 58 

# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 0266d Mul8_16 [Register(0x60), Register(0x58), Register(0x58)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 60 58 58 

# 02671 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 5a 00 

# 02674 LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 5b 00 

# inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 02677 Copy8 [Register(0x59), Register(0x79)]
#       inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 59 79 

# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 0267a Copy8 [Register(0x79), Register(0x5b)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 79 5b 

# inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 0267d Copy8 [Register(0x58), Register(0x79)]
#       inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 58 79 

# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 02680 Copy8 [Register(0x79), Register(0x5a)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 79 5a 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02683 LoadImm8 [Register(0x7a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7a 00 

# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 02686 Copy8 [Register(0x7a), Register(0x59)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 7a 59 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02689 LoadImm8 [Register(0x7a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7a 00 

# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 0268c Copy8 [Register(0x7a), Register(0x58)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7a 58 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 0268f ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 02690 AddCarry32_1 [Register(0x54), Register(0x58), Register(0x54)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 54 58 54 

# 02694 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 02695 Copy8 [Register(0x51), Register(0x74)]
#       inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 51 74 

# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 02698 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 58 00 00 00 00 

# 0269e Copy8 [Register(0x74), Register(0x58)]
#       inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 74 58 

# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 026a1 Mul8_16 [Register(0x4c), Register(0x58), Register(0x58)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 4c 58 58 

# 026a5 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 5a 00 

# 026a8 LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 5b 00 

# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 026ab Copy8 [Register(0x4d), Register(0x78)]
#       inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 4d 78 

# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 026ae LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 60 00 00 00 00 

# 026b4 Copy8 [Register(0x78), Register(0x60)]
#       inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 78 60 

# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 026b7 Mul8_16 [Register(0x60), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 60 50 4c 

# 026bb LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 4e 00 

# 026be LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 4f 00 

# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 026c1 Copy32 [Register(0x58), Register(0x50)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 58 50 

# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 026c4 ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 026c5 AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x58)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 50 4c 58 

# 026c9 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 026ca Copy8 [Register(0x5a), Register(0x78)]
#       inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 5a 78 

# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 026cd Copy8 [Register(0x78), Register(0x5b)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 78 5b 

# inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 026d0 Copy8 [Register(0x59), Register(0x78)]
#       inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 59 78 

# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 026d3 Copy8 [Register(0x78), Register(0x5a)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 78 5a 

# inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 026d6 Copy8 [Register(0x58), Register(0x78)]
#       inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 58 78 

# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 026d9 Copy8 [Register(0x78), Register(0x59)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 78 59 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 026dc LoadImm8 [Register(0x7a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7a 00 

# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 026df Copy8 [Register(0x7a), Register(0x58)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7a 58 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 026e2 Copy32 [Register(0x58), Register(0x50)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 58 50 

# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 026e5 ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 026e6 AddCarry32_1 [Register(0x54), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 54 50 4c 

# 026ea AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 026eb Copy32 [Register(0x4c), Register(0x50)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 4c 50 

# goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32 None
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# Index("temp", Number(U8, 0))
# 026ee Copy8 [Register(0x50), Register(0x74)]
#       tc89e <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
#       Index("temp", Number(U8, 0))
0b 50 74 

# temp_lo[0x02..0x03] <- tc89e U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# 026f1 Copy8 [Register(0x74), Register(0x8e)]
#       temp_lo[0x02..0x03] <- tc89e U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
0b 74 8e 

# tdc08 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# Index("temp", Number(U8, 1))
# 026f4 Copy8 [Register(0x51), Register(0x74)]
#       tdc08 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
#       Index("temp", Number(U8, 1))
0b 51 74 

# temp_lo[0x03..0x04] <- tdc08 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# 026f7 Copy8 [Register(0x74), Register(0x8f)]
#       temp_lo[0x03..0x04] <- tdc08 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
0b 74 8f 

# tf338 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# Index("temp", Number(U8, 2))
# 026fa Copy8 [Register(0x52), Register(0x74)]
#       tf338 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
#       Index("temp", Number(U8, 2))
0b 52 74 

# temp_hi[0x00..0x01] <- tf338 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# 026fd Copy8 [Register(0x74), Register(0x84)]
#       temp_hi[0x00..0x01] <- tf338 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
0b 74 84 

# tb6b4 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# Index("temp", Number(U8, 3))
# 02700 Copy8 [Register(0x53), Register(0x74)]
#       tb6b4 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
#       Index("temp", Number(U8, 3))
0b 53 74 

# temp_hi[0x01..0x02] <- tb6b4 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# 02703 Copy8 [Register(0x74), Register(0x85)]
#       temp_hi[0x01..0x02] <- tb6b4 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
0b 74 85 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 02706 Copy32 [Register(0x0c), Register(0x80)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 80 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 02709 Copy32 [Register(0x8c), Register(0x50)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 8c 50 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 0270c Store32_1 [Register(0x50), Register(0x80)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 50 80 

# 0270f Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 02710 Copy32 [Register(0x0c), Register(0x80)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c 80 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 02713 Copy32 [Register(0x80), Register(0x50)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 80 50 

# 02716 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 50 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 0271c Copy32 [Register(0x84), Register(0x54)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 84 54 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 0271f Store32_1 [Register(0x54), Register(0x50)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 54 50 

# 02722 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 02723 Copy32 [Register(0x0c), Register(0x80)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c 80 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 02726 Copy32 [Register(0x80), Register(0x50)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 80 50 

# 02729 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 50 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 0272f Copy32 [Register(0x50), Register(0x54)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 50 54 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02732 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 5c 4c 

# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02735 Copy32 [Register(0x54), Register(0x50)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 54 50 

# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 02738 Copy32 [Register(0x5c), Register(0x54)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 5c 54 

# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 0273b Load32 [Register(0x4c), Register(0x58)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 4c 58 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 0273e Copy32 [Register(0x54), Register(0x5c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 54 5c 

# 02741 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 5c 04 00 00 00 

# inline_mul32_64_add_U64_1_t3203 <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t3203 <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"a\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# 02747 Copy32 [Register(0x4c), Register(0x60)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
21 4c 60 

# 0274a AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
32 60 04 00 00 00 

# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 02750 Load32 [Register(0x60), Register(0x64)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 60 64 

# inline_mul32_64_add_U64_1_teec0 <- inline_mul32_64_add_U64_1_b U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_teec0 <- inline_mul32_64_add_U64_1_b U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"b\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# 02753 Copy32 [Register(0x50), Register(0x60)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
21 50 60 

# 02756 AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
32 60 04 00 00 00 

# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 0275c Load32 [Register(0x60), Register(0x60)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 60 60 

# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 0275f ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 02760 AddCarry32_1 [Register(0x64), Register(0x60), Register(0x60)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 64 60 60 

# 02764 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 02765 Store32_1 [Register(0x60), Register(0x5c)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 60 5c 

# 02768 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 02769 Load32 [Register(0x4c), Register(0x5c)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 4c 5c 

# inline_mul32_64_add_U64_1_t24ae <- inline_mul32_64_add_U64_1_b U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# 0276c Copy32 [Register(0x50), Register(0x4c)]
#       inline_mul32_64_add_U64_1_t24ae <- inline_mul32_64_add_U64_1_b U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
#       Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
#       Ident("b")
21 50 4c 

# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_t24ae] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 0276f Load32 [Register(0x4c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_t24ae] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 4c 4c 

# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 02772 ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 02773 AddCarry32_1 [Register(0x5c), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 5c 4c 4c 

# 02777 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 02778 Store32_1 [Register(0x4c), Register(0x54)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 4c 54 

# 0277b Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 0277c Load32 [Register(0x54), Register(0x50)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 54 50 

# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 0277f Copy32 [Register(0x58), Register(0x4c)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 58 4c 

# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 02782 Cmp8 [Register(0x4f), Register(0x53)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 4f 53 

# 02785 Cmp8IfZero [Register(0x4e), Register(0x52)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 4e 52 

# 02788 Cmp8IfZero [Register(0x4d), Register(0x51)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 4d 51 

# 0278b Cmp8IfZero [Register(0x4c), Register(0x50)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 4c 50 

# 0278e JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 b5 27 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 02792 Copy32 [Register(0x54), Register(0x5c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 54 5c 

# 02795 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 5c 04 00 00 00 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 0279b Copy32 [Register(0x54), Register(0x5c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 54 5c 

# 0279e AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 5c 04 00 00 00 

# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# 027a4 Load32 [Register(0x5c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
22 5c 4c 

# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# 027a7 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
32 4c 01 00 00 00 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# 027ad Store32_1 [Register(0x4c), Register(0x5c)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
23 4c 5c 

# 027b0 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
24 

# goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 027b1 JmpImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 b5 27 00 

# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64 None
# inline_mul32_64_add_U64_1_function_end_add_U64
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 027b5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 

# return None None
# Return { value: None }
# 027bb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 027c1 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 027c3 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec32
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([144, 145, 146, 147])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(USIZE)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(USIZE)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_keyboard (global static "keyboard") Static(1004692) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_keyboard_enable (global static "keyboard_enable") Static(1004700) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_lcd_current (global static "lcd_current") Static(1004704) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_lcd_display (global static "lcd_display") Static(1004708) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_lcd_enable (global static "lcd_enable") Static(1004788) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_stdin (global static "stdin") Static(1004792) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([152])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 (t1c22 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 (t2574 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 (t3f28 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e (t3f9e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([152])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed (t5eed Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 (t6274 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 (t8119 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 (t8772 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 (t8e91 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 (t9450 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) Reg(U8) Some([154])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 (t96e8 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 (ta620 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([154])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 (te046 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 (tea96 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_keyboard (global static "keyboard") Static(991868) None
# Var inline_print_dec32_div32_by10_47_keyboard_enable (global static "keyboard_enable") Static(991876) None
# Var inline_print_dec32_div32_by10_47_lcd_current (global static "lcd_current") Static(991880) None
# Var inline_print_dec32_div32_by10_47_lcd_display (global static "lcd_display") Static(991884) None
# Var inline_print_dec32_div32_by10_47_lcd_enable (global static "lcd_enable") Static(991964) None
# Var inline_print_dec32_div32_by10_47_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_print_dec32_div32_by10_47_prod (Local prod Struct("U64") Static(992232)) Static(992232) None
# Var inline_print_dec32_div32_by10_47_stdin (global static "stdin") Static(991968) None
# Var inline_print_dec32_div32_by10_47_t0 (static "prod" addr) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_t8792 (t8792 Ident("a")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(USIZE, 3435973837)) Reg(U32) Some([160, 161, 162, 163]) [205, 204, 204, 204]
# Var inline_print_dec32_div32_by10_47_tf6f7 (tf6f7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 992232), Number(USIZE, 4)) }) Reg(U32) Some([148, 149, 150, 151]) [236, 35, 15, 0]
# Var inline_print_dec32_div32_by10_47_tfc6a (tfc6a Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })) Reg(U8) Some([164])
# Var inline_print_dec32_mul32_by10_14_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(USIZE)) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_mul32_by10_14_keyboard (global static "keyboard") Static(999232) None
# Var inline_print_dec32_mul32_by10_14_keyboard_enable (global static "keyboard_enable") Static(999240) None
# Var inline_print_dec32_mul32_by10_14_lcd_current (global static "lcd_current") Static(999244) None
# Var inline_print_dec32_mul32_by10_14_lcd_display (global static "lcd_display") Static(999248) None
# Var inline_print_dec32_mul32_by10_14_lcd_enable (global static "lcd_enable") Static(999328) None
# Var inline_print_dec32_mul32_by10_14_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_print_dec32_mul32_by10_14_stdin (global static "stdin") Static(999332) None
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_putc_29_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([164])
# Var inline_print_dec32_putc_29_keyboard (global static "keyboard") Static(1002508) None
# Var inline_print_dec32_putc_29_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_print_dec32_putc_29_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_print_dec32_putc_29_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_print_dec32_putc_29_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_print_dec32_putc_29_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_print_dec32_putc_29_stdin (global static "stdin") Static(1002608) None
# Var inline_print_dec32_putc_29_t0 (static "lcd_enable" addr) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_putc_29_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([164])
# Var inline_print_dec32_putc_29_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([164])
# Var inline_print_dec32_putc_29_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([152])
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([164])
# Var inline_print_dec32_putc_29_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([153]) [0]
# Var keyboard (global static "keyboard") Static(1000324) None
# Var keyboard_enable (global static "keyboard_enable") Static(1000332) None
# Var lcd_current (global static "lcd_current") Static(1000336) None
# Var lcd_display (global static "lcd_display") Static(1000340) None
# Var lcd_enable (global static "lcd_enable") Static(1000420) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(1000424) None
# Var t1723 (t1723 Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })) Reg(U8) Some([164])
# Var t1a60 (t1a60 Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))) Reg(U8) Some([164])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([144, 145, 146, 147])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([156, 157, 158, 159])
# Var t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([148, 149, 150, 151]) [0, 1, 0, 0]
# Var ta8fd (ta8fd Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })) Reg(U8) Some([164])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([148, 149, 150, 151])
# Var tc4db (tc4db Call(Call { function: "print_dec32", parameters: [Ident("b")] })) Reg(U8) Some([164])
# Var tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([164])
# Consts t9c15: 0n256/0x00000100u32
# 027c8 Copy32 [Register(0x00), Register(0x90)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [144, 145, 146, 147].
21 00 90 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Ident("a")
# 027cb Copy32 [Register(0x90), Register(0x9c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Ident("a")
21 90 9c 

# t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Number(USIZE, 256)
# 027ce LoadImm32 [Register(0x94), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Number(USIZE, 256)
20 94 00 01 00 00 

# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# 027d4 Cmp8 [Register(0x97), Register(0x9f)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
15 97 9f 

# 027d7 Cmp8IfZero [Register(0x96), Register(0x9e)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 96 9e 

# 027da Cmp8IfZero [Register(0x95), Register(0x9d)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 95 9d 

# 027dd Cmp8IfZero [Register(0x94), Register(0x9c)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 94 9c 

# 027e0 JcImm [Label24(print_dec32_if_else_0_2)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
71 1a 28 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# tdd9e <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
# Index("a", Number(U8, 0))
# 027e4 Copy8 [Register(0x90), Register(0xa4)]
#       tdd9e <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
#       Index("a", Number(U8, 0))
0b 90 a4 

# None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
# 027e7 Copy8 [Register(0xa4), Register(0x00)]
#       Arg0[a]=tdd9e None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0b a4 00 

# Registers used by this function: {144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [160, 161, 162, 163, 164]
# 027ea Push8 [Register(0xa4)]
#       Saving reg0xa4 before None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
09 a4 

# 027ec Push8 [Register(0xa3)]
#       Saving reg0xa3 before None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
09 a3 

# 027ee Push8 [Register(0xa2)]
#       Saving reg0xa2 before None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
09 a2 

# 027f0 Push8 [Register(0xa1)]
#       Saving reg0xa1 before None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
09 a1 

# 027f2 Push8 [Register(0xa0)]
#       Saving reg0xa0 before None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
09 a0 

# 027f4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 027fa StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 04 28 00 00 

# 02800 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 e7 29 00 

# 02804 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 0280a Pop8 [Register(0xa0)]
#       Restoring reg0xa0 after None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0a a0 

# 0280c Pop8 [Register(0xa1)]
#       Restoring reg0xa1 after None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0a a1 

# 0280e Pop8 [Register(0xa2)]
#       Restoring reg0xa2 after None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0a a2 

# 02810 Pop8 [Register(0xa3)]
#       Restoring reg0xa3 after None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0a a3 

# 02812 Pop8 [Register(0xa4)]
#       Restoring reg0xa4 after None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0a a4 

# return None Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 02814 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 02816 JmpImm [Label24(print_dec32_if_end_0)]
#       goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
70 1a 28 00 

# :print_dec32_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_else_0_2
# :print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 0281a Copy32 [Register(0x90), Register(0x9c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 90 9c 

# inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 0281d Copy32 [Register(0x9c), Register(0x94)]
#       inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 9c 94 

# inline_print_dec32_div32_by10_47_t8792 <- inline_print_dec32_div32_by10_47_a U32 Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# Ident("a")
# 02820 Copy32 [Register(0x94), Register(0x9c)]
#       inline_print_dec32_div32_by10_47_t8792 <- inline_print_dec32_div32_by10_47_a U32 Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       Ident("a")
21 94 9c 

# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# Number(USIZE, 3435973837)
# 02823 LoadImm32 [Register(0xa0), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       Number(USIZE, 3435973837)
20 a0 cd cc cc cc 

# inline_print_dec32_div32_by10_47_t0 <- 0n992232/0x000f23e8u32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# 02829 LoadImm32 [Register(0x94), Constant32(0x000f23e8=992232)]
#       inline_print_dec32_div32_by10_47_t0 <- 0n992232/0x000f23e8u32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
20 94 e8 23 0f 00 

# inline_print_dec32_div32_by10_47_t1c61 <- inline_print_dec32_div32_by10_47_t0 U32 Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t1c61 <- inline_print_dec32_div32_by10_47_t0 U32 Some('/lutcomp/programs/lib/div.j':(130,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })\nAddressOf(Ident(\"prod\"))\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# 0282f Copy32 [Register(0x9c), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_47_t8792 None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 9c 00 

# 02832 Copy32 [Register(0xa0), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 a0 04 

# 02835 Copy32 [Register(0x94), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 94 08 

# Registers used by this function: {144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164}
# Registers used by callee tree: {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143}
# Registers to save: []
# 02838 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 0283e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 48 28 00 00 

# 02844 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 42 23 00 

# 02848 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# inline_print_dec32_div32_by10_47_tf6f7 <- 0n992236/0x000f23ecu32  Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 992232), Number(USIZE, 4)) }
# Number(USIZE, 992236)
# 0284e LoadImm32 [Register(0x94), Constant32(0x000f23ec=992236)]
#       inline_print_dec32_div32_by10_47_tf6f7 <- 0n992236/0x000f23ecu32  Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 992232), Number(USIZE, 4)) }
#       Number(USIZE, 992236)
20 94 ec 23 0f 00 

# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tf6f7] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 02854 Load32 [Register(0x94), Register(0x94)]
#       inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tf6f7] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 94 94 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
# Index("a", Number(U8, 0))
# 02857 Copy8 [Register(0x94), Register(0x9a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
#       Index("a", Number(U8, 0))
0b 94 9a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
# 0285a LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
04 00 03 

# 0285d Shift8 [Constant8(0x04=4), Register(0x00), Register(0x9a), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
1e 04 00 9a 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# 02862 Copy8 [Register(0x99), Register(0x94)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
0b 99 94 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
# Index("a", Number(U8, 1))
# 02865 Copy8 [Register(0x95), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
#       Index("a", Number(U8, 1))
0b 95 98 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
# 02868 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
04 00 03 

# 0286b Shift8 [Constant8(0x04=4), Register(0x00), Register(0x98), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
1e 04 00 98 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# 02870 Copy8 [Register(0x99), Register(0x95)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
0b 99 95 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
# Index("a", Number(U8, 2))
# 02873 Copy8 [Register(0x96), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
#       Index("a", Number(U8, 2))
0b 96 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
# 02876 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
04 00 03 

# 02879 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x99), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
1e 04 00 99 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# 0287e Copy8 [Register(0x99), Register(0x96)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
0b 99 96 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
# Index("a", Number(U8, 3))
# 02881 Copy8 [Register(0x97), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
#       Index("a", Number(U8, 3))
0b 97 98 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
# 02884 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
04 00 03 

# 02887 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x98), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
1e 04 00 98 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# 0288c Copy8 [Register(0x99), Register(0x97)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
0b 99 97 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
# Index("a", Number(U8, 0))
# 0288f Copy8 [Register(0x94), Register(0x9a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
#       Index("a", Number(U8, 0))
0b 94 9a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
# 02892 Copy8 [Register(0x9a), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
0b 9a 99 

# 02895 AndImm8 [Register(0x99), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
18 99 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# 02898 Copy8 [Register(0x99), Register(0x94)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
0b 99 94 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Index("a", Number(U8, 0))
# 0289b Copy8 [Register(0x94), Register(0x9a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Index("a", Number(U8, 0))
0b 94 9a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
# Index("a", Number(U8, 1))
# 0289e Copy8 [Register(0x95), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
#       Index("a", Number(U8, 1))
0b 95 98 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
# 028a1 Copy8 [Register(0x98), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
0b 98 99 

# 028a4 AndImm8 [Register(0x99), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
18 99 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# 028a7 Or8 [Register(0x9a), Register(0x99), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
1c 9a 99 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# 028ab Copy8 [Register(0x99), Register(0x94)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
0b 99 94 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
# Index("a", Number(U8, 1))
# 028ae Copy8 [Register(0x95), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
#       Index("a", Number(U8, 1))
0b 95 98 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
# 028b1 Copy8 [Register(0x98), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
0b 98 99 

# 028b4 AndImm8 [Register(0x99), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
18 99 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# 028b7 Copy8 [Register(0x99), Register(0x95)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
0b 99 95 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Index("a", Number(U8, 1))
# 028ba Copy8 [Register(0x95), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Index("a", Number(U8, 1))
0b 95 98 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
# Index("a", Number(U8, 2))
# 028bd Copy8 [Register(0x96), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
#       Index("a", Number(U8, 2))
0b 96 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
# 028c0 AndImm8 [Register(0x99), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
18 99 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# 028c3 Or8 [Register(0x98), Register(0x99), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
1c 98 99 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# 028c7 Copy8 [Register(0x99), Register(0x95)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
0b 99 95 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
# Index("a", Number(U8, 2))
# 028ca Copy8 [Register(0x96), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
#       Index("a", Number(U8, 2))
0b 96 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
# 028cd AndImm8 [Register(0x99), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
18 99 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# 028d0 Copy8 [Register(0x99), Register(0x96)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
0b 99 96 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Index("a", Number(U8, 2))
# 028d3 Copy8 [Register(0x96), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Index("a", Number(U8, 2))
0b 96 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
# Index("a", Number(U8, 3))
# 028d6 Copy8 [Register(0x97), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
#       Index("a", Number(U8, 3))
0b 97 98 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
# 028d9 Copy8 [Register(0x98), Register(0x9a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
0b 98 9a 

# 028dc AndImm8 [Register(0x9a), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
18 9a e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# 028df Or8 [Register(0x99), Register(0x9a), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
1c 99 9a 99 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# 028e3 Copy8 [Register(0x99), Register(0x96)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
0b 99 96 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
# Index("a", Number(U8, 3))
# 028e6 Copy8 [Register(0x97), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
#       Index("a", Number(U8, 3))
0b 97 98 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
# 028e9 Copy8 [Register(0x98), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
0b 98 99 

# 028ec AndImm8 [Register(0x99), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
18 99 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# 028ef Copy8 [Register(0x99), Register(0x97)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
0b 99 97 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 None
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_print_dec32_div32_by10_47_function_end_div32_by10 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_function_end_div32_by10 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_47_function_end_div32_by10 None
# inline_print_dec32_div32_by10_47_function_end_div32_by10
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 028f2 Copy32 [Register(0x94), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 94 00 

# Registers used by this function: {144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164]
# 028f5 Push8 [Register(0xa4)]
#       Saving reg0xa4 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a4 

# 028f7 Push8 [Register(0xa3)]
#       Saving reg0xa3 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a3 

# 028f9 Push8 [Register(0xa2)]
#       Saving reg0xa2 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a2 

# 028fb Push8 [Register(0xa1)]
#       Saving reg0xa1 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a1 

# 028fd Push8 [Register(0xa0)]
#       Saving reg0xa0 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a0 

# 028ff Push8 [Register(0x9f)]
#       Saving reg0x9f before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9f 

# 02901 Push8 [Register(0x9e)]
#       Saving reg0x9e before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9e 

# 02903 Push8 [Register(0x9d)]
#       Saving reg0x9d before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9d 

# 02905 Push8 [Register(0x9c)]
#       Saving reg0x9c before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9c 

# 02907 Push8 [Register(0x9a)]
#       Saving reg0x9a before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9a 

# 02909 Push8 [Register(0x99)]
#       Saving reg0x99 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 99 

# 0290b Push8 [Register(0x98)]
#       Saving reg0x98 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 98 

# 0290d Push8 [Register(0x97)]
#       Saving reg0x97 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 97 

# 0290f Push8 [Register(0x96)]
#       Saving reg0x96 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 96 

# 02911 Push8 [Register(0x95)]
#       Saving reg0x95 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 95 

# 02913 Push8 [Register(0x94)]
#       Saving reg0x94 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 94 

# 02915 Push8 [Register(0x93)]
#       Saving reg0x93 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 93 

# 02917 Push8 [Register(0x92)]
#       Saving reg0x92 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 92 

# 02919 Push8 [Register(0x91)]
#       Saving reg0x91 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 91 

# 0291b Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 90 

# 0291d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 02923 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 2d 29 00 00 

# 02929 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 c8 27 00 

# 0292d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 02933 Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 90 

# 02935 Pop8 [Register(0x91)]
#       Restoring reg0x91 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 91 

# 02937 Pop8 [Register(0x92)]
#       Restoring reg0x92 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 92 

# 02939 Pop8 [Register(0x93)]
#       Restoring reg0x93 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 93 

# 0293b Pop8 [Register(0x94)]
#       Restoring reg0x94 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 94 

# 0293d Pop8 [Register(0x95)]
#       Restoring reg0x95 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 95 

# 0293f Pop8 [Register(0x96)]
#       Restoring reg0x96 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 96 

# 02941 Pop8 [Register(0x97)]
#       Restoring reg0x97 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 97 

# 02943 Pop8 [Register(0x98)]
#       Restoring reg0x98 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 98 

# 02945 Pop8 [Register(0x99)]
#       Restoring reg0x99 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 99 

# 02947 Pop8 [Register(0x9a)]
#       Restoring reg0x9a after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9a 

# 02949 Pop8 [Register(0x9c)]
#       Restoring reg0x9c after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9c 

# 0294b Pop8 [Register(0x9d)]
#       Restoring reg0x9d after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9d 

# 0294d Pop8 [Register(0x9e)]
#       Restoring reg0x9e after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9e 

# 0294f Pop8 [Register(0x9f)]
#       Restoring reg0x9f after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9f 

# 02951 Pop8 [Register(0xa0)]
#       Restoring reg0xa0 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a0 

# 02953 Pop8 [Register(0xa1)]
#       Restoring reg0xa1 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a1 

# 02955 Pop8 [Register(0xa2)]
#       Restoring reg0xa2 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a2 

# 02957 Pop8 [Register(0xa3)]
#       Restoring reg0xa3 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a3 

# 02959 Pop8 [Register(0xa4)]
#       Restoring reg0xa4 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a4 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 0295b Copy32 [Register(0x90), Register(0x9c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 90 9c 

# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 0295e Copy32 [Register(0x94), Register(0x90)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 94 90 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 02961 ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 02962 AddCarry32_1 [Register(0x90), Register(0x90), Register(0x90)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 90 90 90 

# 02966 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 02967 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 02968 AddCarry32_1 [Register(0x90), Register(0x90), Register(0x94)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 90 90 94 

# 0296c AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 0296d ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 0296e AddCarry32_1 [Register(0x94), Register(0x94), Register(0x94)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 94 94 94 

# 02972 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 02973 ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 02974 AddCarry32_1 [Register(0x94), Register(0x90), Register(0x90)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 94 90 90 

# 02978 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_14_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 None
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 02979 Copy32 [Register(0x90), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 90 00 

# 0297c Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 

# 0297e Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 

# 02980 Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 

# 02982 Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 

# 02984 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 

# 0298a ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 

# 0298b AddCarry32_1 [Register(0x9c), Register(0x00), Register(0x90)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 9c 00 90 

# 0298f AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 

# tdd9e <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
# Index("a", Number(U8, 0))
# 02990 Copy8 [Register(0x90), Register(0xa4)]
#       tdd9e <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
#       Index("a", Number(U8, 0))
0b 90 a4 

# t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
# 02993 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
04 00 30 

# 02996 Add8NoCarryIn [Register(0xa4), Register(0x00), Register(0xa4)]
#       t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
14 a4 00 a4 

# inline_print_dec32_putc_29_c <- t1a60 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t1a60 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xa4), Register(0xa4)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 0299a Out0 [Register(0xa4)]
#       IoWrite0
68 a4 

# inline_print_dec32_putc_29_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 0299c LoadImm32 [Register(0x94), Constant32(0x000f4c6c=1002604)]
#       inline_print_dec32_putc_29_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 94 6c 4c 0f 00 

# inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 029a2 Load8 [Register(0x94), Register(0x98)]
#       inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 94 98 

# inline_print_dec32_putc_29_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 029a5 LoadImm8 [Register(0x99), Constant8(0x00=0)]
#       inline_print_dec32_putc_29_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 99 00 

# if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 029a8 Cmp8 [Register(0x98), Register(0x99)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 98 99 

# 029ab JzImm [Label24(inline_print_dec32_putc_29_putc_if_else_0_2)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 e0 29 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_putc_if_true_0_1)], resolved: None }
# :inline_print_dec32_putc_29_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec32_putc_29_putc_if_true_0_1
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xa4), Register(0xa4)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 029af Copy8 [Register(0xa4), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b a4 00 

# Registers used by this function: {144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [160, 161, 162, 163, 164]
# 029b2 Push8 [Register(0xa4)]
#       Saving reg0xa4 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a4 

# 029b4 Push8 [Register(0xa3)]
#       Saving reg0xa3 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a3 

# 029b6 Push8 [Register(0xa2)]
#       Saving reg0xa2 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a2 

# 029b8 Push8 [Register(0xa1)]
#       Saving reg0xa1 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a1 

# 029ba Push8 [Register(0xa0)]
#       Saving reg0xa0 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a0 

# 029bc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 029c2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c cc 29 00 00 

# 029c8 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 029cc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 029d2 Pop8 [Register(0xa0)]
#       Restoring reg0xa0 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a0 

# 029d4 Pop8 [Register(0xa1)]
#       Restoring reg0xa1 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a1 

# 029d6 Pop8 [Register(0xa2)]
#       Restoring reg0xa2 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a2 

# 029d8 Pop8 [Register(0xa3)]
#       Restoring reg0xa3 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a3 

# 029da Pop8 [Register(0xa4)]
#       Restoring reg0xa4 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a4 

# goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 029dc JmpImm [Label24(inline_print_dec32_putc_29_putc_if_end_0)]
#       goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 e0 29 00 

# :inline_print_dec32_putc_29_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_else_0_2
# :inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_end_0
# goto inline_print_dec32_putc_29_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_29_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_29_function_end_putc None
# inline_print_dec32_putc_29_function_end_putc
# return None None
# Return { value: None }
# 029e0 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 029e2 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec8
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var a (Arg0 a Number(U8)) Reg(U8) Some([165])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([166])
# Var inline_print_dec8_putc_30_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([165])
# Var inline_print_dec8_putc_30_keyboard (global static "keyboard") Static(1002508) None
# Var inline_print_dec8_putc_30_keyboard_enable (global static "keyboard_enable") Static(1002516) None
# Var inline_print_dec8_putc_30_lcd_current (global static "lcd_current") Static(1002520) None
# Var inline_print_dec8_putc_30_lcd_display (global static "lcd_display") Static(1002524) None
# Var inline_print_dec8_putc_30_lcd_enable (global static "lcd_enable") Static(1002604) None
# Var inline_print_dec8_putc_30_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_print_dec8_putc_30_stdin (global static "stdin") Static(1002608) None
# Var inline_print_dec8_putc_30_t0 (static "lcd_enable" addr) Reg(U32) Some([168, 169, 170, 171])
# Var inline_print_dec8_putc_30_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([165])
# Var inline_print_dec8_putc_30_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([165])
# Var inline_print_dec8_putc_30_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([166])
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([165])
# Var inline_print_dec8_putc_30_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([172]) [0]
# Var keyboard (global static "keyboard") Static(1001052) None
# Var keyboard_enable (global static "keyboard_enable") Static(1001060) None
# Var lcd_current (global static "lcd_current") Static(1001064) None
# Var lcd_display (global static "lcd_display") Static(1001068) None
# Var lcd_enable (global static "lcd_enable") Static(1001148) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(1001152) None
# Var t6cb (t6cb Arithmetic(Multiply, Ident("b"), Number(U8, 10))) Reg(U8) Some([165])
# Var t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([165])
# Var t79c4 (t79c4 Call(Call { function: "print_dec8", parameters: [Ident("b")] })) Reg(U8) Some([165])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([172])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([166])
# Var td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([165])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([166]) [10]
# Consts td7b5: 0n10/0x0au8
# 029e7 Copy8 [Register(0x00), Register(0xa5)]
#       Save function parameter 'a' registers [0] to locals [165].
0b 00 a5 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# 029ea Copy8 [Register(0xa5), Register(0xac)]
#       t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
#       Ident("a")
0b a5 ac 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 029ed LoadImm8 [Register(0xa6), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 a6 0a 

# if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# 029f0 Cmp8 [Register(0xa6), Register(0xac)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
15 a6 ac 

# 029f3 JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
71 fb 29 00 

# 029f7 JmpImm [Label24(print_dec8_if_else_0_2)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
70 51 2a 00 

# :print_dec8_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 10))
# Ident("a")
# 029fb Copy8 [Register(0xa5), Register(0xac)]
#       t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
#       Ident("a")
0b a5 ac 

# b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 10))
# 029fe LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
04 00 0a 

# 02a01 Divide8 [Register(0xac), Register(0x00), Register(0xa6)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
17 ac 00 a6 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0xa6), Register(0xa6)], resolved: None }
# None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 02a05 Copy8 [Register(0xa6), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b a6 00 

# Registers used by this function: {165, 166, 168, 169, 170, 171, 172}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [165, 166, 168, 169, 170, 171, 172]
# 02a08 Push8 [Register(0xac)]
#       Saving reg0xac before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 ac 

# 02a0a Push8 [Register(0xab)]
#       Saving reg0xab before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 ab 

# 02a0c Push8 [Register(0xaa)]
#       Saving reg0xaa before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 aa 

# 02a0e Push8 [Register(0xa9)]
#       Saving reg0xa9 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 a9 

# 02a10 Push8 [Register(0xa8)]
#       Saving reg0xa8 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 a8 

# 02a12 Push8 [Register(0xa6)]
#       Saving reg0xa6 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 a6 

# 02a14 Push8 [Register(0xa5)]
#       Saving reg0xa5 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 a5 

# 02a16 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 02a1c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 26 2a 00 00 

# 02a22 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 e7 29 00 

# 02a26 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 02a2c Pop8 [Register(0xa5)]
#       Restoring reg0xa5 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a a5 

# 02a2e Pop8 [Register(0xa6)]
#       Restoring reg0xa6 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a a6 

# 02a30 Pop8 [Register(0xa8)]
#       Restoring reg0xa8 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a a8 

# 02a32 Pop8 [Register(0xa9)]
#       Restoring reg0xa9 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a a9 

# 02a34 Pop8 [Register(0xaa)]
#       Restoring reg0xaa after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a aa 

# 02a36 Pop8 [Register(0xab)]
#       Restoring reg0xab after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a ab 

# 02a38 Pop8 [Register(0xac)]
#       Restoring reg0xac after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a ac 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Ident("a")
# 02a3a Copy8 [Register(0xa5), Register(0xac)]
#       t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Ident("a")
0b a5 ac 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 10))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 10))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0xa6), Register(0xa6)], resolved: None }
# t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 10))
# 02a3d LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 10))
04 00 0a 

# 02a40 Mul8_8 [Register(0xa6), Register(0x00), Register(0xa5)]
#       t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 10))
10 a6 00 a5 

# a <- t8792 Subtract Var(t6cb) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# 02a44 Copy8 [Register(0xa5), Register(0x00)]
#       a <- t8792 Subtract Var(t6cb) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
0b a5 00 

# 02a47 Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(t6cb) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
02 00 

# 02a49 Add8NoCarryIn [Register(0xac), Register(0x00), Register(0xa5)]
#       a <- t8792 Subtract Var(t6cb) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
14 ac 00 a5 

# goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 02a4d JmpImm [Label24(print_dec8_if_end_0)]
#       goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
70 51 2a 00 

# :print_dec8_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_else_0_2
# :print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# 02a51 Copy8 [Register(0xa5), Register(0xac)]
#       t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
#       Ident("a")
0b a5 ac 

# t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 02a54 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 02a57 Add8NoCarryIn [Register(0xac), Register(0x00), Register(0xa5)]
#       t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 ac 00 a5 

# inline_print_dec8_putc_30_c <- t6db1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t6db1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0xa5), Register(0xa5)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xa5), Register(0xa5)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 02a5b Out0 [Register(0xa5)]
#       IoWrite0
68 a5 

# inline_print_dec8_putc_30_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 02a5d LoadImm32 [Register(0xa8), Constant32(0x000f4c6c=1002604)]
#       inline_print_dec8_putc_30_t0 <- 0n1002604/0x000f4c6cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 a8 6c 4c 0f 00 

# inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 02a63 Load8 [Register(0xa8), Register(0xa6)]
#       inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 a8 a6 

# inline_print_dec8_putc_30_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 02a66 LoadImm8 [Register(0xac), Constant8(0x00=0)]
#       inline_print_dec8_putc_30_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 ac 00 

# if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 02a69 Cmp8 [Register(0xa6), Register(0xac)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 a6 ac 

# 02a6c JzImm [Label24(inline_print_dec8_putc_30_putc_if_else_0_2)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 95 2a 00 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_putc_if_true_0_1)], resolved: None }
# :inline_print_dec8_putc_30_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec8_putc_30_putc_if_true_0_1
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xa5), Register(0xa5)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 02a70 Copy8 [Register(0xa5), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b a5 00 

# Registers used by this function: {165, 166, 168, 169, 170, 171, 172}
# Registers used by callee tree: {28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 160, 161, 162, 163, 164, 165, 166, 167, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247}
# Registers to save: [165, 166]
# 02a73 Push8 [Register(0xa6)]
#       Saving reg0xa6 before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a6 

# 02a75 Push8 [Register(0xa5)]
#       Saving reg0xa5 before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a5 

# 02a77 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 02a7d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 87 2a 00 00 

# 02a83 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 f2 1f 00 

# 02a87 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 02a8d Pop8 [Register(0xa5)]
#       Restoring reg0xa5 after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a5 

# 02a8f Pop8 [Register(0xa6)]
#       Restoring reg0xa6 after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a6 

# goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 02a91 JmpImm [Label24(inline_print_dec8_putc_30_putc_if_end_0)]
#       goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 95 2a 00 

# :inline_print_dec8_putc_30_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_else_0_2
# :inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_end_0
# goto inline_print_dec8_putc_30_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_30_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_30_function_end_putc None
# inline_print_dec8_putc_30_function_end_putc
# return None None
# Return { value: None }
# 02a95 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 02a97 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_stdio_init_queue_init_35_PS2_SCAN_CODE_TO_ASCII (global const "PS2_SCAN_CODE_TO_ASCII") GlobalConst(PS2_SCAN_CODE_TO_ASCII) None [0..8]=[0, 0, 0, 0, 0, 0, 0, 0] of 1025
# Var inline_stdio_init_queue_init_35_keyboard (global static "keyboard") Static(1002872) None
# Var inline_stdio_init_queue_init_35_keyboard_enable (global static "keyboard_enable") Static(1002880) None
# Var inline_stdio_init_queue_init_35_lcd_current (global static "lcd_current") Static(1002884) None
# Var inline_stdio_init_queue_init_35_lcd_display (global static "lcd_display") Static(1002888) None
# Var inline_stdio_init_queue_init_35_lcd_enable (global static "lcd_enable") Static(1002968) None
# Var inline_stdio_init_queue_init_35_lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var inline_stdio_init_queue_init_35_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([176, 177, 178, 179])
# Var inline_stdio_init_queue_init_35_stdin (global static "stdin") Static(1002972) None
# Var inline_stdio_init_queue_init_35_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([176, 177, 178, 179])
# Var inline_stdio_init_queue_init_35_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([180]) [0]
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([184, 185, 186, 187])
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([176, 177, 178, 179])
# Var keyboard (global static "keyboard") Static(1006512) None
# Var keyboard_enable (global static "keyboard_enable") Static(1006520) None
# Var lcd_current (global static "lcd_current") Static(1006524) None
# Var lcd_display (global static "lcd_display") Static(1006528) None
# Var lcd_enable (global static "lcd_enable") Static(1006608) None
# Var lcd_row_start (global const "lcd_row_start") GlobalConst(lcd_row_start) None [0, 64, 20, 84]
# Var stdin (global static "stdin") Static(1006612) None
# Var t0 (static "lcd_enable" addr) Reg(U32) Some([176, 177, 178, 179])
# Var t1 (static "keyboard_enable" addr) Reg(U32) Some([176, 177, 178, 179])
# Var t2 (static "stdin" addr) Reg(U32) Some([176, 177, 178, 179])
# Var t5c19 (t5c19 Call(Call { function: "KeyBoard_init", parameters: [] })) Reg(U8) Some([188])
# Var t7567 (t7567 Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })) Reg(U8) Some([188])
# Var t7b05 (t7b05 Call(Call { function: "lcd_init", parameters: [] })) Reg(U8) Some([188])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([180]) [1]
# Var tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([176, 177, 178, 179])
# Consts t0: 0n1006608/0x000f5c10u32
# Consts t1: 0n1006520/0x000f5bb8u32
# Consts t2: 0n1006612/0x000f5c14u32
# t0 <- 0n1006608/0x000f5c10u32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
# 02a9c LoadImm32 [Register(0xb0), Constant32(0x000f5c10=1006608)]
#       t0 <- 0n1006608/0x000f5c10u32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
20 b0 10 5c 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 02aa2 LoadImm8 [Register(0xb4), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 b4 01 

# mem[t0] <- tfcd U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
# 02aa5 Store8 [Register(0xb4), Register(0xb0)]
#       mem[t0] <- tfcd U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
06 b4 b0 

# t1 <- 0n1006520/0x000f5bb8u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
# 02aa8 LoadImm32 [Register(0xb0), Constant32(0x000f5bb8=1006520)]
#       t1 <- 0n1006520/0x000f5bb8u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
20 b0 b8 5b 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 02aae LoadImm8 [Register(0xb4), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 b4 01 

# mem[t1] <- tfcd U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
# 02ab1 Store8 [Register(0xb4), Register(0xb0)]
#       mem[t1] <- tfcd U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
06 b4 b0 

# t2 <- 0n1006612/0x000f5c14u32  Some('/lutcomp/programs/lib/stdio.j':(13,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 02ab4 LoadImm32 [Register(0xb0), Constant32(0x000f5c14=1006612)]
#       t2 <- 0n1006612/0x000f5c14u32  Some('/lutcomp/programs/lib/stdio.j':(13,5))
#       VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
20 b0 14 5c 0f 00 

# tfff6 <- t2 U32 Some('/lutcomp/programs/lib/stdio.j':(13,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# optimized away noop copy Instruction { source: "tfff6 <- t2 U32 Some('/lutcomp/programs/lib/stdio.j':(13,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })\nAddressOf(Ident(\"stdin\"))\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_stdio_init_queue_init_35_s <- tfff6 U32 Some('/lutcomp/programs/lib/stdio.j':(13,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_s <- tfff6 U32 Some('/lutcomp/programs/lib/stdio.j':(13,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32 Some('/lutcomp/programs/lib/Queue.j':(8,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 02aba Copy32 [Register(0xb0), Register(0xb8)]
#       inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 b0 b8 

# 02abd AddImm32IgnoreCarry [Register(0xb8), Constant32(0x00000100=256)]
#       inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32) Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 b8 00 01 00 00 

# inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02ac3 LoadImm8 [Register(0xb4), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 b4 00 

# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# 02ac6 Store8 [Register(0xb4), Register(0xb8)]
#       mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
06 b4 b8 

# inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32 Some('/lutcomp/programs/lib/Queue.j':(9,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 02ac9 AddImm32IgnoreCarry [Register(0xb0), Constant32(0x00000104=260)]
#       inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32) Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 b0 04 01 00 00 

# inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 02acf LoadImm8 [Register(0xb4), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 b4 00 

# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# 02ad2 Store8 [Register(0xb4), Register(0xb0)]
#       mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
06 b4 b0 

# goto inline_stdio_init_queue_init_35_function_end_queue_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_stdio_init_queue_init_35_function_end_queue_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_stdio_init_queue_init_35_function_end_queue_init)], resolved: None }
# :inline_stdio_init_queue_init_35_function_end_queue_init None
# inline_stdio_init_queue_init_35_function_end_queue_init
# None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {176, 177, 178, 179, 180, 184, 185, 186, 187, 188}
# Registers used by callee tree: {16, 20, 21, 22, 23, 24, 25, 26, 27, 160, 161, 162, 163, 164, 165, 166, 167, 226, 248, 252, 253, 254, 255}
# Registers to save: []
# 02ad5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 02adb StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c e5 2a 00 00 

# 02ae1 JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 a4 1e 00 

# 02ae5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# None <= call KeyBoard_init() Some('/lutcomp/programs/lib/stdio.j':(15,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {176, 177, 178, 179, 180, 184, 185, 186, 187, 188}
# Registers used by callee tree: {16, 17, 18, 19, 20}
# Registers to save: []
# 02aeb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 02af1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c fb 2a 00 00 

# 02af7 JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 04 00 

# 02afb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 02b01 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 02b03 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

